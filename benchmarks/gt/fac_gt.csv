id,t1,t2,t3,t4,t5,t6,t7,t8
fac_1,"""Shaizeen Aga""|""Subarno Banerjee""|""Hossein Golestani""|""Hanyun Tao""","""Persistency for Synchronization-Free Regions""^""Persistency for Synchronization-Free Regions,[PLDI 2018]""^""Persistency for Synchronization-Free Regions,[PLDI 2018]""|""Race Detection for Event-Driven Mobile Systems""^""Race Detection for Event-Driven Mobile Systems Chun-Hung Hsiao, Jie Yu, Satish Narayanasamy, Ziyun Kong, Cristiano L. Pereira, Gilles A. Pokam, Peter M. Chen, Jason Flinn International Conference on Programming Language Design and Implementation (PLDI), June 2014.""^""Race Detection for Event-Driven Mobile Systems,[PLDI 2014]""|""Chimera: Hybrid Program Analysis for Determinism""^""Chimera: Hybrid Program Analysis for Determinism Dongyoon Lee, Peter M. Chen, Jason Flinn, and Satish Narayanasamy. International Conference on Programming Language Design and Implementation (PLDI). June 2012.""^""Chimera:Hybrid Program Analysis for Determinism,[PLDI 2012]""|""A Case for SC-Preserving Compiler""^""A Case for SC-Preserving Compiler Dan Marino, Abhayendra Singh, Todd Millstein, Madan Musuvathi and Satish Narayanasamy. International Conference on Programming Language Design and Implementation (PLDI). June 2011.""^""A Case for SC-Preserving Compiler,[PLDI 2011]""|""DRFx: A Simple and Efficient Memory Model for Concurrent Programming Languages""^""DRFx: A Simple and Efficient Memory Model for Concurrent Programming Languages Dan Marino, Abhayendra Singh, Todd Millstein, Madan Musuvathi and Satish Narayanasamy. International Conference on Programming Language Design and Implementation (PLDI). June 2010.""^""DRFx: A Simple and Efficient Memory Model for Concurrent Languages,[PLDI 2010]""|""Effective Sampling for Lightweight Data Race Detection.""^""Effective Sampling for Lightweight Data Race Detection. Dan Marino, Madan Musuvathi and Satish Narayanasamy. International Conference on Programming Language Design and Implementation (PLDI). June 2009.""^""Effective Sampling for Lightweight Data Race Detection.,[PLDI 2009]""|""Automatically Classifying Benign and Harmful Data Races Using Replay Analysis.""^""Automatically Classifying Benign and Harmful Data Races Using Replay Analysis. Satish Narayanasamy, Zhenghao Wang, Jordan Tigani, Andrew Edwards and Brad Calder. International Conference on Programming Language Design and Implementation (PLDI). June 2007.""^""Benign Race Classification,[PLDI 2007]""","""EECS 570 - Parallel Computer Architecture (Fall 2009, Winter 2014)""|""EECS 370 - Introduction to Computer Organization (Winter 2008, Fall 2011, Fall 2012, Fall 2013, Winter 2015, Fall 2016)""|""EECS 598 - Ubiquitous Parallelism (Fall 2010, Winter 2012)""|""EECS 483- Compiler Construction (Winter 2013, Winter 2011, Winter 2010, Winter 2009)""","""DoublePlay: Parallelizing sequential logging and replay""^""DoublePlay: Parallelizing sequential logging and replay Kaushik Veeraraghavan, Dongyoon Lee, Benjamin Wester, Peter M. Chen, Jason Flinn, and Satish Narayanasamy International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), March 2011.""|""MLP-aware Heterogeneous Main Memory""^""DATE 2011. MLP-aware Heterogeneous Main Memory       Sujay Phadke and Satish Narayanasamy       Design, Automation & Test in Europe (DATE), March 2011.       Best Paper Candidate""","""HPCA 2015""|""PLDI 2015 (ERC)""|""ASPLOS 2014""|""OSDI 2014 (ERC)""|""IEEE Top Picks 2014""|""MICRO 2013""|""PLDI 2013""|""ISCA 2012""|""HPCA 2012""|""2013 and 2014""|""CGO 2010""|""2013 & 2014""|""PACT 2011 & 2012""|""PLDI 2012 ERC""|""ASPLOS 2011 & 2013 ERC""|""MICRO 2012 ERC""|""HiPEAC 2012 & 13""|""ISPASS 2011""|""ICCD 2009""|""2010""|""2011 & 2012""|""WoDET 2013""|""MSPC 2011 & 2012""|""NPC 2011""|""VLSI 2010 & 2011""|""CACS 2010""|""CATARS 2009""","""Maple: A Coverage-Driven Testing Tool for Multithreaded Programs.""^""Maple: A Coverage-Driven Testing Tool for Multithreaded Programs. Jie Yu, Satish Narayanasamy, Cristiano Pereira, and Gilles Pokam 27th ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages and Applications (OOSPLA), October 2012.""^""OOPSLA 2012. Maple:. A Coverage-Driven Testing Tool for Multithreaded Programs.       Jie Yu, Satish Narayanasamy, Cristiano Pereira, and Gilles Pokam       27th ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages and Applications (OOSPLA), October 2012.""|""When Less Is MOre (LIMO): Controlled Parallelism for Improved Energy Efficiency""^""When Less Is MOre (LIMO): Controlled Parallelism for Improved Energy Efficiency Gaurav Chadha, Scott Mahlke, and Satish Narayanasamy Proceedings of International Conference on Compilers Architecture and Synthesis for Embedded Systems (CASES). October 2012.""^""CASES 2012. When Less Is MOre (LIMO): Controlled Parallelism for Improved Energy Efficiency       Gaurav Chadha, Scott Mahlke, and Satish Narayanasamy       Proceedings of International Conference on Compilers Architecture and Synthesis for Embedded Systems (CASES). October 2012.""|""End-to-end Sequential Consistency""^""End-to-end Sequential Consistency Abhayendra Singh, Satish Narayanasamy, Dan Marino, Todd Millstein, and Madan Musuvathi International Symposium on Computer Architecture (ISCA). June 2012.""^""ISCA 2012. End-to-end Sequential Consistency       Abhayendra Singh, Satish Narayanasamy, Dan Marino, Todd Millstein, and Madan Musuvathi       International Symposium on Computer Architecture (ISCA). June 2012.       IEEE MICRO Top Picks award.""|""Chimera: Hybrid Program Analysis for Determinism""^""Chimera: Hybrid Program Analysis for Determinism Dongyoon Lee, Peter M. Chen, Jason Flinn, and Satish Narayanasamy. International Conference on Programming Language Design and Implementation (PLDI). June 2012.""^""PLDI 2012. Chimera:. Hybrid Program Analysis for Determinism       Dongyoon Lee, Peter M. Chen, Jason Flinn, and Satish Narayanasamy.       International Conference on Programming Language Design and Implementation (PLDI). June 2012.""","""Abhayendra Singh""|""Andrew Edwards""|""Brad Calder""|""Chun-Hung Hsiao""|""Cristiano L. Pereira""|""Dan Marino""|""Dongyoon Lee""|""Gilles A. Pokam""|""Jason Flinn""|""Jie Yu""|""Jordan Tigani""|""Madan Musuvathi""|""Peter M. Chen""|""Todd Millstein""|""Zhenghao Wang""|""Ziyun Kong""","""Gaurav Chadha""|""Chun-Hung Hsiao""|""Dongyoon Lee""|""Abhayendra Singh""|""Jie Yu"""
fac_2,"""Angello Astorga""|""Adithya Murali""|""Shambwaditya Saha""","""Learning Stateful Preconditions Modulo a Test Generator""^""Learning Stateful Preconditions Modulo a Test Generator Angello Astorga, P. Madhusudan, Shambwaditya Saha, Shiyu Wang, Tao Xie Proc. of Programming Languages Design and Implementation (PLDI), 2019.""|""Natural Proofs for Data Structure Manipulation in C using Separation Logic""^""Natural Proofs for Data Structure Manipulation in C using Separation Logic Edgar Pek, Xiaokang Qiu, P. Madhusudan 35th ACM SIGPLAN Programming Language Design and Implementation (PLDI 2014) ""|""Natural Proofs for Structure, Data, and Separation""^""Natural Proofs for Structure, Data, and Separation Xiaokang Qiu, Pranav Garg, and Andrei Stefanescu, P. Madhusudan ACM SIGPLAN Conf. on Programming Language Design and Implementation (PLDI), 2013.""|""Analyzing Recursive Programs using a Fixed-point Calculus""^""Analyzing Recursive Programs using a Fixed-point Calculus with Salvatore La Torre and Gennaro Parlato ACM SIGPLAN Conf. on Programming Language Design and Implementation (PLDI) Dublin, Ireland, 2009.""","""Spring 2014: CS498: Logic in Computer Science""|""Fall 2013: CS173: Discrete Structures""|""Fall 2011: CS373: Intro to Theory of Computation""|""Spring 2011: CS477: Formal Methods in Software Development""","""Lagrange's theorem for binary squares""^""Lagrange's theorem for binary squares, P. Madhusudan, Dirk Nowotka, Aayush Rajasekaran, and Jeffrey Shallit, 43rd International Symposium on Mathematical Foundations of Computer Science (MFCS 2018), Best paper award""|""VEX: Vetting Browser Extensions For Security Vulnerabilities""^""VVEX: Vetting Browser Extensions For Security Vulnerabilities with Sruthi Bandhakavi, Sam King, and Marianne Winslett Proc. of USENIX Security Symposium. Washington D.C, USA, August 2010. *** Best paper award *** See the VEX Website for details on the tool. PDF""","""POPL 2019""|""CONCUR 2018""|""Workshop on Automated Deduction for Separation Logics (ADSL), affiliated with LICS and FLOC, 2018""|""TACAS 2017""|""Highlights of Logic, Automata, and Games, 2017""|""International Conference on Runtime Verification (RV 2017)""|""ICALP 2016: Int'l Colloq. on Automata Languages and Programming, Rome, Italy""|""Trustworthy Global Computing (TGC), 2015, Madrid, Spain""|""ACM/IEEE International Conference on Model Driven Engineering Languages and Systems, 2014, Madrid, Spain""|""POPL 2015, Mumbai, India""|""PLDI 2014, Edinburgh, Scotland""|""CONCUR 2014, Rome, Italy""|""SAS 2014, Munich, Germany""|"" MFCS, 2013, CAV 2013, Highlights of Logic, Automata, Games""|""LPAR-18, POPL 2012""|""CAV 2011""|""ATVA 2011""|""FSTTCS 2011""|""FSTTCS 2010""|""ATVA 2010""|""STACS 2010""|""CAV 2009""|""LICS 2009""|""TIME 2009""|""APLAS 2008""|""CONCUR 2008""|""ICALP 2007""|""ACM SAC""|""FSTTCS 2005""|""CAV 2005""|""GDV 2005 (with CAV 2005)""|""FORMATS""|""FTRTFT, 2004""","""Predicting Null-Pointer Dereferences in Concurrent Programs""^""Predicting Null-Pointer Dereferences in Concurrent Programs with Azadeh Farzan , Niloofar Razavi, and Francesco Sorrentino 20th ACM SIGSOFT Int'l Symp on Foundations of Software Engineering (FSE), 2012. PDF""|""Security Analysis of Role-based Access Control through Program Verification""^""Security Analysis of Role-based Access Control through Program Verification with Gennaro Parlato and Anna Lisa Ferrara 25th IEEE Computer Security Foundations Symposium (CSF). Harvard University, Cambridge MA, USA, 2012. PDF""|""Analyzing Temporal Role Based Access Control Models""^""Analyzing Temporal Role Based Access Control Models with Emre Uzun, Vijay Atluri, Shamik Sural, Jaideep Vaidya, Gennaro Parlato, and Anna Lisa Ferrara 17th ACM Symposium on Access Control Models and Technologies (SACMAT) Newark, USA, 2012.""|""Reachability under Contextual Locking""^""Reachability under Contextual Locking with Mahesh Viswanathan and Rohit Chadha Tools and Algorithms for the Construction and Analysis of Systems (TACAS), 2012, Tallinn, Estonia. PDF""|""Recursive Proofs for Inductive Tree Data-structures""^""Recursive Proofs for Inductive Tree Data-structures with Xiaokang Qiu and Andrei Stefanescu Principles of Programming Languages (POPL), 2012, Philadelphia. PDF""","""Andrei Stefanescu""|""Angello Astorga""|""Edgar Pek""|""Gennaro Parlato""|""Pranav Garg""|""Salvatore La Torre""|""Shambwaditya Saha""|""Shiyu Wang""|""Tao Xie""|""Xiaokang Qiu""","""Pranav Garg""|""Edgar Pek""|""Francesco Sorrentino""|""Xiaokang Qiu""|""Sruthi Bandhakavi"""
fac_3,NA,"""Decidable Verification under a Causally Consistent Shared Memory""^""Decidable Verification under a Causally Consistent Shared Memory Ori Lahav, Udi Boker""|""Promising 2.0: Global Optimizations in Relaxed Memory Concurrency.""^""Promising 2.0: Global Optimizations in Relaxed Memory Concurrency. Sung-Hwan Lee, Minki Cho, Anton Podkopaev, Soham Chakraborty, Chung-Kil Hur, Ori Lahav, Viktor Vafeiadis""|""Robustness against Release/Acquire Semantics""^""Robustness against Release/Acquire Semantics Ori Lahav, Roy Margalit""|""Repairing Sequential Consistency in C/C++11""^""Repairing Sequential Consistency in C/C++11 Ori Lahav, Viktor Vafeiadis, Jeehoon Kang, Chung-Kil Hur, Derek Dreyer""","""Programming Language Foundations [Spring 2020]""|""Software Foundations in Coq [Spring 2019]""|""Concurrency Theory (undergraduate seminar) [Spring 2019] [Spring 2020]""|""Discrete Mathematics [Fall 2018]""|""Weakly Consistent Concurrency (graduate seminar) [Spring 2018]""|""Advanced Seminar in Programming Languages (yearly research seminar) [website]""","""Cut-Admissibility as a Corollary of the Subformula Property""^""Cut-Admissibility as a Corollary of the Subformula Property   Ori Lahav, Yoni Zohar   Best Paper Award   TABLEAUX 2017 [pdf] [Springer]""|""Strong Logic for Weak Memory: Reasoning About Release-Acquire Consistency in Iris""^""Strong Logic for Weak Memory: Reasoning About Release-Acquire Consistency in Iris   Jan-Oliver Kaiser, Hoang-Hai Dang, Derek Dreyer, Ori Lahav, Viktor Vafeiadis   Best Paper Award   ECOOP 2017 [pdf] [full] [LIPIcs] [project page]""|""Repairing Sequential Consistency in C/C++11""^""Repairing Sequential Consistency in C/C++11 Ori Lahav, Viktor Vafeiadis, Jeehoon Kang, Chung-Kil Hur, Derek Dreyer""",NA,"""Non-deterministic Matrices for Semi-canonical Deduction Systems""^""Non-deterministic Matrices for Semi-canonical Deduction Systems Ori Lahav ISMVL 2012 [pdf] [slides] [ieee]""|""Effective Finite-valued Semantics for Labelled Calculi""^""Effective Finite-valued Semantics for Labelled Calculi Matthias Baaz, Ori Lahav, Anna Zamansky IJCAR 2012 [pdf] [slides] [Springer]""","""Anton Podkopaev""|""Chung-Kil Hur""|""Derek Dreyer""|""Jeehoon Kang""|""Minki Cho""|""Roy Margalit""|""Soham Chakraborty""|""Sung-Hwan Lee""|""Udi Boker""|""Viktor Vafeiadis""",NA
fac_4,"""Yuepeng Wang""|""Kostas Ferles""|""Jiayi Wei""|""Greg Anderson""|""Jon Stephens""|""Jocelyn Chen""|""Shankara Pailoor""|""Rong Pan""|""Ben Mariano""|""Sridhar Gopinath""","""Multi-Modal Synthesis of Regular Expressions""^""Multi-Modal Synthesis of Regular Expressions. Jocelyn Chen, Xinyu Wang, Xi Ye, Greg Durrett, Isil Dillig. In PLDI 2020.""|""Optimization + Abstraction: A Synergistic Approach for Analyzing Neural Network Robustness""^""Optimization + Abstraction: A Synergistic Approach for Analyzing Neural Network Robustness. Greg Anderson, Shankara Pailoor, Isil Dillig, Swarat Chaudhuri. In PLDI 2019. (Distinguished paper award)""|""Synthesizing Database Applications for Schema Refactoring""^""Synthesizing Database Applications for Schema Refactoring Yuepeng Wang, James Dong, Rushi Shah, Isil Dillig. In PLDI 2019.""|""Symbolic Reasoning for Automatic Signal Placement""^""Symbolic Reasoning for Automatic Signal Placement. Kostas Ferles, Jacob Van Geffen, Isil Dillig, Yannis Smaragdakis. In PLDI 2018.""|""Program Synthesis using Conflict-Driven Learning""^""Program Synthesis using Conflict-Driven Learning. Yu Feng, Ruben Martins, Osbert Bastani, Isil Dillig. In PLDI 2018.""|""Component-based Synthesis of Table Consolidation and Transformation Tasks from Examples""^""Component-based Synthesis of Table Consolidation and Transformation Tasks from Examples. Yu Feng, Ruben Martins, Jacob VanGeffen, Isil Dillig, Swarat Chaudhuri. In PLDI 2017.""|""Cartesian Hoare Logic for Verifying k-Safety Properties""^""Cartesian Hoare Logic for Verifying k-Safety Properties. Marcelo Sousa, Isil Dillig. In PLDI 2016.""|""Synthesizing Transformations on Hierarchically Structured Data""^""Synthesizing Transformations on Hierarchically Structured Data. Navid Yaghmazadeh, Chris Klinger, Isil Dillig, Swarat Chaudhuri. In PLDI 2016.""|""Synthesizing Data Structure Transformations from Input-Output Examples""^""Synthesizing Data Structure Transformations from Input-Output Examples.   John Feser, Swarat Chaudhuri, Isil Dillig. PLDI 2015.""|""Static Detection of Asymptotic Performance Bugs in Collection Traversals""^""Static Detection of Asymptotic Performance Bugs in Collection Traversals.   Oswaldo Olivo, Isil Dillig, Calvin Lin. PLDI 2015.""|""Consolidation of Queries with User-Defined Functions""^""Consolidation of Queries with User-Defined Functions .   Marcelo Sousa, Isil Dillig, Dimitrios Vytionitis, Thomas Dillig, Christos Gkantsidis. PLDI 2014.""|""Automated Error Diagnosis Using Abductive Inference""^""Automated Error Diagnosis Using Abductive Inference. Isil Dillig, Thomas Dillig, Alex Aiken. Programming Languages Design and Implementation (PLDI) 2012. ""|""Precise and Compact Modular Procedure Summaries for Heap Manipulating Programs""^""Precise and Compact Modular Procedure Summaries for Heap Manipulating Programs   Isil Dillig, Thomas Dillig, Alex Aiken, Mooly Sagiv. Proceedings of the Conference on Programming Language Design and Implementation (PLDI) 2011.""|""Sound, Complete, and Scalable Path-Sensitive Analysis""^""Sound, Complete, and Scalable Path-Sensitive Analysis   Isil Dillig, Thomas Dillig, Alex Aiken. Proceedings of the Conference on Programming Language Design and Implementation (PLDI), June 2008. Tucson, AZ.""|""Static Error Detection Using Semantic Inconsistency Inference""^""Static Error Detection Using Semantic Inconsistency Inference   Isil Dillig, Thomas Dillig, Alex Aiken. Proceedings of the Conference on Programming Language Design and Implementation (PLDI), pages 435-446, June 2007. San Diego, CA.""","""CS311H: Honors Discrete Mathematics. (Taught every Fall since 2014)""|""CS389L: Automated Logical Reasoning. (Taught every Spring since 2015)""","""Static Detection of DoS Vulnerabilities in Programs that use Regular Expressions""^""Static Detection of DoS Vulnerabilities in Programs that use Regular Expressions. Valentin Wuestholz, Oswaldo Olivo, Marijn Heule, Isil Dillig. In TACAS 2017. [Extended version] (ETAPS 2017 best paper award)""|""Optimization + Abstraction: A Synergistic Approach for Analyzing Neural Network Robustness""^""Optimization + Abstraction: A Synergistic Approach for Analyzing Neural Network Robustness. Greg Anderson, Shankara Pailoor, Isil Dillig, Swarat Chaudhuri. In PLDI 2019. (Distinguished paper award)""|""Program Synthesis using Conflict-Driven Learning""^""Program Synthesis using Conflict-Driven Learning. Yu Feng, Ruben Martins, Osbert Bastani, Isil Dillig. In PLDI 2018. (Distinguished paper award)""|""SQLizer: Query Synthesis from Natural Language""^""SQLizer: Query Synthesis from Natural Language . Navid Yaghmazadeh, Yuepeng Wang, Isil Dillig, Thomas Dillig. In OOPSLA 2017. (Distinguished paper award)""","""PLDI 2020""|"" CAV 2018""|"" PLDI 2018""|"" POPL 2018""|"" CAV 2017""|"" SNAPL 2017""|"" OOPSLA 2016""|"" PLDI 2016""|"" CAV 2015""|"" ESOP 2015""|"" HVC 2014""|"" ECOOP 2014""|"" ESOP 2014""|"" SAS 2013""|"" POPL 2013""|"" OOPSLA 2012""|"" PLDI 2012 SRC""","""Minimum Satisfying Assignments for SMT.""^""Minimum Satisfying Assignments for SMT. Isil Dillig, Thomas Dillig, Ken McMillan, Alex Aiken. Computer Aided Verification (CAV) 2012. [slides]""|""Automated Error Diagnosis Using Abductive Inference.""^""Automated Error Diagnosis Using Abductive Inference. Isil Dillig, Thomas Dillig, Alex Aiken. Programming Languages Design and Implementation (PLDI) 2012. [Extended version] [slides] [poster]""","""Alex Aiken""|""Calvin Lin""|""Chris Klinger""|""Christos Gkantsidis""|""Dimitrios Vytionitis""|""Greg Anderson""|""Greg Durrett""|""Jacob Van Geffen""|""James Dong""|""Jocelyn Chen""|""John Feser""|""Kostas Ferles""|""Marcelo Sousa""|""Mooly Sagiv""|""Navid Yaghmazadeh""|""Osbert Bastani""|""Oswaldo Olivo""|""Ruben Martins""|""Rushi Shah""|""Shankara Pailoor""|""Swarat Chaudhuri""|""Thomas Dillig""|""Xi Ye""|""Xinyu Wang""|""Yannis Smaragdakis""|""Yu Feng""|""Yuepeng Wang""",NA
fac_5,"""Christian Kalhauge""|""Shuyang Liu""|""Zeina Migeed""|""Akshay Utture""","""The ExoVM system for automatic VM and application reduction""^""The ExoVM system for automatic VM and application reduction, with Ben L. Titzer and Joshua Auerbach and David F. Bacon. In Proceedings of PLDI 2007, ACM SIGPLAN Conference on Programming Language Design and Implementation, pages 352-362, San Diego, California, June 2007.""|""Register allocation by puzzle solving""^""Register allocation by puzzle solving, with Fernando Magno Quintao Pereira. In Proceedings of PLDI 2008, ACM SIGPLAN Conference on Programming Language Design and Implementation, pages 216-226, Tucson, Arizona, June 2008.""","""CS 132 Compiler Construction: Fall 2003  Fall 2004  Fall 2005  Fall 2006  Spring 2008  Spring 2009  Winter 2010  Fall 2011  Fall 2012  Fall 2014  Spring 2016  Fall 2016  Fall 2017  Fall 2018  Fall 2019""|""CS 232 Static Program Analysis: Spring 2006  Spring 2007  Spring 2008  Fall 2008  Fall 2009  Winter 2018  Winter 2020""|""CS 239 Parallel Programming Languages: Fall 2007  Winter 2009  Spring 2010  Spring 2011""|""CS 239 Programming Languages: Winter 2004   CS 239 Compilers for Embedded Systems: Spring 2004""|""CS 239 Automated Debugging: Spring 2018""|""CS 239 Quantum Programming: Spring 2019""",NA,"""The Fourth ACM SIGPLAN History of Programming Languages Conference""|""ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation (New Orleans)""|""IEEE International Working Conference on Source Code Analysis and Manipulation (Adelaide, Australia)""|""International Conference on Verification, Model Checking, and Abstract Interpretation (Lisbon)""|""ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation (Lisbon)""","""Overloading is NP-complete, a tutorial dedicated to Dexter Kozen.""^""Overloading is NP-complete, a tutorial dedicated to Dexter Kozen. In Logic and Program Semantics, pages 204-218, Springer, LNCS 7230, 2012.""|""Efficient May Happen in Parallel Analysis for Async-Finish Parallelism""^""Efficient May Happen in Parallel Analysis for Async-Finish Parallelism""","""Ben L. Titzer""|""Joshua Auerbach""|""David F. Bacon""|""Fernando Magno Quintao Pereira""","""Tian Zhao""|""Dennis Brylow""|""Mayur Naik""|""Ma, Di""|""Krishna Nandivada""|""Christian Grothoff""|""Benjamin Titzer""|""Fernando Pereira""|""Jonathan K. Lee""|""Mahdi Eslamimehr""|""Mohsen Lesani""|""Matt Brown""|""John Bender"""
fac_6,"""Larry Kittinger""|""Jongouk Choi""|""Jianping Zeng""","""Compiler-Directed Soft Error Resilience for Lightweight GPU Register File Protection""^""Hongjune Kim, Jianping Zeng, Qingrui Liu, Mohammad Abdel-Majeed, Jaejin Lee, and Changhee Jung   \""Compiler-Directed Soft Error Resilience for Lightweight GPU Register File Protection\"",   `[TOP-TIER]` ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), London, United Kingdom, June 2020.""|""Brainy: Effective Selection of Data Structures""^""Changhee Jung, Silvius Rus, Brian P. Railing, Nathan Clark, and Santosh Pande,   \""Brainy: Effective Selection of Data Structures\"",   `[TOP-TIER]` ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), San Jose, California, June 2011.""","""CS 59000-CAS: Compiler and Architectural Support for Performance, Reliability, and Security (Fall 2019)""|""CS 2505: Computer Organization I (Spring 2014, 2016, 2017, Fall 2018)""|""CS 4284: Systems and Networking Capstone (Spring 2018)""|""CS 4304: Compiler Design (Spring 2015, 2017, 2019)""|""CS 5304: Translator Design and Construction (Fall 2013, 2015, 2017)""|""CS 6304: Topics in Advanced Compilers and Computer Architecture (Fall 2014, 2016, Spring 2019)""","""NanoEsto: An IDE for Ubiquitous Sensor Network Application Developers""^""Changhee Jung, Duk-Kyun Woo, Yongsang Kim, Ingeol Chun, and Chaedeok Lim,   \""NanoEsto: An IDE for Ubiquitous Sensor Network Application Developers\"",   International Symposium on Embedded Technology (ISET), Daegu, Korea, April 2006.""","""PoPP 2021""|"" MICRO 2020""|"" HPDC 2020""|"" ATC 2020""|"" FSE 2020 (Visions and Reflections Track)""|"" PPoPP 2020 (ERC)""|"" CASES 2020""|"" CGO 2020""|"" CC 2020""|"" MICRO 2019 (ERC)""|"" LCPC 2019""|"" ASAP 2019""|"" CGO 2019 (SRC)""|"" ASPLOS 2019 (SRC)""|"" CASES 2019""|"" HPDC 2019""|"" ICCD 2019""|"" EUROPAR 2019""|"" NAS 2019""|"" CGO 2019""|"" ASPLOS 2019 (ERC)""|"" NAS 2018""|"" SC 2018""|"" CASES 2018""|"" ICS 2018 (ERC)""|"" IPDPS 2018""|"" ASPLOS 2018 (SRC Judge)""|"" IISWC 2017""|"" NVMSA 2017""|"" IPDRM 2017""|"" CGO 2017""|"" ICPADS 2015""|"" LCTES 2014""|"" EUROPAR 2014""|"" ICPADS 2014""",NA,"""Hongjune Kim""|""Jianping Zeng""|""Qingrui Liu""|""Mohammad Abdel-Majeed""|""Jaejin Lee""|""Silvius Rus""|""Brian P. Railing""|""Nathan Clark""|""Santosh Pande""","""Tong Zhang""|""Ahmed Helal""|""Qingrui Liu""|""Xiaolong Wu"""
fac_7,"""Chandrakana Nandi""|""Talia Ringer""|""Bill Zorn""","""Synthesizing Structured CAD Models with Equality Saturation and Inverse Transformations""^""Synthesizing Structured CAD Models with Equality Saturation and Inverse Transformations [PLDI 2020]   Chandrakana Nandi, Max Willsey, Adam Anderson, James R. Wilcox, Eva Darulova, Dan Grossman, Zachary Tatlock.   ACM Conference on Programming Language Design and Implementation, London, UK, June, 2020.""|""Verified Peephole Optimizations for CompCert""^""Verified Peephole Optimizations for CompCert [PLDI 2016]   Eric Mullen, Daryl Zuniga, Zachary Tatlock, Dan Grossman.   ACM Conference on Programming Language Design and Implementation, Santa Barbara, CA, June, 2016""|""Test-Driven Synthesis""^""Test-Driven Synthesis [PLDI 2014]   Daniel Perelman, Sumit Gulwani, Dan Grossman, Peter Provost.   ACM Conference on Programming Language Design and Implementation, Edinburgh, Scotland, June, 2014.""|""Expressing and Verifying Probabilistic Assertions""^""Expressing and Verifying Probabilistic Assertions [PLDI 2014]   Adrian Sampson, Pavel Panchekha, Todd Mytkowicz, Kathryn S. McKinley, Dan Grossman, Luis Ceze.   ACM Conference on Programming Language Design and Implementation, Edinburgh, Scotland, June, 2014.""|""Rely-Guarantee References for Refinement Types over Aliased Mutable Data""^""Rely-Guarantee References for Refinement Types over Aliased Mutable Data [PLDI 2013]   Colin S. Gordon, Michael D. Ernst, Dan Grossman.   ACM Conference on Programming Language Design and Implementation, Seattle, WA, June, 2013.""|""Type-Directed Completion of Partial Expressions""^""Type-Directed Completion of Partial Expressions [PLDI 2012]   Daniel Perelman, Sumit Gulwani, Thomas Ball, Dan Grossman.   ACM Conference on Programming Language Design and Implementation, Beijing, China, June, 2012.""|""EnerJ: Approximate Data Types for Safe and General Low-Power Computation""^""EnerJ: Approximate Data Types for Safe and General Low-Power Computation [PLDI 2011]   Adrian Sampson, Werner Dietl, Emily Fortuna, Danushen Gnanapragasam, Luis Ceze, Dan Grossman.   ACM Conference on Programming Language Design and Implementation, San Jose, CA, June, 2011.""|""Searching for Type-Error Messages""^""Searching for Type-Error Messages [PLDI 2007]   Benjamin Lerner, Matthew Flower, Dan Grossman, Craig Chambers.   ACM Conference on Programming Language Design and Implementation, pages 425-434, San Diego, CA, June, 2007.""|""Region-Based Memory Management in Cyclone""^""Region-Based Memory Management in Cyclone [PLDI 2002]   Dan Grossman, Greg Morrisett, Trevor Jim, Michael Hicks, Yanling Wang, James Cheney.   ACM Conference on Programming Language Design and Implementation, pages 282-293, Berlin, Germany, June, 2002. |""Enforcing Isolation and Ordering in STM""^""Enforcing Isolation and Ordering in STM [PLDI 2007]   Tatiana Shpeisman, Vijay Menon, Ali-Reza Adl-Tabatabai, Steve Balensiefer, Dan Grossman, Richard Hudson, Katherine F. Moore, Bratin Saha.   ACM Conference on Programming Language Design and Implementation, pages 78-88, San Diego, CA, June, 2007.""","""CSE390B: Building Academic Success through Bottom-Up Computing""|""CSE492E: Computer Ethics""|""CSE332 Data Abstractions    Spring 2012    Spring 2010""|""SE341 Programming Languages    Spring 2019    Fall 2018    Fall 2017    Spring 2017    Spring 2016    Spring 2013    Winter 2013    Fall 2011    Spring 2008    Winter 2008    Fall 2004    Spring 2004""|""CSE505 Concepts of Programming Languages    Fall 2012    Winter 2012    Fall 2009    Fall 2008    Fall 2007    Fall 2006    Fall 2005    Fall 2003""|""CSE142 Computer Programming I    Spring 2009""|""CSE303 Concepts and Tools for Software Development    Spring 2007    Winter 2006    Spring 2005""|""CSE331 Software Design and Implementation    Autumn 2019    Spring 2015    Fall 2014    Winter 2014""|""CSE351 The Hardware/Software Interface    Spring 2018    Winter 2016""|""CSE373 Data Structures & Algorithms (for non-majors)    Fall 2013""|""CSE506 Advanced Topics in Programming Languages    Winter 2007""|""CSEP505 Programming Languages    Autumn 2016    Winter 2009    Spring 2006""|""CSE590dg Language-Based Techniques for Improving C-Level Software Quality    Winter 2004""|""Harvard CS152 Programming Langauges    Spring 2011""",NA,"""2017    PLDI""|""2016    ICFP""|""2015    ASPLOS""|""2014    PLDI    LWMOOC    APPROX    WACAS""|""2013    SPLASH-E""|""2012    ASPLOS    PLDI""|""2011    POPL    VEE""|""2010    TLDI    TRANSACT    SPAA    PLDIFIT""|""2009    ISMM    OOPSLA""|""2008    DAMP    ISMM    ML""|""2007    POPL    CC    PEPM    OOPSLA""|""2006    TRANSACT    MSPC""|""2005    BUGS""|""2004    PLDI    PASTE""","""IFRit: Interference-Free Regions for Dynamic Data-Race Detection""^""IFRit: Interference-Free Regions for Dynamic Data-Race Detection. [OOPSLA 2012]   Laura Effinger-Dean, Brandon Lucia, Luis Ceze, Dan Grossman, Hans-J. Boehm.   ACM Conference on Object-Oriented Programming Systems, Languages, and Applications, Tucson, AZ, October, 2012.""|""Detecting Conflicts Among Declarative UI Extensions""^""Detecting Conflicts Among Declarative UI Extensions. [DLS 2012]   Benjamin S. Lerner, Dan Grossman.   Dynamic Languages Symposium, Tucson, AZ, October, 2012""|""RADISH: Always-On Sound and Complete Race Detection in Software and Hardware""^""RADISH: Always-On Sound and Complete Race Detection in Software and Hardware. [ISCA 2012]   Joseph Devietti, Benjamin P. Wood, Karin Strauss, Luis Ceze, Dan Grossman, Shaz Qadeer.   39th International Symposium on Computer Architecture, Portland, OR, June, 2012.   Technical report with proofs: UW-CSE Technical Report 2012-04-01, April 2012""|""Type-Directed Completion of Partial Expressions. [PLDI 2012]""^""Type-Directed Completion of Partial Expressions. [PLDI 2012]   Daniel Perelman, Sumit Gulwani, Thomas Ball, Dan Grossman.   ACM Conference on Programming Language Design and Implementation, Beijing, China, June, 2012.""|""The Case For Merging Execution- and Language-level Determinism with MELD.""^""The Case For Merging Execution- and Language-level Determinism with MELD. [WoDET 2012]   Joseph Devietti, Dan Grossman, Luis Ceze.   3rd Workshop on Determinism and Correctness in Parallel Programming, London, United Kingdon, March, 2012.""|""Introducing Parallelism and Concurrency in the Data Structures Course.""^""Introducing Parallelism and Concurrency in the Data Structures Course. [SIGCSE 2012]   Dan Grossman, Ruth E. Anderson.   43rd SIGCSE Technical Symposium on Computer Science Education, Raleigh, NC, March, 2012.""|""Static Lock Capabilities for Deadlock Freedom.""^""Static Lock Capabilities for Deadlock Freedom. [TLDI 2012]   Colin S. Gordon, Michael D. Ernst, Dan Grossman.   ACM SIGPLAN Workshop on Types in Language Design and Implementation, Philadelphia, PA, January, 2012.""","""Adam Anderson""|""Adrian Sampson""|""Ali-Reza Adl-Tabatabai""|""Benjamin Lerner""|""Bratin Saha.""|""Chandrakana Nandi""|""Colin S. Gordon""|""Craig Chambers""|""Daniel Perelman""|""Danushen Gnanapragasam""|""Daryl Zuniga""|""Emily Fortuna""|""Eric Mullen""|""Eva Darulova""|""Greg Morrisett""|""James Cheney""|""James R. Wilcox""|""Katherine F. Moore""|""Kathryn S. McKinley""|""Luis Ceze""|""Matthew Flower""|""Max Willsey""|""Michael D. Ernst""|""Michael Hicks""|""Pavel Panchekha""|""Peter Provost""|""Richard Hudson""|""Steve Balensiefer""|""Sumit Gulwani""|""Tatiana Shpeisman""|""Thomas Ball""|""Todd Mytkowicz""|""Trevor Jim""|""Vijay Menon""|""Werner Dietl""|""Yanling Wang""|""Zachary Tatlock""","""Tom Bergan""|""James Bornholt""|""Joe Devietti""|""Laura Effinger-Dean""|""Colin Gordon""|""Benjamin Lerner""|""Kristi Morton""|""Eric Mullen""|""Daniel Perelman""|""Michael Ringenburg""|""Adrian Sampson""|""John Toman""|""Benjamin Wood"""
fac_8,"""Quan Zhou""|""Yingtai Xiao""|""Yu-Tse Lin""|""Zeyu Ding""|""Yuxin Wang""|""Peixuan Li""|""Robert Brotzman Smith""","""Proving Differential Privacy via Shadow Execution.""^""[PLDI'19] Proving Differential Privacy via Shadow Execution. [PDF] Yuxin Wang, Zeyu Ding, Guanhong Wang, Daniel Kifer and Danfeng Zhang. The 40th ACM SIGPLAN Conference on Programming Language Design and Implementation, 2019, pp. 655-669.""|""Diagnosing Type Errors with Class.""^""[PLDI'15, Distinguished paper award] Diagnosing Type Errors with Class. [PDF] [Slides] [Poster] [Demo] Danfeng Zhang, Andrew C. Myers, Dimitrios Vytiniotis and Simon Peyton‑Jones. Proc. of the 36th ACM SIGPLAN conference on Programming Language Design and Implementation, 2015, pp. 12–21.""|""Language-based Control and Mitigation of Timing Channels.""^""[PLDI'12] Language-based Control and Mitigation of Timing Channels. [PDF] [Slides] [Poster] Danfeng Zhang, Aslan Askarov and Andrew C. Myers. Proc. of the 33rd ACM SIGPLAN conference on Programming Language Design and Implementation, 2012, pp. 99-110.""","""CMPSC 461: Programming Languages Concepts, Penn State Univ. Falls of 2015, 2016, 2017, 2018, 2019.""|""CSE 597: Language-Based Security, Penn State Univ. Spring 2016, Spring 2019, Spring 2020.""",NA,"""CCS 2020""|""FCS 2020""|""LangSec 2020""","""Toward General Diagnosis of Static Errors.""^""Toward General Diagnosis of Static Errors. [PDF] [Slides] [Poster] [Demo] [Release] Danfeng Zhang and Andrew C. Myers. Proc. of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, 2014, pp. 569-581. [PLDI 2012]""|""Language Mechanisms for Controlling and Mitigating Timing Channels.""^""Language Mechanisms for Controlling and Mitigating Timing Channels. [PDF] Danfeng Zhang, Aslan Askarov and Andrew C. Myers. Computing and Information Science Technical Report, , Cornell University, March 2012.""",NA,
fac_9,"""Nayana Prasad Nagendra""|""Hansen Zhang""|""Sotiris Apostolakis""|""Ziyang Xu""|""Bhargav Reddy Godala""|""Greg Chan""|""Susan Tan""","""SCAF: A Speculation-Aware Collaborative Dependence Analysis Framework""^""SCAF: A Speculation-Aware Collaborative Dependence Analysis Framework [abstract] (PDF) Sotiris Apostolakis, Ziyang Xu, Zujun Tan, Greg Chan, Simone Campanoni, and David I. August To Appear: Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), June 2020.""|""Fast Condensation of the Program Dependence Graph""^""Fast Condensation of the Program Dependence Graph [abstract] (ACM DL, PDF) Nick P. Johnson, Taewook Oh, Ayal Zaks, and David I. August Proceedings of the 34th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), June 2013.""|""Parcae: A System for Flexible Parallel Execution""^""Parcae: A System for Flexible Parallel Execution [abstract] (PDF) Arun Raman, Ayal Zaks, Jae W. Lee, and David I. August Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), June 2012.""|""Speculative Separation for Privatization and Reductions""^""Speculative Separation for Privatization and Reductions [abstract] (ACM DL, PDF) Nick P. Johnson, Hanjun Kim, Prakash Prabhu, Ayal Zaks, and David I. August Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), June 2012.""|""Commutative Set: A Language Extension for Implicit Parallel Programming""^""Commutative Set: A Language Extension for Implicit Parallel Programming [abstract] (ACM DL, PDF) Prakash Prabhu, Soumyadeep Ghosh, Yun Zhang, Nick P. Johnson, and David I. August Proceedings of the 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), June 2011.""|""Automatic CPU-GPU Communication Management and Optimization""^""Automatic CPU-GPU Communication Management and Optimization [abstract] (ACM DL, PDF) Thomas B. Jablin, Prakash Prabhu, James A. Jablin, Nick P. Johnson, Stephen R. Beard, and David I. August Proceedings of the 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), June 2011.""|""Parallelism Orchestration using DoPE: the Degree of Parallelism Executive""^""Parallelism Orchestration using DoPE: the Degree of Parallelism Executive [abstract] (ACM DL, PDF) Arun Raman, Hanjun Kim, Taewook Oh, Jae W. Lee, and David I. August Proceedings of the 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), June 2011.""|""Fault-tolerant Typed Assembly Language""^""Fault-tolerant Typed Assembly Language [abstract] (ACM DL, PDF) Frances Perry, Lester Mackey, George A. Reis, Jay Ligatti, David I. August, and David Walker Proceedings of the 2007 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), June 2007.""|""Shape Analysis with Inductive Recursion Synthesis""^""Shape Analysis with Inductive Recursion Synthesis [abstract] (ACM DL, PDF) Bolei Guo, Neil Vachharajani, and David I. August Proceedings of the ACM SIGPLAN 2007 Conference on Programming Language Design and Implementation (PLDI), June 2007.""|""Automatic Instruction Scheduler Retargeting by Reverse-Engineering""^""Automatic Instruction Scheduler Retargeting by Reverse-Engineering [abstract] (ACM DL, PDF) Matthew J. Bridges, Neil Vachharajani, Guilherme Ottoni, and David I. August Proceedings of the 2006 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), June 2006.""|""A Framework for Unrestricted Whole-Program Optimization""^""A Framework for Unrestricted Whole-Program Optimization [abstract] (ACM DL, PDF) Spyridon Triantafyllis, Matthew J. Bridges, Easwaran Raman, Guilherme Ottoni, and David I. August Proceedings of the 2006 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), June 2006.""|""The Liberty Structural Specification Language: A High-Level Modeling Language for Component Reuse""^""The Liberty Structural Specification Language: A High-Level Modeling Language for Component Reuse [abstract] (ACM DL, PDF) Manish Vachharajani, Neil Vachharajani, and David I. August Proceedings of the 2004 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), June 2004.""","""Introduction to Computer Science: COS-126""|""Compiling Techniques: COS-320""|""Computer Architecture: COS-375/ELE-375""|""Introduction to Programming Systems: COS-217""|""Graduate Seminars on Various Topics""","""Fault-tolerant Typed Assembly Language""^""Fault-tolerant Typed Assembly Language [abstract] (ACM DL, PDF) Frances Perry, Lester Mackey, George A. Reis, Jay Ligatti, David I. August, and David Walker Proceedings of the 2007 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), June 2007.""|""SWIFT: Software Implemented Fault Tolerance""^""SWIFT: Software Implemented Fault Tolerance [abstract] (ACM DL, PDF) George A. Reis, Jonathan Chang, Neil Vachharajani, Ram Rangan, and David I. August Proceedings of the Third International Symposium on Code Generation and Optimization (CGO), March 2005.""|""Compiler Optimization-Space Exploration""^""Compiler Optimization-Space Exploration [abstract] (IEEE Xplore, PDF) Spyridon Triantafyllis, Manish Vachharajani, Neil Vachharajani, and David I. August Proceedings of the 2003 International Symposium on Code Generation and Optimization (CGO), March 2003.""","""ISCA""|""PLDI""|""MICRO""|""ASPLOS""|""CGO""|""IEEE Micro Top-Picks""","""From Sequential Programming to Flexible Parallel Execution [abstract] (PDF)""^""From Sequential Programming to Flexible Parallel Execution [abstract] (PDF) Arun Raman, Jae W. Lee, and David I. August Proceedings of the International Conference on Compilers and Synthesis for Embedded Systems (CASES), October 2012. Invited.""|""PASSERT: A Tool for Debugging Parallel Programs [abstract] (SpringerLink, PDF)""^""PASSERT: A Tool for Debugging Parallel Programs [abstract] (SpringerLink, PDF) Daniel Schwartz-Narbonne, Feng Liu, David I. August, and Sharad Malik Proceedings of the 18th International Conference on Computer-Aided Verification (CAV), June 2012. Accept Rate: 25% (20/80).""|""Parcae: A System for Flexible Parallel Execution [abstract] (PDF)""^""Parcae: A System for Flexible Parallel Execution [abstract] (PDF) Arun Raman, Ayal Zaks, Jae W. Lee, and David I. August Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), June 2012. Accept Rate: 18% (48/255).""|""Speculative Separation for Privatization and Reductions [abstract] (ACM DL, PDF)""^""Speculative Separation for Privatization and Reductions [abstract] (ACM DL, PDF) Nick P. Johnson, Hanjun Kim, Prakash Prabhu, Ayal Zaks, and David I. August Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), June 2012. Accept Rate: 18% (48/255).""|""Runtime Asynchronous Fault Tolerance via Speculation [abstract] (PDF)""^""Runtime Asynchronous Fault Tolerance via Speculation [abstract] (PDF) Yun Zhang, Soumyadeep Ghosh, Jialu Huang, Jae W. Lee, Scott A. Mahlke, and David I. August Proceedings of the 2012 International Symposium on Code Generation and Optimization (CGO), April 2012. Accept Rate: 28% (26/90).""|""Dynamically Managed Data for CPU-GPU Architectures [abstract] (PDF)""^""Dynamically Managed Data for CPU-GPU Architectures [abstract] (PDF) Thomas B. Jablin, James A. Jablin, Prakash Prabhu, Feng Liu, and David I. August Proceedings of the 2012 International Symposium on Code Generation and Optimization (CGO), March 2012. Accept Rate: 28% (26/90).""|""Automatic Speculative DOALL for Clusters [abstract] (PDF)""^""Automatic Speculative DOALL for Clusters [abstract] (PDF) Hanjun Kim, Nick P. Johnson, Jae W. Lee, Scott A. Mahlke, and David I. August Proceedings of the 2012 International Symposium on Code Generation and Optimization (CGO), March 2012. Accept Rate: 28% (26/90).""|""DAFT: Decoupled Acyclic Fault Tolerance [abstract] (SpringerLink, PDF)""^""DAFT: Decoupled Acyclic Fault Tolerance [abstract] (SpringerLink, PDF) Yun Zhang, Jae W. Lee, Nick P. Johnson, and David I. August The International Journal of Parallel Programming (IJPP), February 2012. Invited. Special issue composed of ""top papers"" selected by the Program Committe of the 19th International Conference on Parallel Architectures and Compilation Techniques.""|""A General Approach for Efficiently Accelerating Software-based Dynamic Data Flow Tracking on Commodity Hardware [abstract] (PDF)""^""A General Approach for Efficiently Accelerating Software-based Dynamic Data Flow Tracking on Commodity Hardware [abstract] (PDF) Kangkook Jee, Georgios Portokalidis, Vasileios P. Kemerlis, Soumyadeep Ghosh, David I. August, and Angelos D. Keromytis Proceedings of the 19th Internet Society (ISOC) Symposium on Network and Distributed Systems Security (NDSS), February 2012. Accept Rate: 17% (46/258).""",NA,
fac_10,"""Heiko Becker""|""Debasmita Lohar""|""Rosa Abbasi""",NA,"""Program Analysis (Winter 19/20)""|""Advanced Program Analysis (blockseminar march 19)""|""Program Analysis (Winter 18/19)""|""Program Synthesis (Summer 2018)""|""Static Program Analysis (Summer 2017)""|""Approximate Computing: Promise or Hype? (Summer 2016)""",NA,"""CAV 2020""|"" ECOOP 2019""|"" CAV 2019""|"" WAX 2019""|"" FHPNC 2019""|"" PLDI 2018""|"" iFM""|"" CGO 2018""","""Certifying Solutions for Numerical Constraints E. Darulova, V. Kuncak, RV 2012""^""Certifying Solutions for Numerical Constraints""",NA,"""Nikita Zyuzin""|""Youcef Merah""|""Safya Alzayat""|""Anastasiia Izycheva"""
fac_11,NA,"""Automatic Error Elimination by Multi-Application Code Transfer""|""Automatic Runtime Error Repair and Containment via Recovery Shepherding""",NA,NA,NA,"""Automatic Input Rectification""^""Automatic Input Rectification [ pdf ] Fan Long, Vijay Ganesh, Michael Carbin, Stelios Sidiroglou, and Martin Rinard. ICSE 2012""","""Stelios Sidiroglou""|""Eric Lahtinen""|""Martin Rinard""",NA
fac_12,"""Christian Navasca""|""Yuanqi Li""|""Arthi Padmanabhan""|""Jiyuan Wang""|""Usama Hameed""","""Crafty: Efficient, HTM-Compatible Persistent Transactions""^""PLDI 2020 Kaan Genc, Michael Bond, and Guoqing Harry Xu,   \""Crafty: Efficient, HTM-Compatible Persistent Transactions\"",   ACM SIGPLAN Conference on Programming Language Design and Implementation""|""Go with the Flow: Profiling Copies to Find Runtime Bloat""^""PLDI 2009 Guoqing Xu, Matthew Arnold, Nick Mitchell, Atanas Rountev, Gary Sevitsky,   \""Go with the Flow: Profiling Copies to Find Runtime Bloat\"",   ACM SIGPLAN Conference on Programming Language Design and Implementation, Dublin, Ireland, June 2009.""|""Detecting Inefficiently-Used Containers to Avoid Bloat""^""PLDI 2010 Guoqing Xu and Atanas Rountev,   \""Detecting Inefficiently-Used Containers to Avoid Bloat\"",   ACM SIGPLAN Conference on Programming Language Design and Implementation, Toronto, Canada, June 2010.""|""Finding Low-Utility Data Structures""^""PLDI 2010 Guoqing Xu, Nick Mitchell, Matthew Arnold, Atanas Rountev, Edith Schonberg, and Gary Sevitsky,   \""Finding Low-Utility Data Structures\"",   ACM SIGPLAN Conference on Programming Language Design and Implementation, Toronto, Canada, June 2010.""|""LeakChaser: Helping Programmers Narrow Down Causes of Memory Leaks""^""PLDI 2011 Guoqing Xu, Michael Bond, Feng Qin, and Atanas Rountev   \""LeakChaser: Helping Programmers Narrow Down Causes of Memory Leaks\"",   ACM SIGPLAN Conference on Programming Language Design and Implementation, San Jose, CA, June 2011.""|""Calling-to-Reference Context Translation via Constraint-Guided CFL-Reachability""^""PLDI 2018 Cheng Cai, Qirun Zhang, Zhiqiang Zuo, Khanh Nguyen, Guoqing Xu, and Zhendong Su,   \""Calling-to-Reference Context Translation via Constraint-Guided CFL-Reachability\"",   ACM SIGPLAN Conference on Programming Language Design and Implementation""|""Panthera: Holistic Memory Management for Big Data Processing over Hybrid Memories""^""PLDI 2019 Chenxi Wang, Huimin Cui, Ting Cao, John Zigman, Haris Volos, Onur Mutlu, Fang Lv, Xiaobin Feng, and Guoqing Harry Xu   \""Panthera: Holistic Memory Management for Big Data Processing over Hybrid Memories\"",   ACM SIGPLAN Conference on Programming Language Design and Implementation""","""CS 239: Large-Scale Machine Learning Systems (Spring 2020)""|""CS 111: Operating Systems (Spring 2019, Winter 2020)""|""CS 239 Big Data Systems (Fall 2018, Fall 2019)""","""Precise Memory Leak Detection for Java Software Using Container Profiling""^""Guoqing Xu, Atanas Rountev,   \""Precise Memory Leak Detection for Java Software Using Container Profiling\"",   ACM SIGSOFT/IEEE International Conference on Software Engineering, Leipzig, Germany, May 2008.""|""Regression Test Selection for AspectJ Software""^""Guoqing Xu, Atanas Rountev,   \""Regression Test Selection for AspectJ Software\"",   ACM SIGSOFT/IEEE International Conference on Software Engineering, Minneapols, MN, May 2007.""","""APSys 2020""|""OSDI 2020""|""HotEdgeVideo 2020""|""ASPLOS 2020""|""APSys 2019""|""OOPSLA 2019""|""FEAST 2018""|""VEE 2018""|""PLDI 2018""|""FEAST 2017""|""AGP 2017""|""ASPLOS 2017""|""TAPAS 2016""|""ISMM 2016""|""ECOOP 2016""|""ISMM 2019""|""WODA 2015""|""ISMM 2015""|""ISSTA 2015""|""PLDI 2015""|""ISEC 2015""|""ECOOP 2015""|""WODA 2014""|""ISMM 2014""|""OOPSLA 2013""","""Finding Reusable Data Structures""^""Guoqing Xu, ""Finding Reusable Data Structures"", ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, Tucson, AZ, October 2012. (Acceptance rate: 57/228, 25%) [PDF][Talk]""|""Pointcut Rejuvenation: Recovering Pointcut Expressions in Evolving Aspect-Oriented Software""^""Raffi Khatchadourian, Phil Greenwood, Awais Rashid, and Guoqing Xu, ""Pointcut Rejuvenation: Recovering Pointcut Expressions in Evolving Aspect-Oriented Software"", IEEE Transactions on Software Engineering, vol. 38, no. 3, May-June 2012. [PDF]""|""Dynamic Analysis of Inefficiently-Used Containers""^""Shengqian Yang, Dacong Yan, Guoqing Xu, and Atanas Rountev, ""Dynamic Analysis of Inefficiently-Used Containers"", International Workshop on Dynamic Analysis, Minneapolis, MN, USA, July 2012. [PDF]""|""Rethinking Soot for Summary-Based Whole-Program Analysis""^""Dacong Yan, Guoqing Xu, and Atanas Rountev, ""Rethinking Soot for Summary-Based Whole-Program Analysis"", ACM SIGPLAN International Workshop on the State Of the Art in Java Program Analysis, Beijing, China, June 2012. [PDF]""|""Static Detection of Loop-Invariant Data Structures""^""Guoqing Xu, Dacong Yan, Atanas Rountev, ""Static Detection of Loop-Invariant Data Structures"", European Conference on Object-Oriented Programming, Beijing, China, June 2012. (Acceptance rate: 30/140, 21.4%) [PDF][Talk]""|""Uncovering Performance Problems in Java Applications with Reference Propagation Profiling""^""Dacong Yan, Guoqing Xu, and Atanas Rountev, ""Uncovering Performance Problems in Java Applications with Reference Propagation Profiling"", ACM SIGSOFT/IEEE International Conference on Software Engineering, Zurich, Switzerland, June 2012. (Acceptance rate: 87/408, 21.3%) [PDF][Talk]""","""Atanas Rountev""|""Cheng Cai""|""Chenxi Wang""|""Edith Schonberg""|""Fang Lv""|""Feng Qin""|""Gary Sevitsky""|""Haris Volos""|""Huimin Cui""|""John Zigman""|""Kaan Genc""|""Khanh Nguyen""|""Matthew Arnold""|""Michael Bond""|""Nick Mitchell""|""Onur Mutlu""|""Qirun Zhang""|""Ting Cao""|""Xiaobin Feng,""|""Zhendong Su,""|""Zhiqiang Zuo""","""Khanh Nguyen""|""Kai Wang""|""Zhiqiang Zuo""|""Lu Fang""|""Keval Vora""|""Cheng Cai""|""Bojun Wang""|""Tim Nguyen""|""Aftab Hussain""|""Matthew Hartz""|""Jianfei Hu""|""Chengxi Li""|""Emily Hu""|""Lawrence Xu""|""Louis Zhang""|""Ankur Gupta""|""Wendy Wei""|""Allen Min""|""Jonathon Tsai"""
fac_13,"""Saeid Barati""|""Bernard Dickens""|""Yi Ding""|""Anne Farrel""|""Tejas Kannan""|""Will Kong""|""Ivana Marincic""|""Ahsan Pervaiz""|""Muhammad Husni Santriaji""|""Yuliana Zamora""",NA,NA,NA,NA,"""Comparison of Decision-Making Strategies for Self-Optimization in Autonomic Computing Systems [ACM TAAS 2012]""|""Selecting Spatiotemporal Patterns for Development of Parallel Applications [IEEE TPDS 2012]""|""Self-aware computing in the Angstrom processor [DAC 2012]""|""Metronome: operating system level performance management via self-adaptive computing [DAC 2012]""",NA,"""Huazhe Zhang""|""Gökalp Demirci""|""Zhixuan Zhou""|""Connor Imes""|""Nikita Mishra""|""Lee Ehudin""|""Tristan Rasmussen"""
fac_14,"""Jordan Rickman""|""Yang Feng""|""Vijay Krishna Palepu""|""Nicholas DiGiuseppe""|""Francisco Servant""",NA,"""Informatics 291S, Literature Survey in Software Engineering. Fall 2016""|""Informatics 215, Software Analysis and Testing. Spring 2016""|""Informatics 211, Introduction to Software Engineering. Fall 2015""|""Informatics 215, Software Analysis and Testing. Spring 2015""|""Informatics 211, Introduction to Software Engineering. Fall 2014""|""Informatics 215, Software Analysis and Testing. Spring 2014""|""Informatics 211, Introduction to Software Engineering. Fall 2013""|""Informatics 215, Software Analysis and Testing. Spring 2013""|""Informatics 211, Introduction to Software Engineering. Fall 2012""|""Informatics 211, Introduction to Software Engineering. Fall 2011""|""Informatics 215, Software Analysis and Testing. Spring 2011""|""Informatics 211, Introduction to Software Engineering. Fall 2010""|""Informatics 295, Software Testing and Debugging. Winter 2010""|""Informatics 211, Introduction to Software Engineering. Fall 2009""|""Informatics 211, Introduction to Software Engineering. Fall 2008""|""Informatics 115, Software Testing, Analysis, and Quality Assurance. Fall 2016""|""Informatics 115, Software Testing, Analysis, and Quality Assurance. Fall 2015""|""Informatics 295, Perception and Cognition of Software Computation and Evolution. Spring 2015""|""Informatics 115, Software Testing, Analysis, and Quality Assurance. Fall 2014""|""Informatics 117, Project in Software System Design. Winter 2014""|""Informatics 115, Software Testing, Analysis, and Quality Assurance. Fall 2013""|""Informatics 115, Software Testing, Analysis, and Quality Assurance. Spring 2013""|""Informatics 115, Software Testing, Analysis, and Quality Assurance. Spring 2012""|""Informatics 44, Informatics Research Topics. Spring 2012""|""Informatics 115, Software Testing and Quality Assurance. Spring 2011""|""Informatics 115, Software Testing and Quality Assurance. Spring 2010""|""Informatics 115, Software Specifications and Quality Engineering. Spring 2009""|""Informatics 199, Independent Study. Spring 2009""|""Informatics H198, Honors Research. Winter 2008""","""Visualization of Program-Execution Data for Deployed Software""","""International Symposium on the Foundations of Software Engineering (FSE) 2014.""|""International Symposium on Software Testing and Analysis (ISSTA) 2014""|""International Conference on Software Engineering (ICSE) 2014""|""the main track of the Working Conference on Software Visualization (VISSOFT) 2013""|""International Conference on Software Engineering (ICSE) 2012""|""International Symposium on Software Testing and Analysis (ISSTA) 2011""|""International Conference on Software Maintenance (ICSM) Industrial Track 2011""|""the International Workshop on Dynamic Analysis (WODA) 2011""|""International Workshop on Testing and Debugging (TeBug) 2011""|""International Symposium on the Foundations of Software Engineering (FSE) 2010""|""International Symposium on Software Testing and Analysis (ISSTA) 2010""|""Testing: Academic and Industrial Conference - Practice and Research Techniques (TAIC-PART) 2009""|""International Symposium on Software Reliability Engineering (ISSRE) 2009""|""International Conference on Software Maintenance (ICSM) Tool Track 2009""|""International Conference on Automated Software Engineering (ASE) Demo Track 2009""|""International Conference on Software Testing (ICST) Student Track 2008""|""International Symposium on the Foundations of Software Engineering (FSE) 2008""","""History Slicing: Assisting Code-Evolution Tasks.""^""Francisco Servant and James A. Jones. History Slicing: Assisting Code-Evolution Tasks. 20th International Symposium on the Foundations of Software Engineering (FSE), Cary, North Carolina, USA, November 2012. pp. 43:1–43:11.""|""Concept-Based Failure Clustering.""^""Nicholas DiGiuseppe and James A. Jones. Concept-Based Failure Clustering. 20th International Symposium on the Foundations of Software Engineering, New Ideas Track (FSE-NIER), Cary, North Carolina, USA, November 2012. pp. 29:1–29:4.""|""Semantic Fault Diagnosis: Automatic Natural-Language Fault Descriptions.""^""Nicholas DiGiuseppe and James A. Jones. Semantic Fault Diagnosis: Automatic Natural-Language Fault Descriptions. 20th International Symposium on the Foundations of Software Engineering, New Ideas Track (FSE-NIER), Cary, North Carolina, USA, November 2012. pp. 23:1–23:4.""|""WhoseFault: Automatic Developer-to-Fault Assignment Through Fault Localization.""^""Francisco Servant and James A. Jones. WhoseFault: Automatic Developer-to-Fault Assignment Through Fault Localization. 34th International Conference on Software Engineering (ICSE), Zurich, Switzerland, June 2012. pp. 36–46.""|""Weighted System Dependence Graph.""^""Fang Deng and James A. Jones. Weighted System Dependence Graph. Fifth International Conference on Software Testing, Verification and Validation (ICST), Montreal, Quebec, Canada, April 2012. pp. 380–389.""|""Software Behavior and Failure Clustering: An Empirical Study of Fault Causality.""^""Nicholas DiGiuseppe and James A. Jones. Software Behavior and Failure Clustering: An Empirical Study of Fault Causality. Fifth International Conference on Software Testing, Verification and Validation (ICST), Montreal, Quebec, Canada, April 2012. pp. 191–200.""",NA,"""Nicholas DiGiuseppe""|""Francisco Servant"""
fac_15,"""Alexi Turcotte""|""Jan Ječmen""|""Artem Pelenitsyn""|""Julia Belyakova Aviral Goel""|""Ming-Ho Yee""|""Benjamin Chung""|""Olivier Fluckiger""|""Filip Pizlo""","""Terra: a multi-stage language for high-performance computing""|""Schism: Fragmentation-Tolerant Real-Time Garbage Collection""|""An Analysis of the Dynamic Behavior of JavaScript Programs""","""Intensive Software, Construction & Engineering, Fall 2019""|""Expeditions in Data Science, Spring 2019 ""|""Fundamentals II:Class-based Program Design, Spring 2018""|""Parallel Data Processing in MapReduce, Fall 2017""|""Introduction to Data Science, Winter 2017""|""Parallel Data Processing in MapReduce, Winter 2016""|""Parallel Data Processing in MapReduce, Winter 2015""|""Program Design Paradigms, Fall 2014""|""Scalable Data Analytics, Winter 2014""|""Programming in C, Winter 202014""|""Programming in C, Winter 2012""|""Software for Embedded Systems, Winter 2012""|""Programming in C, Fall 2011""|""Sofware for Embedded Systems, Winter 2011""|""Embedded Computer Systems, Fall 2009""|""Programming Languags Seminar, Fall 2008""|""Programming Languags Seminar, Winter 2008""|""Programming Languages, Winter 2008""|""Programming Languages, Fall 2007""|""Software Engineering, Winter 2006""",NA,"""Asian Symp. on Programming Languages and Systems, 2014""|""Workshop on Libraries, Languages, and Compilers for Array Programming, 2014, 2015, 2017""|""Workshop on Abstract Interpretation of Object-oriented Languages, 2005""|""Workshop on Aspects, Components, and Patterns for Infrastructure Software, 2003, 2004""|""Agent Systems and Applications/ Mobile Agents, 2001""|""Symposium on Software mobility and adaptive behaviour, 2001""|""Workshop on Bytecode Semantics, Verification, Analysis and Transformation, 2007, 2008""|""Conference on Compiler Construction, 2003, 2008, 2012, 2014""|""Computer Security Foundations Symposium, 2008""|""Workshop on Concurrency, Real-Time and Distribution in Eiffel, 2006""|""Conference on Coordination Models and Languages, 2005, 2009""|""Workshop on Cyber-Physical Systems, 2008, 2009""|""Component Deployment, 2002, 2004""|""Workshop on Concurrency and Synchronization in Java Programs, 2004""|""DATE Conference, Model Based Design of Embedded Systems track, 2010""|""Dynamic Language Symposium Conference, 2010, 2014, 2015, 2016, 2017""|""Distributed Object Security Workshop, 1999""|""European Conference on Object-Oriented Programming, 1998, 2000, 2001, 2002, 2003, 2007, 2008, 2009, 2010, 2013, 2017, 2020""|""European Symposium on Programming, 2002, 2007, 2009, 2011, 2015, 2016""|""Conference on Embedded Software, 2011""|""Conference on Embedded and Ubiquitous Computing, 2009, 2010""|""Workshop on Forming an Ecosystem Around Software Transformation, 2017""|""Foundations of Coordination Languages and Software Architectures, 2007""|""Foundations of Object-Oriented Languages, 2013""|""Workshop on Green Computing Middleware, 2011""|""Generative Programming: Concepts & Experiences, 2013""|""Symposium on Multi-Agent Security and Survivability, 2004""|""Workshop on Formal Techniques for Java-like Programs, 2005""|""Workshop on High Confidence Software Platforms for Cyber-Physical Systems, 2006""|""Topics in Parallelism, 2013""|""Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems, 2006, 2013, 2015""|""International Functional Programming Conference, 2005""|""International Symposium on Object and componentoriented Real-time Computing, 2012""|""International Workshop on Multicore Software Engineering, 2010""|""International Workshop on Aliasing, Confinement and Ownership, 2003, 2007, 2014""|""Intercontinental Workshop on Aliasing in Object- Oriented Systems, 1999""|""Workshop on Java Technologies for Real-Time and Embedded Systems, 2008, 2007, 2006, 2005, 2004, 2003, 2008, 2009, 2010""|""Journees Francophones des Langages Applicatifs, 2000, 1998, 1995""|""International Conference on Managed Languages and Runtimes, 2017, 2018""|""Mobile Objects Systems Workshop, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995""|""Multicore Software Engineering, Performance, Applications, and Tools, 2016""|""Workshop on Programming Languages and Analysis for Security, 2007""|""Workshop on Programming Language And Systems Technologies for Internet Clients, 2011""|""Programming Language Design and Implementation, 2002, 2010, 2013""|""Symposium on Principles of Distributed Computing, 2010""|""Principles of Programming Languages, 2001, 2008, 2011.""|""conference on Principles and Practice of Programming in Java, 2006""|""Real-Time and Embedded Technology and Applications Symposium, 2011""|""Real-Time System Symposium, 2009, 2010, 2011""|""Symposium on Access Control Models and Technologies, 2001""|""Workshop on Software Architectures for Next-generation Cyber-physical Systems, 2015""|""Scala Symposium, 2015""|""Script to Program Evolution Workshop, 2016""|""Off-the Beaten Track, 2014""|""Object Oriented Programming Languages and Systems 2005, 2004""|""Object-Oriented Programming Systems, Languages, and Applications, 2000, 2004, 2007, 2008, 2016""|""Workshop on SoftwAre debLoating And Delayering, 2018""|""Workshop on Security Issues in Concurrency, 2003, 2004, 2007""|""Workshop on Reproducible Research Methodologies and New Publication Models, 2014""|""R Implementation Optimization and Tooling Workshop, 2015, 2016, 2017""|""Workshop on ReUsable and Modular Programming Language Ecosystems, 2016""|""Conference on Virtual Execution Environments, 2011, 2018, 2019""|""Workshop on Virtual Machines and Intermediate Languages, 2009, 2019""|""Workshop on Academic Software Development Tools and Techniques, 2013""|""Workshop on Speculative Side Channel Analysis, 2018""|""The Web Conference, 2018""","""A black-box approach to understanding concurrency in DaCapo.""^""Kalibera, Mole, Jones, Vitek. A black-box approach to understanding concurrency in DaCapo. OOPSLA pdf""|""Eval begone!: semi-automated removal of eval from JavaScript programs.""^""Meawad, Richards, Morandat, Vitek. Eval begone!: semi-automated removal of eval from JavaScript programs. OOPSLA pdf""|""Atomicity in Real-time Computing Springer""^""Vitek. Atomicity in Real-time Computing Springerpdf""|""R3 -- Repeatability, Reproducibility and Rigor.""^""Vitek, Kalibera.R3 -- Repeatability, Reproducibility and Rigor. SIGPLAN Notices pdf""|""Memory Safety for Safety Critical Java""^""Vitek. Memory Safety for Safety Critical Java Springer pdf""|""A Data-Centric Approach to Synchronization.""^""Dolby, Hammer, Marino, Tip, Vaziri, Vitek.A Data-Centric Approach to Synchronization. TOPLAS pdf""|""Evaluating the Design of the R Language.""^""Morandat, Hill, Osvald, Vitek. Evaluating the Design of the R Language. ECOOP pdf""|""TraceR: A framework for understanding R performance.""^""Macnak, Morandat, Hill, Osvald, Vitek.TraceR: A framework for understanding R performance. UseR!""|""Data-Flow Graphs for the Synthesis of Hard Real-Time Applications.""^""Bouakaz, Talpin Vitek. Data-Flow Graphs for the Synthesis of Hard Real-Time Applications. ACSD""|""Micro-transactions for concurrent data structures.""^""Meawad, Iyer, Schoeberl, Vitek. Micro-transactions for concurrent data structures. CCPE pdf""|""Foundations for Scripting Languages.""^""Hirschfeld, Krishnamurthi, Vitek. Foundations for Scripting Languages. Dagstuhlpdf""","""Aiken""|""Blanton""|""Burg""|""DeVito""|""Hanrahan""|""Hegarty""|""Hosking""|""Lebresne""|""Maj""|""Pizlo""|""Richards""|""Ziarek""","""Gregor Richards""|""Jacques Thomas""|""Jesper H. Spring""|""Rajeev Gopalakrishna""|""Bogdan Carbunar""|""Krzystof Palacz"""
fac_16,"""Sung Kook Kim""|""Zhe Tao""",NA,"""F’19, F’18 ECS 240 Programming Languages (Graduate)""|""W’19, S’18 ECS 140A Programming Languages (Undergraduate)""|""W’20, F’17 Topics in Automated Reasoning and Program Analysis""",NA,"""CAV 2020""|"" VSTTE 2019""|"" SAS 2019""|"" ASE 2018""|"" ATVA 2018""","""A Generalization of Stålmarck’s Method""^""A Generalization of Stålmarck’s Method 19th International Symposium on Static Analysis (SAS), 2012 PDF     Springer©     Details""|""Bilateral Algorithms for Symbolic Abstraction""^""Bilateral Algorithms for Symbolic Abstraction 19th International Symposium on Static Analysis (SAS), 2012 PDF     Springer©     Details""|""OpenNWA: A Nested-Word Automaton Library""^""OpenNWA: A Nested-Word Automaton Library 24th International Conference on Computer Aided Verification (CAV), 2012 PDF     Springer©     Details""|""A Method for Symbolic Computation of Abstract Operations""^""A Method for Symbolic Computation of Abstract Operations 24th International Conference on Computer Aided Verification (CAV), 2012 PDF     Springer©     Details""",NA,"""Daniel DeFreez""|""Mohamed Alkaoud""|""Jonathan Castello""|""Dana Iltis""|""Max Nedorezov""|""Zaid Al Rakabi""|""James Sun""|""Xinyuan Sun""|""Scott Reichelt"""
fac_17,"""Marc Chevalier""|""Albin Salazar""","""A Static Analyzer for Large Safety-Critical Software""",NA,"""Static Analysis and Verification of Aerospace Software by Abstract Interpretation""|""The Arithmetic-Geometric Progression Abstract Domain""","""Tenth International Workshop on Static Analysis and Systems Biology - SASB 2019""|""Seventh Workshop on Hybrid Systems and Biology - HSB 2020""","""Proceedings of the 2nd International Workshop on Static Analysis and Systems Biology (SASB 2011)""^""Jérôme Feret & Andre Levchenko (Eds.). Proceedings of the 2nd International Workshop on Static Analysis and Systems Biology (SASB 2011). In Electronic Notes in Theoretical Computer Science, volume 284. 2012, Elsevier Science.""|""Reconstructing species-based dynamics from reduced stochastic rule-based models""^""Tatjana Petrov, Jérôme Feret,& Heinz Koeppl. Reconstructing species-based dynamics from reduced stochastic rule-based models. In Proceedings of the Winter Simulation Conference (WSC 2012).""|""Rewriting and Pathway Reconstruction for Rule-Based Models.""^""Vincent Danos, Jérôme Feret, Walter Fontana, Russell Harmer, Jonathan Hayman, Jean Krivine, Chris Thompson-Walsh,& Glynn Winskel. Rewriting and Pathway Reconstruction for Rule-Based Models. In Proceedings of the 32nd IARCS Annual Conference on Foundations of Software Technology and Theoretical Computer Science (FSTTCS 2012), in Leibniz International Proceedings in Informatics, volume 18, pp 276--288. 2012, Schloss Dagstuhl - Leibniz-Zentrum für Informatik.""","""Bruno Blanchet""|""Patrick Cousot""|""Radhia Cousot""|""Laurent Mauborgne""|""Antoine Miné""|""David Monniaux""|""Xavier Rival""","""Wassim Abou Jaoudé""|""Mehdi Bouaziz""|""Ferdinanda Camporesi""|""Ken Chanseau-Germain""|""Aurélie Faure de Pebeyre""|""Norman Ferns""|""Luca Grieco""|""Jonathan Hayman""|""Kim Quyên Lý""|""Alessandro Romanel"""
fac_18,"""Jason Gross""|""Clément Pit--Claudel""|""Joonwon Choi""|""Thomas Bourgeat""|""Samuel Gruetter""|""Mirai Ikebuchi""|""Andres Erbsen""|""Jade Philipoom""|""Stella Lau""|""Edward Wang""","""The Essence of Bluespec: A Core Language for Rule-Based Hardware Design""^""Thomas Bourgeat, Clément Pit--Claudel, Adam Chlipala, Arvind. The Essence of Bluespec: A Core Language for Rule-Based Hardware Design. Proceedings of the ACM SIGPLAN 2020 Conference on Programming Language Design and Implementation (PLDI 2020). June 2020.""|""Mostly-Automated Verification of Low-Level Programs in Computational Separation Logic""^""Adam Chlipala. Mostly-Automated Verification of Low-Level Programs in Computational Separation Logic. Proceedings of the ACM SIGPLAN 2011 Conference on Programming Language Design and Implementation (PLDI 2011). June 2011.""|""Ur: Statically-Typed Metaprogramming with Type-Level Record Computation""^""Adam Chlipala. Ur: Statically-Typed Metaprogramming with Type-Level Record Computation. Proceedings of the ACM SIGPLAN 2010 Conference on Programming Language Design and Implementation (PLDI 2010). June 2010.""|""A Certified Type-Preserving Compiler from Lambda Calculus to Assembly Language""^""Adam Chlipala. A Certified Type-Preserving Compiler from Lambda Calculus to Assembly Language. Proceedings of the ACM SIGPLAN 2007 Conference on Programming Language Design and Implementation (PLDI 2007). June 2007.""","""Spring 2020: 6.822: Formal Reasoning About Programs* (also Spring 2018, Spring 2017 [as 6.887], and Spring 2016 [as 6.887])""|""Spring 2019: 6.009: Fundamentals of Programming* (also Fall 2017, Fall 2016, and Fall 2015 [as 6.Spring 2004])""|""Spring 2015: 6.042: Mathematics for Computer Science (also Spring 2012)""|""Fall 2014: 6.170: Software Studio""|""Fall 2013: 6.820: Foundations of Program Analysis""|""Spring 2013: 6.033: Computer Systems Engineering [recitation instructor]""|""Fall 2012: 6.005: Software Construction""|""Fall 2011: 6.892: Interactive Computer Theorem Proving""","""Using Crash Hoare Logic for Certifying the FSCQ File System""^""Haogang Chen, Daniel Ziegler, Tej Chajed, Adam Chlipala, Frans Kaashoek, Nickolai Zeldovich. Using Crash Hoare Logic for Certifying the FSCQ File System. Proceedings of the 25th ACM Symposium on Operating Systems Principles (SOSP 2015). October 2015.""",NA,NA,"""Thomas Bourgeat""|""ClÃ©ment Pit--Claudel""|""Arvind""",NA
fac_19,"""Josef Tkadlec""|""Amir Kafshdar Goharshady""|""Viktor Toman""|""Djordje Zikelic""","""Cost Analysis of Nondeterministic Probabilistic Programs""","""Spring 2010: Game Theory in Formal Verification""|""Spring 2011: Advanced Topics in Graph Games""|""Fall 2011: Formal Methods""|""Spring 2012: Complexity Theory""|""all 2012: Formal Methods""|""Spring 2013: Complexity Theory""|""inter 2013: Game Theory""|""Fall 2013: Formal Methods ""|""Spring 2015: Advanced Formal Methods""|""Spring 2016: Computer Science Core Course""|""Spring 2017: Advanced Formal Methods""|""Spring 2017: Computer Science Core Course""|""Spring 2018: Advanced Formal Methods""|""Spring 2018: Computer Science Core Course""|""Spring 2019: Computer Science Core Course""",NA,"""FOSSACS 2010""|""LICS 2010""|""CSL 2010""|""GandALF 2010""|""FOSSACS 2011""|""GandALF 2011""|""FORMATS 2011""|""FSTTCS 2011""|""FORMAL METHODS (FM) 2012""|""FORMATS 2012""|""MOVEP 2012""|""MFCS 2012""|""MEMICS 2012""|""FOSSACS 2013""|""CONCUR 2013""|""TASE 2013""|""RP 2013""|""HIGHLIGHTS 2013""|""LPAR-19 2013""|""HSCC 2014""|""LICS 2014""|""CSL 2014""|""QAPL 2014""|""Strategic Reasoing (SR 2014)""|""MOVEP 2014""|""Formal Methods Integration (FMi 2014)""|""HSCC 2015""|""FOSSACS 2015""|""CAV 2015""|""QAPL 2015""|""RP 2015""|""FMi 2015""|""GANDALF 2015""|""Strategic Reasoing (SR 2015) (Upcoming)""|""FORMATS 2015""|""MEMICS 2015""|""FICS 2015""|""Highlights 2015""|""POPL 2016 ERC""|""LPAR-20""|""TACAS 2016""|""HSCC 2016""|""ICALP 2016 (Track C)""|""ATVA 2016""|""RP 2016""|""MOVEP 2016""|""SR 2016""|""GANDALF 2016""|""FSTTCS 2016""|""POPL 2017 ERC""|""ICAPS 2017""|""ICALP 2017 (Track B); MoRe 2018""|""RP 2018""|""FSTTCS 2018; LATA 2019; ICALP 2019""|""QEST 2019""|""ATVA 2019""|""RADICAL 2019""|""GAMENET Poster 2019""|""CSL 2020""|""MFCS 2020""|""ATVA 2020""","""Average Case Analysis of the Classical Algorithm for Markov Decision Processes with B\""uchi Objectives.""^""Krishnendu Chatterjee, Manas Joglekar and Nisarg Shah. Average Case Analysis of the Classical Algorithm for Markov Decision Processes with B\""uchi Objectives. Proc. of FSTTCS, 2012.""|""Strategy complexity of finite-horizon Markov decision processes and simple stochastic games.""^""Krishnendu Chatterjee, and Rasmus Ibsen-Jensen. Strategy complexity of finite-horizon Markov decision processes and simple stochastic games. Proc. of MEMICS, 2012.""|""Finite Automata with Time-Delay Blocks.""^""Krishnendu Chatterjee, Thomas A. Henzinger, and Vinayak Prabhu. Finite Automata with Time-Delay Blocks. Proc. of EMSOFT, 2012.""|""Equivalence of Games with Probabilistic Uncertainty and Partial-observation Games.""^""Krishnendu Chatterjee, Martin Chmelik and Rupak Majumdar. Equivalence of Games with Probabilistic Uncertainty and Partial-observation Games. Proc. of ATVA, 2012.""|""Polynomial-time Algorithms for Energy Games with Special Weight Structures.""^""Krishnendu Chatterjee, Monika Henzinger, Sebastian Krinninger and Danupon Nanongkai. Polynomial-time Algorithms for Energy Games with Special Weight Structures. Proc. of ESA, 2012.""|""Faster Algorithms for Alternating Refinement Relations.""^""Krishnendu Chatterjee, Siddhesh Chaubal, and Pritish Kamath. Faster Algorithms for Alternating Refinement Relations. Proc. of CSL, 2012.""|""Strategy Synthesis for Multi-dimensional Quantitative Objectives.""^""Krishnendu Chatterjee, Mickael Randour and Jean-Francois Raskin. Strategy Synthesis for Multi-dimensional Quantitative Objectives. Proc. of CONCUR, 2012.""|""Partial-Observation Stochastic Games: How to Win when Belief Fails.""^""Krishnendu Chatterjee and Laurent Doyen. Partial-Observation Stochastic Games: How to Win when Belief Fails. Proc. of LICS, 2012.""|""Mean-Payoff Pushdown Games.""^""Krishnendu Chatterjee and Yaron Velner. Mean-Payoff Pushdown Games. Proc. of LICS, 2012.""|""Decidable Problems for Probabilistic Automata on Infinite Words.""^""Krishnendu Chatterjee and Mathieu Tracol. Decidable Problems for Probabilistic Automata on Infinite Words. Proc. of LICS, 2012.""|""Efficient Controller Synthesis for Consumption Games with Multiple Resource Types.""^""Tomas Brazdil, Krishnendu Chatterjee, Antonin Kucera and Petr Novotny. Efficient Controller Synthesis for Consumption Games with Multiple Resource Types. Proc. of CAV, 2012.""|""Robustness of Structurally Equivalent Concurrent Parity Games.""^""Krishnendu Chatterjee. Robustness of Structurally Equivalent Concurrent Parity Games. Proc. of FOSSACS, 2012.""|""An O(n^2) Time Algorithm for Alternating B\""uchi Games.""^""Krishnendu Chatterjee and Monika Henzinger. An O(n^2) Time Algorithm for Alternating B\""uchi Games. Proc. of SODA, 2012.""|""Synthesizing Protocols for Digital Contract Signing.""^""Krishnendu Chatterjee and Vishwanath Raman. Synthesizing Protocols for Digital Contract Signing. Proc. of VMCAI, 2012.""|""Energy Parity Games.""^""Krishnendu Chatterjee and Laurent Doyen. Energy Parity Games. Theoretical Computer Science (TCS).""|""Code Aware Resource Management.""^""Krishnendu Chatterjee, Luca de Alfaro, Marco Faella, Rupak Majumdar and Vishwanath Raman. Code Aware Resource Management. Formal Methods in System Design (FMSD).""|""The Effect of One Additional Driver Mutation on Tumor Progression.""^""Johannes Reiter, Ivana Bozic, Ben Allen, Krishnendu Chatterjee and Martin A. Nowak. The Effect of One Additional Driver Mutation on Tumor Progression. Journal of Evolutionary Applications.""|""The Complexity of Coverage.""^""Krishnendu Chatterjee, Luca de Alfaro and Rupak Majumdar. The Complexity of Coverage. International Journal of Foundations of Computer Science.""|""A Survey of Partial-Observation Stochastic Parity Games.""^""Krishnendu Chatterjee, Laurent Doyen and Thomas A. Henzinger. A Survey of Partial-Observation Stochastic Parity Games. Formal Methods in System Design (FMSD).""|""Evolutionary game dynamics in populations with different learners.""^""Krishnendu Chatterjee, Damien Zufferey and Martin A. Nowak. Evolutionary game dynamics in populations with different learners. Journal of Theoretical Biology.""|""The Complexity of Stochastic Muller Games.""^""Krishnendu Chatterjee. The Complexity of Stochastic Muller Games. Information and Computation.""|""Evolutionary Dynamics of Biological Auctions.""^""Krishnendu Chatterjee, Johannes G. Reiter and Martin A. Nowak. Evolutionary Dynamics of Biological Auctions. Journal of Theoretical Population Biology.""","""Peixin Wang""|""Hongfei Fu""|""Amir Kafshdar Goharshady""|""Xudong Qin""|""Wenjun Shi""","""Samarth Mishra""|""Anchit Gupta""|""Yashdeep Godhal""|""Nathanael Fijalkow""|""Manas Joglekar""|""Nisarg Shah""|""Rohit Singh""|""Pritish Kamath""|""Siddhesh Chaubal""|""Jean-Baptiste Courtois""|""Umair Ahmed""|""Ankush Das|""Ashwin Paranjpe""|""Rasmus Ibsen-Jensen""|""Jan Humplik""|""Ayush Kanodia""|""Raghav Gupta""|""Prateesh Goyal""|""Deepanjan Kundu""|""Andreas Fellner""|""Hasan Ferit Eniser""|""Amir Kafshdar Goharshady""|""Vineet Pandey""|""Stephan Simsa""|""Aniket Muhrekar""|""Kapil Vaidya""|""Djorde Zikelic""|""Sheshansh Agrawal""|""Bhavya Chaudhuri""|""Bartosz Bednarczyk""|""Marek Chalupa""|""Sriram Balasubramanian""|""Deep Karkhanis""|""Pouya Shati""|""Arash Pourdamghani""|""Jakub Svoboda""|""Tushar Gautam""|""Ali Asadi""|""Parsa Mirtaheri""|""Farbod Ekabatani""|""Raimundo Saona""|""Florian Horn""|""Mathieu Tracol""|""Sasha Rubin""|""Benjamin Aminof""|""Jan Kretinsky""|""Hongfei Fu""|""Ventsislav Chonev""|""Tadeas Priklopil""|""Rasmus Ibsen-Jensen""|""Petr Novotny""|""Christian Hilbe""|""Johannes Reiter""|""Martin Chmelik""|""Andreas Pavlogiannis"""""
fac_20,"""Andrew Anderson""|""Jon Dodge""|""Abrar Fallatah""",NA,"""CS 468/568: (HCI 2) Inclusive Design with Personas.""|""CS 565: (HCI 1 for grads) Introduction to HCI.""|""CS 419/519: (HCI 2) Inclusive Design with Personas.""|""CS/ECE 507: EECS Professionalism, Ethics, & Diversity (Fall 2016).""|""CS519: Personas Methods in HCI and User-Centered Design (Winter 2015).""|""CS 569/589: Special topics: Empirical lab studies of software development (Winter 2014).""|""CS 569: Special topics: Empirical methods for field (case) studies in software engineering (Fall 2014). ""|""CS 584 (Fall 2013).""|""CS 352: (HCI 1 for undergrads) Usability engineering.""","""Foraging While Debugging on Mobile Devices""|""Gender-Inclusiveness Personas vs. Stereotyping: Can We Have it Both Ways?""|""Finding Gender-Inclusiveness Software Issues with GenderMag: A Field Investigation""|""Tell me more? The effects of mental model soundness on personalizing an intelligent agent""|""An Exploration of Design Opportunities for \""Gardening\"" End-User Programmers Ideas""|""End-user feature labeling: a locally-weighted regression approach""|""End-user mashup programming: Through the design lens""|""Using Information Scent to Model the Dynamic Foraging Behavior of Programmers in Maintenance Tasks""",NA,"""From Barriers to Learning in the Idea Garden: An Empirical Study""^""From Barriers to Learning in the Idea Garden: An Empirical Study, Jill Cao, Irwin Kwan, Rachel White, Scott D. Fleming, Margaret Burnett, Christopher Scaffidi, IEEE Symposium on Visual Languages and Human-Centric Computing, Innsbruck, Austria, September 2012, 59-66.""|""The effects of mental model soundness on personalizing an intelligent agent.""^""Tell me more? The effects of mental model soundness on personalizing an intelligent agent Todd Kulesza, Simone Stumpf, Margaret Burnett, Irwin Kwan, ACM Conference on Human Factors in Computing Systems (CHI 2012), May 2012, pp. 1-10. Best Paper Honorable Mention""|""Designing a debugging interaction language: An initial case study in Natural Programming Plus""^""Designing a debugging interaction language: An initial case study in Natural Programming Plus, Christopher Bogart, Margaret Burnett, Scott Douglass, Rachel White, Hannah Adams, ACM Conference on Human Factors in Computing Systems (CHI), May 2012, pp. 2469-2478.""|""Reactive Information Foraging: An Empirical Investigation of Theory-Based Recommender Systems for Programmers""^""Reactive Information Foraging: An Empirical Investigation of Theory-Based Recommender Systems for Programmers, David Piorkowski, Scott D. Fleming, Christopher Scaffidi, Christopher Bogart, Margaret Burnett, Bonnie E. John, Rachel K. E. Bellamy, Calvin Swart, ACM Conference on Human Factors in Computing Systems (CHI), May 2012, pp. 1471-1480.""|""End-user debugging strategies: A sensemaking perspective""^""End-user debugging strategies: A sensemaking perspective Valentina Grigoreanu, Margaret Burnett, Susan Wiedenbeck, Jill Cao, Kyle Rector, and Irwin Kwan, ACM Transactions on Computer-Human Interaction, Vol. 19, No. 1, Article 5, March 2012 (28 pages).""|""End-User Software Engineering and Why It Matters.""^""End-User Software Engineering and Why It Matters. Burnett, M. In A. Dwivedi, & S. Clarke (Eds.), End-User Computing, Development, and Software Engineering: New Challenges. pp. 185-201, 2012. doi:10.4018/978-1-4666-0140-6.ch009.""|""Towards recognizing ""cool"": Can end users help computer vision recognize subjective attributes of objects in images?""^""Towards recognizing ""cool"": Can end users help computer vision recognize subjective attributes of objects in images? William Curran, Travis Moore, Todd Kulesza, Weng-Keen Wong, Sinisa Todorovic, Simone Stumpf, Rachel White, Margaret Burnett, ACM International Conference on Intelligent User Interfaces (IUI), 2012, pp. 285-288.""",NA,"""Brijesh Bhuva""|""Claudia Hilderbrand""|""Charles Hill""|""Chris Mendez""|""Bhargav Pandya""|""Sean Penney""|""David Piorkowski""|""Sruti Srinivasa Ragavan"""
fac_21,"""Martha Barker""|""Thomas Repetti""|""Andrea Lottarini""",NA,"""Egleston Scholars Research Seminar (Fall 2017)""|""Fundamentals of Computer Systems (Fall 2017)""|""Computer Architecture (Spring 2017)""|""Egleston Scholars Research Seminar (Fall 2016)""|""Fundamentals of Computer Systems (Fall 2016)""|""Fundamentals of Computer Systems (Spring 2016)""",NA,NA,NA,NA,"""Melanie Kambadur""|""Lisa Wu"""
fac_22,"""Eric Atkinson""|""Jonathan Frankle""|""Alexander Renda""|""Benjamin Sherman""|""Cambridge Yang""","""Reactive Probabilistic Programming""^""Reactive Probabilistic Programming Guillaume Baudart, Louis Mandel, Eric Atkinson, Benjamin Sherman, Marc Pouzet, and Michael Carbin""|""Proving Acceptability Properties of Relaxed Nondeterministic Approximate Programs""^""Proving Acceptability Properties of Relaxed Nondeterministic Approximate Programs Michael Carbin, Deokhwan Kim, Sasa Misailovic, and Martin C. Rinard""","""Dynamic Computer Language Engineering (6.Spring 20081), Spring 2019""|""Dynamic Computer Language Engineering (6.Spring 20081), Spring 2018""|""Computer Language Engineering (6.035), Fall 2017""|""(Dynamic) Computer Language Engineering (6.035), Spring 2017""|""Computer Systems Engineering (6.033), Spring 2016""","""The Lottery Ticket Hypothesis: Finding Small, Trainable Neural Networks""^""The Lottery Ticket Hypothesis: Finding Small, Trainable Neural Networks Jonathan Frankle and Michael Carbin""|""Ithemal: Accurate, Portable, and Fast Basic Block Throughput Estimation using Deep Neural Networks""^""Ithemal: Accurate, Portable, and Fast Basic Block Throughput Estimation using Deep Neural Networks Charith Mendis, Alex Renda, Saman Amarasinghe, and Michael Carbin""|""Chisel: Reliability- and Accuracy-Aware Optimization of Approximate Computational Kernels""^""Chisel: Reliability- and Accuracy-Aware Optimization of Approximate Computational Kernels Sasa Misailovic, Michael Carbin, Sara Achour, Zichao Qi, and Martin C. Rinard""|""2013 Verifying Quantitative Reliability for Programs that Execute on Unreliable Hardware""^""2013 Verifying Quantitative Reliability for Programs that Execute on Unreliable Hardware Michael Carbin, Sasa Misailovic, and Martin C. Rinard""","""PLDI 2020""|""ICML 2020""|""ASPLOS 2020""|""SysML 2020""|""CGO 2019""|""EuroSys 2019""|""ECOOP 2018""|""USENIX ATC 2018""|""CGO 2018""|""PLDI 2017 (ERC)""|""CGO 2017""|""OOPSLA 2016""|""PLDI 2016""|""CGO 2015""","""(Relative) Safety Properties for Relaxed Appproximate Programs""^""(Relative) Safety Properties for Relaxed Appproximate Programs Michael Carbin and Martin C. Rinard RACES 2012 — Relaxing Synchronization for Multicore and Manycore Scalability, co-located with OOPSLA""|""Cryptographic Path Hardening: Hiding Vulnerabilities in Software using Cryptography""^""Cryptographic Path Hardening: Hiding Vulnerabilities in Software using Cryptography Vijay Ganesh, Michael Carbin, and Martin C. Rinard OBT 2012 — Off the Beaten Track, co-located with POPL""|""Bolt: On-Demand Infinite Loop Escape in Unmodified Binaries""^""Bolt: On-Demand Infinite Loop Escape in Unmodified Binaries Michael Kling, Sasa Misailovic, Michael Carbin, and Martin C. Rinard OOPSLA 2012 — Object-Oriented Programming, Systems, Languages, and Applications Paper Slides""|""Proving Acceptability Properties of Relaxed Nondeterministic Approximate Programs""^""Proving Acceptability Properties of Relaxed Nondeterministic Approximate Programs Michael Carbin, Deokhwan Kim, Sasa Misailovic, and Martin C. Rinard PLDI 2012 — Programming Language Design and Implementation Paper Slides""|""Automatic Input Rectification""^""Automatic Input Rectification Fan Long, Vijay Ganesh, Michael Carbin, Stelios Sidirolgou, and Martin C. Rinard ICSE 2012 — International Conference on Software Engineering""","""Benjamin Sherman""|""Deokhwan Kim""|""Eric Atkinson""|""Guillaume Baudart""|""Louis Mandel""|""Marc Pouzet""|""Martin C. Rinard""|""Sasa Misailovic""","""Brett Boston""|""Sahil Verma"""
fac_23,"""Michael Arntzenius""|""Dima Szamozvancev""|""Andrej Ivašković""","""A Typed, Algebraic Approach to Parsing""^""A Typed, Algebraic Approach to Parsing, Neel Krishnaswami and Jeremy Yallop. Draft, accepted for publication at PLDI 2019. Won Distinguished Paper Award.""|""Permission-Based Ownership: Encapsulating State in Higher-Order Typed Languages""^""Permission-Based Ownership: Encapsulating State in Higher-Order Typed Languages, Neel Krishnaswami and Jonathan Aldrich. Appeared in PLDI 2005.""",NA,NA,NA,"""Superficially Substructural Types""^""Superficially Substructural Types, Neelakantan R. Krishnaswami, Aaron Turon, Derek Dreyer, Deepak Garg. Accepted for publication at ICFP 2012. The extended tech report is also available.""|""Adding Equations to System F Types""^""Adding Equations to System F Types, Neelakantan R. Krishnaswami, Nick Benton. Appeared at ESOP 2012.""|""Higher-Order Functional Reactive Programming in Bounded Space""^""Higher-Order Functional Reactive Programming in Bounded Space, Neelakantan R. Krishnaswami, Nick Benton, Jan Hoffmann. Accepted for publication at POPL 2012.""","""Jeremy Yallop""|""Jonathan Aldrich""",NA
fac_24,"""Robin Jia""|""Stephen Mussmann""|""Pranav Rajpurkar""|""Fereshte Khani""|""Pang Wei Koh""|""Aditi Raghunathan""|""Mina Lee""|""John Hewitt""|""Ananya Kumar""|""Shiori Sagawa""|""Michael Xie""|""Chris Donahue""","""Active learning of points-to specifications""^""Active learning of points-to specifications. Osbert Bastani, Rahul Sharma, Alex Aiken, Percy Liang. Programming Language Design and Implementation (PLDI), 2018.""|""Synthesizing program input grammars""^""Synthesizing program input grammars. Osbert Bastani, Rahul Sharma, Alex Aiken, Percy Liang. Programming Language Design and Implementation (PLDI), 2017.""|""Scaling up abstraction refinement via pruning""^""Scaling up abstraction refinement via pruning. Percy Liang, Mayur Naik. Programming Language Design and Implementation (PLDI), 2011.""","""Autumn 2012-13, 2013-14, 2014-15, 2015-16, 2016-17, 2017-18, 2018-19: Artificial Intelligence (CS221)""|""Winter 2012-13, 2013-14, 2014-15: 2015-16: Statistical Learning Theory (CS229T/STATS231) [lecture notes]""","""Understanding black-box predictions via influence functions""^""Understanding black-box predictions via influence functions. Pang Wei Koh, Percy Liang. International Conference on Machine Learning (ICML), 2017. Best paper award.""|""A hitting time analysis of stochastic gradient Langevin dynamics""^""A hitting time analysis of stochastic gradient Langevin dynamics. Yuchen Zhang, Percy Liang, Moses Charikar. Conference on Learning Theory (COLT), 2017. Best paper award.""|""Adversarial examples for evaluating reading comprehension systems""^""Adversarial examples for evaluating reading comprehension systems. Robin Jia, Percy Liang. Empirical Methods in Natural Language Processing (EMNLP), 2017. Outstanding paper award""|""Learning language games through interaction""^""Learning language games through interaction. Sida I. Wang, Percy Liang, Chris Manning. Association for Computational Linguistics (ACL), 2016. Outstanding paper award""",NA,"""Identifiability and unmixing of latent parse trees.""^""Identifiability and unmixing of latent parse trees. Daniel Hsu, Sham M. Kakade, Percy Liang. Advances in Neural Information Processing Systems (NeurIPS), 2012. ""","""Osbert Bastani""|""Rahul Sharma""|""Alex Aiken""|""Mayur Naik""","""Jonathan Berant""|""Roy Frostig""|""Sida Wang""|""Yuchen Zhang""|""He He""|""Arun Chaganty""|""Kelvin Guu""|""Jacob Steinhardt""|""Tatsunori Hashimoto""|""Panupong (Ice) Pasupat""|""Daniel Selsam""|""Fanny Yang"""
fac_25,"""Raejoon Jung""|""Kevin Kiningham""|""Holly Chiang""|""Luke Hsiao""|""Sergio Benitez""|""Kexin Rong""|""Francis Yu Yan""|""Hudson Ayers""|""Deepti Raghavan""","""The nesC Language: A Holistic Approach to Network Embedded Systems.""^""David Gay, Philip Levis, Robert von Behren, Matt Welsh, Eric Brewer, and David Culler. The nesC Language: A Holistic Approach to Network Embedded Systems. In Proceedings of the ACM SIGPLAN 2003 Conference on Programming Language Design and Implementation (PLDI). Received PLDI 2003 most influential paper award (2013).""","""EE185/EE285/CS241: Interactive Light Sculpture Project""|""CS107E: Computer Systems from the Ground Up""|""CS110: Principles of Computer Systems""|""CS144: public/self-paced online course version""|""CS144: Introduction to Computer Networks""|""CS240E: Embedded Wireless Systems""|""CS244E: Wireless Networking""|""CS303: Designing Computer Science Experiments""|""CS340V: Networked Systems for Virtual Worlds""|""EE108A: Digital Systems Design""|""CS344E: Wireless Networking Research""|""CS67N: The Computer of History, the Computer of Fiction""","""Trickle: A Self-Regulating Algorithm for Code Propagation and Maintenance in Wireless Sensor Networks.""^""Trickle: A Self-Regulating Algorithm for Code Propagation and Maintenance in Wireless Sensor Networks. In Proceedings of the First USENIX/ACM Symposium on Networked Systems Design and Implementation (NSDI 2004). Received best paper award (2004), test of time award (2014). [HTML][PDF]""","""IPSN""|""OSDI""|""SenSys""|""NSDI""|""SOSP""|""HotMobile""|""CCR""|""SenSys""|""CCR""|""IP+SN""|""MobiSys""|""HotPower""|""SOSP""|""TOSN""|""CCR""|""NSDI""|""MobiSys""|""DMSN""|""TOSN""|""SenSys""|""SOSP""|""TOSN""|""MODUS""|""IPSN""|""ICDCS""|""NSDR""|""SIGCOMM""|""OSDI""|""IPSN""|""SIGCOMM""|""DMSN""|""SenSys""|""MidSens""|""NetDB""|""IPSN""|""DCOSS""|""SenSys""|""RTSS""","""Experiences from a Decade of TinyOS Development.""^""Philip Levis. Experiences from a Decade of TinyOS Development. In Proceedings of the 10th USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2012.""","""David Gay""|""Robert von Behren""|""Matt Welsh""|""Eric Brewer""|""David Culler""","""Kannan Srinivasan""|""Jung Woo Lee""|""Jung Il Choi""|""Mayank Jain""|""Ewen Cheslack-Postava""|""Maria Kazandjieva""|""Tahir Azim""|""Jae-Young Kim""|""Behram Mistree""|""Omid Mashayekhi""|""Judson Wilson""|""Chinmayee Shah""|""Hang Qu""|""Amit Levy"""
fac_26,"""Field Cady""|""Mike DeRosa""|""Mustafa Emre Karagozler""|""David Koes""|""Mahim Mishra""|""Michael Ashley-Rollman""","""A global progressive register allocator""^""A global progressive register allocator David Ryan Koes and Seth Copen Goldstein. In Proceedings of the 2006 ACM SIGPLAN conference on Programming language design and implementation (PLDI'06), pages 204–215, 2006.""","""Spring 19:  15-213/15-513/18-213 Introduction to Computer Systems""|""Fall 18:  15-319/15-619 Cloud Computing""|""Spring 18:  15-213/15-513/18-213 Introduction to Computer Systems""|""Fall 17:  15-319/15-619 Cloud Computing""|""Spring 17:  15-213/15-513/18-213 Introduction to Computer Systems""|""Fall 16:  15-319/15-619 Cloud Computing""|""Spring 16:  15-213/15-513/18-213 Introduction to Computer Systems""|""Fall 15:  15-740 Computer Architecture""|""Spring 15:  15-213/15-513/18-213 Introduction to Computer Systems""|""Fall 14:  15-740 Computer Architecture""|""Spring 14:  Introduction to Computer Systems""|""Fall 13:  15-740 Computer Architecture""|""Spring 13:  Introduction to Computer Systems""|""Spring 10:  Computer Networks""|""Fall 09: Optimizing Compilers for Modern Architectures""|""Spring 09: Optimizing Compilers for Modern Architectures""|""Fall 08: 15-411 Introduction to Computer Networks""|""Spring 08: Optimizing Compilers for Modern Architectures""|""Spring 07: Optimizing Compilers for Modern Architectures""|""Fall 06: Compiler Design""|""Spring 2006: Fundamental Data Structures and Algorithms""|""Fall 2005: Introduction to Nanotechnology""|""Spring 2005: Optimizing Compilers for Modern Architectures""|""Fall 2004: Introduction to Nanotechnology""|""Spring 2004: Introduction to Computer Systems""|""Fall 2003: Computer Architecture""|""Spring 2003: Introduction to Computer Systems""|""Fall 2002: Computer Architecture""|""Spring 2002: Electronic Nanotechnology""|""Spring 2002: Optimizing Compilers for Modern Architectures""|""Fall 2001: Compiler Design, 15-411""|""Spring 2001: Optimizing Compilers for Modern Architectures""|""Fall 2000: Compiler Design, 15-411""|""Fall 1999: Fundamental Structures of Computer Science I, 15-211""|""Spring 1999: Reconfigurable Computing, 15-828""|""Fall 1998: Fundamental Structures of Computer Science I, 15-211""|""Spring 1998: Reconfigurable Computing, 15-828 .""|""Fall 1997: Fundamental Structures of Computer Science I, 15-211.""",NA,NA,"""Analysis and Modeling of Capacitive Power Transfer in Microsystems""^""Analysis and Modeling of Capacitive Power Transfer in Microsystems Mustafa Emre Karagozler, Seth Copen Goldstein, and David S. Ricketts. Circuits and Systems I: Regular Papers, IEEE Transactions on, 59(7):1557–1566, Jul 2012.""|""Analysis and Modeling of Capacitive Power Transfer in Microsystems""^""Analysis and Modeling of Capacitive Power Transfer in Microsystems Mustafa Emre Karagozler, Seth Copen Goldstein, and David S. Ricketts. IEEE Trans. on Circuits and Systems, 59-I(7):1557–1566, 2012.""|""Distributed Intelligent MEMS: Progresses and Perspectives""^""Distributed Intelligent MEMS: Progresses and Perspectives Julien Bourgeois and Seth Copen Goldstein. In ICT Innovations 2011, volume 150, pages 15–25, 2012.""","""David Ryan Koes""","""Girish Venkataramani""|""Suraj Sudhir""|""Hari Cadambi""|""Mihai-Dan Budiu"""
fac_27,"""Swaraj Dash""|""Mathieu Huot""|""Cristina Matache""|""Dario Stein""|""Nick Hu""|""Yuan Zhou""",NA,"""Probabilistic Programming at Oregon PL Summer School 2019.""|""Principles of Programming Languages in Oxford.""|""A course on coalgebra jointly with Alexandra Silva in Nijmegen.""|""Courses on Discrete mathematics I, Semantics of programming languages, and Category theory and logic in Cambridge.""","""Commutative semantics for probabilistic programming.""^""S. Staton. Commutative semantics for probabilistic programming. In Proceedings of 26th European Symposium on Programming (ESOP 2017), doi:10.1007/978-3-662-54434-1_32. Preprint: [pdf]""","""25th Annual ACM/IEEE Symposium on Logic in Computer Science (LICS 2020)""|""24th ACM SIGPLAN International Conference on Functional Programming (ICFP 2019)""|""4th International Conference on Formal Structures for Computation and Deduction (FSCD 2019)""|""42nd International Symposium on Mathematical Foundations of Computer Science (MFCS 2017)""|""44th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL 2017)""|""26th European Symposium on Programming (ESOP 2017)""|""Workshop on Syntax and Semantics of Low-level Languages (LOLA 2016)""|""10th International Workshop on Fixed Points in Computer Science (FICS 2015)""|""6th Conference on Algebra and Coalgebra in Computer Science (CALCO 2015)""|""3rd ACM-SIGPLAN Workshop on Higher-Order Programming with Effects (HOPE 2014)""|""Combined 21st International Workshop on Expressiveness in Concurrency and 11th Workshop on Structured Operational Semantics (EXPRESS/SOS 2014)""|""11th International Workshop on Domain Theory and Applications (Domains XI)""|""18th ACM SIGPLAN International Conference on Functional Programming (ICFP 2013)""|""Workshop on Syntax and Semantics of Low-Level Languages (LOLA 2013)""|""5th Conference on Algebra and Coalgebra in Computer Science (CALCO 2013)""|""21st Conference on Computer Science Logic (CSL 2012)""|""4th Workshop on Mathematically Structured Functional Programming (MSFP 2012)""|""11th International Workshop on Coalgebraic Methods in Computer Science (CMCS 2012)""|""9th Asian Symposium on Programming Languages and Systems (APLAS 2011)""|""4th Conference on Algebra and Coalgebra (CALCO 2011)""|""8th International Workshop on Structural Operational Semantics (SOS 2011)""|""7th International Workshop on Structural Operational Semantics (SOS 2010)""",NA,NA,"""Ohad Kammar""|""Marcin Szymczak""|""Mathys Rennela""|""Sander Uijlen""|""Ben Roberts""|""Danel Ahman""|""Ramana Kumar""|""Kwok Cheung""|""Sohum Banerjea"""
fac_28,"""Runzhou Tao""|""John Zhuang Hui""|""Jianan Yao""|""Xupeng Li""","""Learning Nonlinear Loop Invariants with Gated Continuous Logic Networks.""^""[PLDI 2020][New] Learning Nonlinear Loop Invariants with Gated Continuous Logic Networks. J. Yao, G. Ryan, J. Wong, S. Jana, and R. Gu""|""Certified Concurrent Abstraction Layers.""^""[PLDI 2018] Certified Concurrent Abstraction Layers. R. Gu, Z. Shao, J. Kim, X. Wu, J. Koenig, V. Sjoberg, H. Chen, D. Constanzo, and T.Ramananandro""|""End-to-End Verification of Information-Flow Security for C and Assembly Programs.""^""[PLDI 2016] End-to-End Verification of Information-Flow Security for C and Assembly Programs. D. Constanzo, Z. Shao, and R. Gu""|""Toward Compositional Verification of Interruptible OS Kernels and Device Drivers.""^""[PLDI 2016] Toward Compositional Verification of Interruptible OS Kernels and Device Drivers. H. Chen, X. Wu, Z. Shao, J. Lockerman, and R. Gu""","""COMS 4115 Programming Languages and Translators (Spring 2020).""|""COMS E6998 Formal Verification of System Software (Fall 2019).""|""COMS 4115 Programming Languages and Translators (Spring 2019).""|""COMS E6998 Formal Verification of System Software (Fall 2018).""|""COMS Winter 193101 Programming Languages (Spring 2018).""|""Graduate Seminar on Systems.""","""Scaling Symbolic Evaluation for Automated Verification of Systems Code with Serval.""^""[SOSP 2019] Scaling Symbolic Evaluation for Automated Verification of Systems Code with Serval. L. Nelson, J. Bornholt, R. Gu, A. Baumann, E. Torlak, and X. Wang""","""PLDI 2020""|""SecDev 2020""|""NSDI 2019""|""SoCC 2019""|""SecDev 2019""|""PLDI 2018 ERC""|""SecDev 2018""|""ICFP 2018 SRC""",NA,"""D. Constanzo""|""G. Ryan""|""H. Chen""|""J. Kim""|""J. Koenig""|""J. Lockerman""|""J. Wong""|""J. Yao""|""S. Jana""|""T.Ramananandro""|""V. Sjoberg""|""X. Wu""|""Z. Shao""",NA
fac_29,"""Nate Bragg""|""Sankha Guria""|""Milod Kazerounian""|""Ugur Koc""","""Type-Level Computations for Ruby Libraries""^""Type-Level Computations for Ruby Libraries Milod Kazerounian, Sankha Narayan Guria, Niki Vazou, Jeffrey S. Foster, and David Van Horn In Proceedings of the 2019 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), Phoenix, Arizona, June 2019.""|""Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2018""^""Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2018 Jeffrey S. Foster and Dan Grossman In June 2018.""|""Just-in-Time Static Type Checking for Dynamic Languages""^""Just-in-Time Static Type Checking for Dynamic Languages Brianna M. Ren and Jeffrey S. Foster In Proceedings of the 2016 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), pages 462–476, Santa Barbara, CA, June 2016.""|""Adapton: Composable, Demand-Driven Incremental Computation""^""Adapton: Composable, Demand-Driven Incremental Computation Matthew Hammer, Yit Phang Khoo, Michael Hicks, and Jeffrey S. Foster In Proceedings of the 2014 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), pages 156–166 June 2014.""|""Path-Based Inductive Synthesis for Program Inversion""^""Path-Based Inductive Synthesis for Program Inversion Saurabh Srivastava, Sumit Gulwani, Swarat Chaudhuri, and Jeffrey S. Foster In Proceedings of the 2011 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), pages 492–503, San Jose, California, June 2011.""|""Mixing Type Checking and Symbolic Execution""^""Mixing Type Checking and Symbolic Execution Yit Phang Khoo, Bor-Yuh Evan Chang, and Jeffrey S. Foster In Proceedings of the 2010 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), pages 436–447, Toronto, Canada, June 2010.""|""Locksmith: Context-Sensitive Correlation Analysis for Race Detection""^""Locksmith: Context-Sensitive Correlation Analysis for Race Detection Polyvios Pratikakis, Jeffrey S. Foster, and Michael Hicks In Proceedings of the 2006 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), pages 320–331, Ottawa, Canada, June 2006.""|""Checking Type Safety of Foreign Function Calls""^""Checking Type Safety of Foreign Function Calls Michael Furr and Jeffrey S. Foster In Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), pages 62–72, Chicago, Illinois, USA, June 2005.""|""Checking and Inferring Local Non-Aliasing""^""Checking and Inferring Local Non-Aliasing Alex Aiken, Jeffrey S. Foster, John Kodumal, and Tachio Terauchi In Proceedings of the 2003 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), pages 129–140, San Diego, California, June 2003.""|""Flow-Sensitive Type Qualifiers""^""Flow-Sensitive Type Qualifiers Jeffrey S. Foster, Tachio Terauchi, and Alex Aiken In Proceedings of the 2002 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), pages 1–12, Berlin, Germany, June 2002.""|""A Theory of Type Qualifiers""^""A Theory of Type Qualifiers Jeffrey S. Foster, Manuel Fähndrich, and Alexander Aiken In Proceedings of the 1999 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), pages 192–203, Atlanta, Georgia, May 1999.""|""Partial Online Cycle Elimination in Inclusion Constraint Graphs""^""Partial Online Cycle Elimination in Inclusion Constraint Graphs Manuel Fähndrich, Jeffrey S. Foster, Zhendong Su, and Alexander Aiken In Proceedings of the 1998 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), pages 85–96, Montreal, Canada, June 1998.""","""COMP 180, Software Engineering - Spring 2019, Spring 2020""|""COMP 105, Programming Languages - Fall 2019""|""COMP 150-AVS, Program Analysis, Verification, and Synthesis - Fall 2018""|""CMSC 430, Introduction to Compilers - Spring 2012, Fall 2012, Fall 2013, Fall 2014, Fall 2015, Fall 2016""|""CMSC 498L, Cybersecurity Lab - Fall 2012""|""CMSC 330, Organization of Programming Languages - Fall 2005, Fall 2006, Fall 2008, Fall 2009, Spring 2011, Fall 2017""|""CMSC 631, Program Analysis and Understanding - Fall 2003, Fall 2004, Spring 2006, Spring 2009, Fall 2010, Spring 2013""|""CMSC 433, Programming Languages Technologies and Paradigms - Spring 2003, Spring 2004, Spring 2005""|""CMSC 838F, Language-Based Security - Spring 2008""|""CMSC 838F, Language-Based Techniques for Concurrent and Distributed Software - Spring 2007""",NA,"""SOAP 2020 Program Committee""|""POPL 2020 Program Committee""|""PLDI 2017 Program Committee""|""ICSE 2017 Program Committee""|""SOAP 2015 Program Committee""|""ICSE 2015 Program Committee""|""POPL 2015 Program Committee""|""PLDI 2014 Program Committee""|""ESEC/FSE 2013 New Ideas Track Program Committee""","""Evaluating Dynamic Software Update Safety Using Efficient Systematic Testing""^""Evaluating Dynamic Software Update Safety Using Efficient Systematic Testing Christopher M. Hayden, Edward K. Smith, Eric A. Hardisty, Michael Hicks, and Jeffrey S. Foster IEEE Transactions on Software Engineering (TSE), 38(6):1340–1354, November/December 2012.""|""Kitsune: Efficient, General-purpose Dynamic Software Updating for C""^""Kitsune: Efficient, General-purpose Dynamic Software Updating for C Christopher M. Hayden, Edward K. Smith, Michail Denchev, Michael Hicks, and Jeffrey S. Foster In ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages and Applications (OOPSLA), pages 249–264, Tuscon, Arizona, October 2012.""|""Dr. Android and Mr. Hide: Fine-grained Permissions in Android Applications""^""Dr. Android and Mr. Hide: Fine-grained Permissions in Android Applications Jinseong Jeon, Kristopher K. Micinski, Jeffrey A. Vaughan, Ari Fogel, Nikhilesh Reddy, Jeffrey S. Foster, and Todd Millstein In ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM), pages 3–14, Raleigh, NC, USA, October 2012.""|""iTree: Efficiently Discovering High-Coverage Configurations Using Interaction Trees""^""iTree: Efficiently Discovering High-Coverage Configurations Using Interaction Trees Charles Song, Adam Porter, and Jeffrey S. Foster In Proceedings of the 34th International Conference on Software Engineering (ICSE), pages 903–913, Zurich, Switzerland, June 2012.""|""Towards Standardized Benchmarks for Dynamic Software Updating Systems""^""Towards Standardized Benchmarks for Dynamic Software Updating Systems Edward K. Smith, Michael Hicks, and Jeffrey S. Foster In ACM Workshop on Hot Topics in Software Upgrades (HotSWUp), pages 11–15, Zurich, Switzerland, June 2012.""|""A Study of Dynamic Software Update Quiescence for Multithreaded Programs""^""A Study of Dynamic Software Update Quiescence for Multithreaded Programs Christopher M. Hayden, Karla Saur, Michael Hicks, and Jeffrey S. Foster In ACM Workshop on Hot Topics in Software Upgrades (HotSWUp), pages 6–10, Zurich, Switzerland, June 2012.""|""Specifying and Verifying the Correctness of Dynamic Software Updates""^""Specifying and Verifying the Correctness of Dynamic Software Updates Stephen Magill, Christopher M. Hayden, Michael Hicks, Nate Foster, and Jeffrey S. Foster In Rajeev Joshi, Peter Müller, and Andreas Podelski, editors, Verified Software: Theories, Tools and Experiments (VSTTE), volume 7152 of Lecture Notes in Computer Science, pages 278–293, Philadelphia, USA, January 2012. Springer Berlin / Heidelberg.""|""Template-based Program Verification and Program Synthesis""^""Template-based Program Verification and Program Synthesis Saurabh Srivastava, Sumit Gulwani, and Jeffrey S. Foster International Journal on Software Tools for Technology Transfer (STTT), special issue on Algorithmic Program Synthesis:1–22, January 2012.""","""Alex Aiken""|""Bor-Yuh Evan Chang""|""Brianna M. Ren""|""Dan Grossman""|""David Van Horn""|""John Kodumal""|""Manuel Fähndrich""|""Matthew Hammer""|""Michael Furr""|""Michael Hicks""|""Milod Kazerounian""|""Niki Vazou""|""Polyvios Pratikakis""|""Sankha Narayan Guria""|""Saurabh Srivastava""|""Sumit Gulwani""|""Swarat Chaudhuri""|""Tachio Terauchi""|""Yit Phang Khoo""|""Zhendong Su""","""Brianna Ren""|""Kristopher Micinski""|""Jinseong Jeon""|""Karla Saur""|""Yit Phang Khoo""|""Chris Hayden""|""Mike Furr""|""Kin-Keung (Martin) Ma""|""Polyvios Pratikakis""|""Saurabh Srivastava"""
fac_30,"""Mark Goldstein""|""Nisarg Patel""","""Verifying Concurrent Search Structure Templates""^""Verifying Concurrent Search Structure Templates pdf S. Krishna, N. Patel, D. Shasha, and T. Wies To appear in Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2020""","""Computer Systems Organization (undergraduate)""|""Programming Languages (graduate)""|""Object-Oriented Programming (graduate)""|""Object-Oriented Programming (undergraduate)""|""Principles of Programming Languages (undergraduate)""|""Rigorous Software Development (graduate)""|""Programming Paradigms for Concurrency (graduate)""","""Charting a Course Through Uncertain Environments: SEA Uses Past Problems to Avoid Future Failures""^""Charting a Course Through Uncertain Environments: SEA Uses Past Problems to Avoid Future Failures pdf Best Paper Award P. Moore, J. Cappos, P. Frankl, and T. Wies In Proceedings of International Symposium on Software Reliability Engineering (ISSRE), 2019""|""Finding Minimum Type Error Sources""^""Finding Minimum Type Error Sources pdf Best Paper Award Z. Pavlinovic, T. King, and T. Wies In Proceedings of ACM SIGPLAN International Conference on Object Oriented Programming Systems, Languages, and Applications (OOPSLA), 2014""","""POPL 2020""|""VMCAI 2020""|""ADSL 2020""|""NETYS 2020""|""VSTTE 2020""|""VDS 2020 (co-chair)""|""TACAS 2019""|""SYNT 2019 (co-chair)""|""CAV 2018""|""TACAS 2018""|""VMCAI 2018""|""VSTTE 2018""|""ADSL 2018""|""ECOOP 2017""|""TACAS 2017""|""TMPA 2017""|""VSTTE 2017 (co-chair)""|""CREST 2017""|""CONCUR 2017""|""Onward! 2017""|""TAPAS 2017 (chair)""|""POPL 2016 (ERC)""|""VMCAI 2016""|""CAV 2016""|""VMCAI 2015""|""POPL 2014""|""SMT 2014""|""FOOL 2014""|""VSTTE 2013""|""WING 2012 (co-chair)""|""BOOGIE 2012""|""FTfJP 2012""|""SAS 2012""|""VSTTE 2012""|""WING 2010""|""WING 2009""","""Error Invariants pdf""^""Error Invariants pdf. E. Ermis, M. Schäf, and T. Wies   In Proceedings of Formal Methods (FM), 2012""|""Deciding Functional Lists with Sublist Sets""^""Deciding Functional Lists with Sublist Sets T. Wies, M. Muñiz, and V. Kuncak In Proceedings of Verified Software: Theories, Tools, Experiments (VSTTE), 2012""|""Ideal Abstractions for Well-Structured Transition Systems ""^""Ideal Abstractions for Well-Structured Transition Systems D. Zufferey, T. Wies, and T.A. Henzinger In Proceedings of Verification, Model Checking, and Abstract Interpretation (VMCAI), 2012""","""S. Krishna""|""N. Patel""|""D. Shasha""","""Kshitij Bansal""|""Siddharth Krishna""|""Chanseok Oh""|""Zvonimir Pavlinovic""|""Daniel Schwartz-Narbonne""|""Wei Wang"""
fac_31,"""Xuankang Lin""|""Kia Rahmani""|""Zhe Zhou""|""Zikang Xiong""|""Joseph Eappen""|""Prasita Mukherjee""|""Wenxian Zhang""","""An Inductive Synthesis Framework for Verifiable Reinforcement Learning""^""An Inductive Synthesis Framework for Verifiable Reinforcement Learning ACM Conference on Programming Language Design and Implementation (PLDI), June 2019 (with H. Zhu, Z. Xiong, S. Magill) (Distinguished Paper) (abstract)""|""A Data-Driven CHC Solver""^""A Data-Driven CHC Solver ACM Conference on Programming Language Design and Implementation (PLDI), June 2018 (with H. Zhu, S. Magill) (Distinguished Paper) (abstract)""|""Automatically Learning Shape Specifications""^""Automatically Learning Shape Specifications ACM Conference on Programming Language Design and Implementation (PLDI), June 2016 (with H. Zhu and G. Petri). (abstract)""|""Declarative Programming over Eventually Consistent Data Stores""^""Declarative Programming over Eventually Consistent Data Stores ACM Conference on Programming Language Design and Implementation (PLDI), June 2015 (with K.C. Sivaramakrishnan and G. Kaki). (abstract)""|""Synthesizing Racy Tests""^""Synthesizing Racy Tests ACM Conference on Programming Language Design and Implementation (PLDI), June 2015 (with M. Samak and M. Ramanathan). (abstract)""|""Atomicity Refinement for Verified Compilation""^""Atomicity Refinement for Verified Compilation ACM Transactions on Programming Languages and Systems (TOPLAS), 36(2):6 Presented at PLDI, June 2014 (with V. Laporte, G. Petri, D. Pichardie, and J. Vitek). (abstract)""|""Composable Asynchronous Events""^""Composable Asynchronous Events, ACM Conference on Programming Language Design and Implementation (PLDI), June 2011 (with L. Ziarek, K.C. Sivaramakrishnan). (abstract)""","""Spring 2020:        Programming Languages (graduate)""",NA,"""ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2019 PC member""|""46th ACM SIGPLAN Symposium on Principles of Programming Languages (POPL), 2019 PC member""|""5th ACM SIGPLAN International Workshop on Libraries, Languages and Compilers for Array Programming, 2018 PC member""|""European Symposium on Programming, 2018 PC member""|""ACM Conference on Programming Language Design and Implementation, 2017 External Program Committee""","""Eliminating Read Barriers through Procrastination and Cleanliness""^""Eliminating Read Barriers through Procrastination and Cleanliness International Symposium on Memory Management (ISMM), June 2012 (with K.C. Sivaramakrishan. L. Ziarek). (abstract)""|""Resource-Sensitive Synchronization Inference Using Abduction,""^""Resource-Sensitive Synchronization Inference Using Abduction, ACM Symposium on Principles of Programming Languages (POPL), January 2012 (with M. Botincan and M. Dodds). (abstract)""","""D. Pichardie""|""G. Kaki""|""G. Petri""|""H. Zhu""|""J. Vitek""|""K.C. Sivaramakrishnan""|""L. Ziarek""|""M. Ramanathan""|""M. Samak""|""S. Magill""|""V. Laporte""|""Z. Xiong""","""He Zhu""|""K.C. Sivaramakrishnan""|""Dasarath Weeratunge""|""Lukasz Ziarek""|""Armand Navabi""|""Muralikrishna Ramanathan""|""Deepak Rao Bobbarjung""|""Ronaldo Ferreria""|""Adam Welc"""
fac_32,"""Calvin Beck""|""Paul He""|""Yishuai Li""|""Solomon Maina""|""Nick Rioux""|""Li-yao Xia""","""Type-and-Example-Directed Program Synthesis.""^""Peter-Michael Osera and Steve Zdancewic. Type-and-Example-Directed Program Synthesis. In Proc. 2015 ACM SIGPLAN Conference on Programming Languages Design and Implementation (PLDI), 2015. [ PDF  Abstract ]""|""A Formal C Memory Model Supporting Integer-Pointer Casts.""^""Jeehoon Kang, Chung-Kil Hur, William Mansky, Dmitri Garbuzov, Steve Zdancewic, and Viktor Vafeiadis. A Formal C Memory Model Supporting Integer-Pointer Casts. In Proc. 2015 ACM SIGPLAN Conference on Programming Languages Design and Implementation (PLDI), 2015. [ PDF  Abstract ]""|""Formal Verification of SSA-Based Optimizations for LLVM.""^""Jianzhou Zhao, Santosh Nagarakatte, Milo M. K. Martin, and Steve Zdancewic. Formal Verification of SSA-Based Optimizations for LLVM. In Proc. 2013 ACM SIGPLAN Conference on Programming Languages Design and Implementation (PLDI), 2013. [ PDF  Abstract ]""|""SoftBound: Highly Compatible and Complete Spatial Memory Safety for C.""^""Santosh Nagarakatte, Jianzhou Zhao, Milo M. K. Martin, and Steve Zdancewic. SoftBound: Highly Compatible and Complete Spatial Memory Safety for C. In Proc. 2009 ACM SIGPLAN Conference on Programming Languages Design and Implementation (PLDI), 2009. [ PDF  Abstract ]""|""Combining Events And Threads For Scalable Network Services.""^""Peng Li and Steve Zdancewic. Combining Events And Threads For Scalable Network Services. In Proc. 2007 ACM SIGPLAN Conference on Programming Languages Design and Implementation (PLDI), pages 189--199, 2007. [ PS  Abstract ]""","""Programming Languages and Techniques I (CIS 120) 2019, 2017, 2016, 2014, 2012, 2011, 2010""|""Compilers (CIS 341) 2020 , 2018,2017,2015, 2013, 2011, 2008""|""Software Foundations (CIS 500) 2016, 2013""|""Software and Compiler Verification (CIS 700) 2005""|""Computer and Network Security (CIS 551) 2012 , 2009 , 2008 , 2007 , 2006 , 2005""|""Introduction to Networks and Security (CSE 331) 2006 , 2004 , 2003 , 2002""|""π-Calculus and Foundations of Concurrent Systems (CIS 700) 2004""|""Advanced Topics in PL: Safety and Security (CIS 670) 2003""",NA,NA,"""Hardware-enforced Comprehensive Memory Safety""^""Santosh Nagarakatte, Milo M K Martin, and Steve Zdancewic. Hardware-enforced Comprehensive Memory Safety. IEEE MICRO's ""Top Picks of Architecture Conferences of 2012"" Issue (Micro Top Picks 202013), May/June 2013.""|""Watchdog: Hardware for Safe and Secure Manual Memory Management and Full Memory Safety.""^""Santosh Nagarakatte, Milo M. K. Martin, and Steve Zdancewic. Watchdog: Hardware for Safe and Secure Manual Memory Management and Full Memory Safety. In Proceedings of the 39th International Symposium on Computer Architecture (ISCA), June 2012.""|""Formalizing the LLVM Intermediate Representation for Verified Program Transformations.""^""Jianzhou Zhao, Santosh Nagarakatte, Milo M. K. Martin, and Steve Zdancewic. Formalizing the LLVM Intermediate Representation for Verified Program Transformations. In Proc. of the ACM Symposium on Principles of Programming Languages (POPL), 2012.""|""Mechanized Verification of Computing Dominators for Formalizing Compilers.""^""Jianzhou Zhao and Steve Zdancewic. Mechanized Verification of Computing Dominators for Formalizing Compilers. In The Second International Conference on Certified Programs and Proofs (CPP), Lecture Notes in Computer Science, pages 27--42, 2012.""|""Dependent Ineroperability.""^""Peter-Michael Osera, Vilhelm Sjöberg, and Steve Zdancewic. Dependent Ineroperability. In The Sixth ACM SIGPLAN Workshop on Programming Languages meets Program Verification (PLPV), 2012.""","""Chung-Kil Hur""|""Dmitri Garbuzov""|""Jeehoon Kang""|""Jianzhou Zhao""|""Milo M. K. Martin""|""Peng Li""|""Peter-Michael Osera""|""Santosh Nagarakatte""|""Viktor Vafeiadis""|""William Mansky""","""Nicolas Koh""|""Robert Rand""|""Jennifer Paykin""|""Peter-Michael Osera""|""Jianzhou Zhao""|""Karl Mazurak""|""Jeff Vaughan""|""Peng Li""|""Stephen Tse"""
fac_33,"""Max von Hippel""^""Max von Hippel (PhD)""|""Georgios Giantamidis ""^""Georgios Giantamidis (PhD)""",NA,"""System Specification, Verification, and Synthesis, CS 4830/7485, Fall 2019""|""Logic and Computation, CS 2800, Fall 2019""|""Logic and Computation, CS 2800, Spring 2019""",NA,NA,NA,NA,"""Eunsuk Kang""|""Viorel Preoteasa""|""Iulia Dragomir""|""Christos Stergiou""|""Srinivas Pinisetty""|""Maria Pittou""|""Antonio Iannopollo""|""Benjamin Caulfield""|""Ben Lickly""|""Chris Shaver""|""Nazha Abed""|""Moez Krichen""|""Christos Sofronis""|""Adrian Curic""|""Norman Scaife""|""Aude Maignan"""
fac_34,"""David Thien""^""David Thien (PhD student, co-advised with Deian Stefan, started 2019)""|""Yousef Alhessi""^""Yousef Alhessi (PhD student, started 2018)""|""Alex Sanchez-Stern""^""Alex Sanchez-Stern (PhD student, started 2016)""|""John Sarracino""^""John Sarracino (PhD student, started 2014)""","""Interactive Parser Synthesis by Example""^""Interactive Parser Synthesis by Example (PLDI 2015)   with Alan Leung and John Sarracino.""|""Automating Formal Proofs for Reactive Systems ""^""Automating Formal Proofs for Reactive Systems (PLDI 2014)   with Daniel Ricketts, Valentin Robert, Dongseok Jang and Zachary Tatlock""|""Verifying GPU Kernels By Test Amplification""^""Verifying GPU Kernels By Test Amplification (PLDI 2012)   with Alan Leung, Manish Gupta, Yuvraj Agarwal, Rajesh Gupta and Ranjit Jhala""|""Taming Wildcards in Java's Type System""^""Taming Wildcards in Java's Type System (PLDI 2011)   with Ross Tate and Alan Leung""|""Bringing Extensibility to Verified Compilers""^""Bringing Extensibility to Verified Compilers (PLDI 2010)   with Zachary Tatlock""|""Proving Optimizations Correct using Parameterized Program Equivalence""^""Proving Optimizations Correct using Parameterized Program Equivalence (PLDI 2009)   with Sudipta Kundu, and Zachary Tatlock""|""Staged Information Flow for JavaScript""^""Staged Information Flow for JavaScript (PLDI 2009)   with Ravi Chugh, Jeffrey A. Meister, and Ranjit Jhala""|""Dataflow Analysis for Concurrent Programs using Datarace Detection""^""Dataflow Analysis for Concurrent Programs using Datarace Detection (PLDI 2008)   with Ravi Chugh, Jan Voung, and Ranjit Jhala""|""Automatic Inference of Optimizer Flow Functions from Semantic Meanings ""^""Automatic Inference of Optimizer Flow Functions from Semantic Meanings (PLDI 2007)   with Erika Rice Scherpelz and Craig Chambers""|""Automatically Proving the Correctness of Compiler Optimizations""^""Automatically Proving the Correctness of Compiler Optimizations (PLDI 2003, Best Paper Award)   with Todd Millstein, and Craig Chambers""|""ESP:Path-Sensitive Program Verification in Polynomial Time""^""ESP:Path-Sensitive Program Verification in Polynomial Time (PLDI 2002)   with Manuvir Das and Mark Seigle""","""CSE 8A: Introduction to Programming Fall 19""|""CSE 130: Undergraduate Programming Languages Fall 18 Past Winter 2007 Winter 2008 Winter 2009 Winter 2010 Fall 2010 Winter 2011 Winter 2012 Winter 2013 Spring 2013 Fall 2013 Fall 2014 Winter 2015 Winter 2016 Fall 2016 Fall 2017""|""CSE 231: Graduate Compilers Winter 20 Past Fall 2006 Fall 2007 Fall 2008 Fall 2009 Spring 2011 Fall 2011 Fall 2012 Spring 2014 Spring 2015 Fall 2015 Winter 2017 Winter 2018 Winter 2019""|""CSE 230: Graduate Programming Languages Fall 18 Past Fall 2017""|""CSE 291: Applied Automated Theorem Proving Spring 10 Past Winter 2006 Spring 2008""|""CSE 291: Power and Programming Languages Spring 09""|""CSE 291: Software Reliability Methods Spring 06""","""Automatically Proving the Correctness of Compiler Optimizations""^""Automatically Proving the Correctness of Compiler Optimizations (PLDI 2003, Best Paper Award)   with Todd Millstein, and Craig Chambers""",NA,"""Establishing Browser Security Guarantees through Formal Shim Verification (USENIX Security 2012)""^""Establishing Browser Security Guarantees through Formal Shim Verification (USENIX Security 2012) with Dongseok Jang and Zachary Tatlock""|""Verifying GPU Kernels By Test Amplification (PLDI 2012)""^""Verifying GPU Kernels By Test Amplification (PLDI 2012) with Alan Leung, Manish Gupta, Yuvraj Agarwal, Rajesh Gupta and Ranjit Jhala""|""WitchDoctor: IDE support for real-time auto-completion of refactorings (ICSE 2012)""^""WitchDoctor: IDE support for real-time auto-completion of refactorings (ICSE 2012) with Stephen R. Foster and William G. Griswold""","""Alan Leung""|""Craig Chambers""|""Daniel Ricketts""|""Dongseok Jang""|""Erika Rice Scherpelz""|""Jan Voung""|""Jeffrey A. Meister""|""John Sarracino""|""Manish Gupta""|""Manuvir Das""|""Mark Seigle""|""Rajesh Gupta""|""Ranjit Jhala""|""Ravi Chugh""|""Ross Tate""|""Sudipta Kundu""|""Todd Millstein""|""Valentin Robert""|""Yuvraj Agarwal""|""Zachary Tatlock""","""Valentin Robert""|""Dimitar Bounov""|""Alan Leung""|""Daniel Ricketts""|""Stephen Foster""|""Zachary Tatlock""|""Dongseok Jang""|""Ross Tate""|""Mike Stepp""|""Sudipta Kundu""|""Macneil Shonle""|""Jan Wen Voung"""
fac_35,"""Mohnish Pattathurajan""|""Radosław Piórkowski""|""Robert Bartold""|""Piotr Hofman""|""Wojciech Czerwiński""",NA,"""Masters seminar Logic and theory of computation""|""Tutorials on Complexity theory""|""lecture Infinite-state systems (2018/19)""|""lecture Infinite alphabets (2016/17) (together with Mikołaj Bojańczyk)""|""lecture Languages, automata and computation (2015/16)""|""lecture Computer aided verification (2015/16)""|""Foundations of mathematics (2015/16)""|""lecture Algorithmic concurrency theory (2013/14)""|""lab Concurrent and distributed programming (2013/14):""|""lecture Introduction to model-checking (2013)""|""Masters seminar Reliability of concurrent and object-oriented systems""|""lecture Concurrency (2012/13)""|""lecture Decision problems for infinite-state systems (2011/12)""","""The Reachability Problem for Petri Nets is Not Elementary""^""W. Czerwiński, S. Lasota, R. Lazic, J. Leroux, F. Mazowiecki, The Reachability Problem for Petri Nets is Not Elementary. STOC'19.""","""CSL 2021""|""RP 2020""|""CIAA 2020""|""GandALF 2020""|""FoSSaCS 2020""|""GandALF 2019""|""LICS 2019""|""RP 2018""|""MOVEP 2018""|""CSL 2018""|""LATIN 2018""|""MFCS 2017""|""FoSSaCS 2017""|""FSTTCS 2016""|""RP 2016""|""MFCS 2016""|""STACS 2016""|""RP 2015 (PC co-chair and co-organizer)""|""Highlights 2015""|""FoSSaCS 2015""|""ICALP 2014""|""FoSSaCS 2014""|""Express/SOS 2013""|""DLT 2013""|""Nominal sets meet automata theory (co-organizer)""|""RP 2010""|""IIS 2010""|""Express 2009""","""Fraenkel-Mostowski sets with non-homogeneous atoms^""M. Bojańczyk, S. Lasota, Fraenkel-Mostowski sets with non-homogeneous atoms. RP 2012. [ PDF ] [ BibTex entry ]""|""Partially-commutative context-free languages.""^""W. Czerwiński, S. Lasota, Partially-commutative context-free languages. EXPRESS 2012. [ BibTex entry ] [ on-line version ]""|""Reachability problem for weak multi-pushdown automata. C""^""W. Czerwiński, P. Hofman, S. Lasota, Reachability problem for weak multi-pushdown automata. CONCUR 2012. [ PDF (full version) ] [ BibTex entry ]""|""A machine-independent characterization of timed languages.""^""M. Bojańczyk, S. Lasota, A machine-independent characterization of timed languages. ICALP 2012. [ PDF ] [ BibTex entry ]""|""Towards nominal computation.""^""M. Bojańczyk, L. Braud, B. Klin, S. Lasota, Towards nominal computation. POPL 2012. [ PDF ] [ BibTex entry ]""|""An extension of data automata that captures XPath. Lo""^""M. Bojańczyk, S. Lasota, An extension of data automata that captures XPath. Logical Methods in Computer Science 8 (1:5), 2012. [ arXiv report ] [ BibTex entry ] [ on-line version ]""|""Tav4SB: integrating tools for analysis of kinetic models of biological systems.""^""P. Banasik, A. Gambin, S. Lasota, M. Lula, M. Rybiński, Tav4SB: integrating tools for analysis of kinetic models of biological systems. BMC Systems Biology 6:25, 2012. [ on-line version ] [ BibTex entry ]""|""Efficient alternatives to PSI-BLAST.""^""M. Startek, S. Lasota, M. Sykulski, A. Bulak, L. Noe, G. Kucherov, A. Gambin, Efficient alternatives to PSI-BLAST. Bulletin of the Polish Academy of Sciences: Technical Sciences , 60(3):495-505, 2012. [ PDF ]""",NA,NA
fac_36,"""Guangpu Li""|""Chengcheng Wan""|""Shu Wang""|""Junwen Yang""|""Lefan Zhang""|""Bogdan Stoica""","""DFix: Automatically Fixing Timing Bugs in Distributed Systems""^""DFix: Automatically Fixing Timing Bugs in Distributed Systems   Guangpu Li, Haopeng Liu, Xianglan Chen, Haryadi Gunawi, Shan Lu.   40th ACM SIGPLAN Conference on Programming Language Design and Implementation, 2019 (PLDI 2019)""|""Understanding and detecting real-world performance bugs""^""Understanding and detecting real-world performance bugsGuoliang Jin, Linhai Song, Xiaoming Shi, Joel Scherpelz, Shan Lu   Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation, 2012 (PLDI 2012)""|""Automated atomicity-violation fixing""^""Automated atomicity-violation fixingGuoliang Jin, Linhai Song, Wei Zhang, Shan Lu, Ben Liblit   Proceedings of the 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation 2011 (PLDI 2011)""","""CMSC 331001, Advanced Operating Systems, Winter 2020 ""|""CMSC 22001, Software Construction, Fall 2019""|""MPCS52030, Operating Systems""","""Efficient and Scalable Thread-Safety Violation Detection --- Finding thousands of concurrency bugs during testing""^""Efficient and Scalable Thread-Safety Violation Detection --- Finding thousands of concurrency bugs during testing   Guangpu Li, Shan Lu, Madan Musuvathi, Suman Nath, and Rohan Padhye.   The Symposium on Operating Systems Principles (SOSP 2019). ""|""Understanding Real-World Timeout Problems in Cloud Server Systems""^""Understanding Real-World Timeout Problems in Cloud Server Systems   Ting Dai, Jingzhu He, Xiaohui Gu, Shan Lu   IEEE International Conference on Cloud Engineering, 2018 (IC2E 2018).""|""Early Detection of Configuration Errors to Reduce Failure Damage""^""Early Detection of Configuration Errors to Reduce Failure Damage [preprint]   Tianyin Xu, Xinxin Jin, Peng Huang, Yuanyuan Zhou, Shan Lu, Long Jin, Shankar Pasupathy   12th USENIX Symposium on Operating Systems Design and Implementation (OSDI 2016).""|""A Study of Linux File System Evolution""^""A Study of Linux File System Evolution   Lanyue Lu, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau, and Shan Lu   11th USENIX Conference on File and Storage Technologies (FAST 2013)""|""View-Centric Performance Optimization for Database-Backed Web Applications""^""View-Centric Performance Optimization for Database-Backed Web Applications   Junwen Yang, Cong Yan, Chengcheng Wan, Shan Lu, and Alvin Cheung   41st International Conference on Software Engineering, 2019 (ICSE 2019).   Won ACM SIGSOFT Distinguished Paper Award""|""CARAMEL: Detecting and Fixing Performance Problems That Have Non-Intrusive Fixes""^""CARAMEL: Detecting and Fixing Performance Problems That Have Non-Intrusive Fixes [preprint]   Adrian Nistor, Po-Chun Chang, Cosmin Radoi, and Shan Lu   37th International Conference on Software Engineering (ICSE 2015)""|""AI: a lightweight system for tolerating concurrency bugs""^""AI: a lightweight system for tolerating concurrency bugsMingxing Zhang, Yongwei Wu, Shan Lu, Shanxiang Qi, Jinglei Ren, Weimin Zheng   Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, 2014 (FSE 2014)""","""OSDI 2010""|""USENIX ATC 2010""|""RV 2012""|""OSDI 2012""|""SOSP 2013""|""PLDI 2013""|""Eurosys 2013""|""DSN 2013""|""APSYS 2013""|""ASPLOS 2014""|""OSDI 2014 (ERC)""|""PLDI 2014 (ERC)""|""OOPSLA 2014""|""USENIX 2014""|""ISMM 2014""|""CCGrid 2014""|""HotOS""|""PLDI""|""SOSP""|""USENIX ATC 2015 (Program Co-Chair)""|""PLOS 2015 (Program Chair)""|""2016: OSDI, ASPLOS (ERC)""|""2017: ASPLOS, PLDI, SOSP""|""2018: ASPLOS, APSys (Program Co-Chair)""|""2019: ASPLOS, HotOS""|""2020: OSDI (Program Co-Chair)""|""2015 -- 2019: Vice Chair of ACM SIGOPS""|""2019 -- : Chair of ACM SIGOPS""","""Automated Concurrency-Bug Fixing""^""Automated Concurrency-Bug Fixing Guoliang Jin, Wei Zhang, Dongdong Deng, Ben Liblit, and Shan Lu. 10th USENIX Symposium on Operating Systems Design and Implementation (OSDI 2012).""|""Understanding the Interleaving-Space Overlap across Inputs and Software Versions""^""Understanding the Interleaving-Space Overlap across Inputs and Software Versions Dongdong Deng, Wei Zhang, Borui Wang, Peisen Zhao, and Shan Lu. 4th USENIX Workshop on Hot Topics in Parallelism (HotPar 2012).""|""Understanding and detecting real-world performance bugs""^""Understanding and detecting real-world performance bugs Guoliang Jin, Linhai Song, Xiaoming Shi, Joel Scherpelz, Shan Lu Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation, 2012 (PLDI 2012)""|""Applying transactional memory to concurrency bugs""^""Applying transactional memory to concurrency bugs Haris Volos, Andres Jaan Tack, Michael M. Swift, Shan Lu Proceedings of the seventeenth international conference on Architectural Support for Programming Languages and Operating Systems, 2012 (ASPLOS XVII)""|""Detecting Concurrency Bugs From the Perspectives of Synchronization Intentions""^""Detecting Concurrency Bugs From the Perspectives of Synchronization Intentions Shan Lu, Soyeon Park, and Yuanyuan Zhou. IEEE Transactions on Parallel and Distributed Systems (Volume 23, Issue 6, June 2012) (TPDS).""","""Ben Liblit""|""Guangpu Li""|""Guoliang Jin""|""Haopeng Liu""|""Haryadi Gunawi""|""Joel Scherpelz""|""Linhai Song""|""Wei Zhang""|""Xianglan Chen""|""Xiaoming Shi""","""Yuxi Chen""|""Haopeng Liu""|""Linhai Song""|""Guoliang Jin""|""Adrian Nistor""|""Wei Zhang""|""Rui Gu""|""Dongdong Deng""|""Po-Chun Chang""|""Joy Arulraj""|""Aaron Gravesdale""|""Joel Sherpelz"""
fac_37,"""Steven Lyubomirsky""|""Chandrakana Nandi1""|""Pavel Panchekha""|""Jared Roesch""|""James R. Wilcox""|""Doug Woos""","""Verifying that Web Pages have Accessible Layout""^""PLDI 18	Verifying that Web Pages have Accessible Layout Pavel Panchekha, Adam Geller, Michael D. Ernst, Zachary Tatlock, Shoaib Kamil""|""Finding Root Causes of Floating Point Error""^""PLDI 18	Finding Root Causes of Floating Point Error Alex Sanchez-Stern, Pavel Panchekha, Sorin Lerner, Zachary Tatlock""|""Verified Peephole Optimizations for CompCert""^""PLDI 16	Verified Peephole Optimizations for CompCert Eric Mullen, Daryl Zuniga, Zachary Tatlock, Dan Grossman""|""Automatically Improving Accuracy for Floating Point Expressions""^""PLDI 15	Automatically Improving Accuracy for Floating Point Expressions Pavel Panchekha, Alex Sanchez-Stern, James R. Wilcox, Zachary Tatlock""|""Verdi: A Framework for Implementing and Formally Verifying Distributed Systems""^""PLDI 15	Verdi: A Framework for Implementing and Formally Verifying Distributed Systems James R. Wilcox, Doug Woos, Pavel Panchekha, Zachary Tatlock, Xi Wang, Michael D. Ernst, Tom Anderson""|""Automating Formal Proofs for Reactive Systems""^""PLDI 14	Automating Formal Proofs for Reactive Systems Daniel Ricketts, Valentin Robert, Dongseok Jang, Zachary Tatlock, Sorin Lerner""|""Bringing Extensibility to Verified Compilers""^""PLDI 10	Bringing Extensibility to Verified Compilers Zachary Tatlock, Sorin Lerner""|""Proving Optimizations Correct Using Parameterized Program Equivalence""^""PLDI 09	Proving Optimizations Correct Using Parameterized Program Equivalence Sudipta Kundu, Zachary Tatlock, Sorin Lerner""","""Spring 2020,CSE 505: Graduate Programming Languages""|""Winter 2020,CSE 341: Programming Languages""|""Spring 2019,CSE P505: Graduate Programming Languages""|""Winter 2019,CSE 341: Programming Languages""|""Fall 2018,CSE 505: Graduate Programming Languages""|""Spring 2018,CSE 331: Software Design and Implementation""|""Winter 2018,CSE 341: Programming Languages""|""Fall 2017,CSE 505: Graduate Programming Languages""|""Spring 2017,CSE 599Z: Accurate Computing""|""Winter 2017,CSE 331: Software Design and Implementation""|""Fall 2016,CSE 505: Graduate Programming Languages""|""Spring 2016,CSE 599W: Systems Verification""|""Winter 2016,CSE 331: Software Design and Implementation""|""Fall 2015,CSE 505: Graduate Programming Languages""|""Spring 2015,CSE 341: Programming Languages""|""Winter 2015,CSE 505: Graduate Programming Languages""|""Spring 2014,CSE 341: Programming Languages""|""Winter 2014,CSE 506: Proof Assistants""|""Fall 2013,CSE 505: Graduate Programming Languages""",NA,"""PLDI 2019 Program Committee""|""CPP 2019 Program Committee""|""ITP 2018 Program Committee""|""POPL 2018 Program Committee""|""Onward! 2017 Program Committee""|""Splash 2017 Doctoral Symposium Program Committee""|""PLDI 2016 Program Committee""|""CPP 2016 Program Committee""|""CoqPL 2015 Program Committee""",NA,"""Adam Geller""|""Alex Sanchez-Stern""|""Dan Grossman""|""Daniel Ricketts""|""Daryl Zuniga""|""Dongseok Jang""|""Doug Woos""|""Eric Mullen""|""James R. Wilcox""|""Michael D. Ernst""|""Pavel Panchekha""|""Shoaib Kamil""|""Sorin Lerner""|""Sudipta Kundu""|""Tom Anderson""|""Valentin Robert""|""Xi Wang""","""Konstantin Weitz""|""Eric Mullen""|""Stuart Pernsteiner"""
fac_38,"""Charlie Murphy""|""Jake Silverman""|""Shaowei Zhu""","""Compositional Recurrence Analysis Revisited with Jason Breck, Ashkan Boroujeni, and Tom Reps""^""Compositional Recurrence Analysis Revisited  with Jason Breck, Ashkan Boroujeni, and Tom Reps. PLDI 2017.""","""Spring 2019 - COS 320: Compiling techniques""|""Fall 2018 - COS 516 / ELE 516: Automated Reasoning about Software""|""Spring 2018 - COS IW 06: Little Languages and COS IW 07: Practical Solutions to Intractable Problems""|""Spring 2017 - COS IW 08: Practical solutions to intractable problems.""|""Fall 2016 - COS 597D: Reasoning about concurrent systems""",NA,"""CAV 2020: Program Committee""|""OBT 2018: Program Committee""|""CAV 2018: Program Committee""|""CAV 2017: Program Committee""|""VSTTE 2017: Program Committee.""|""PLDI 2017: Program Committee""|""POPL 2017: Program Committee""|""CAV 2016: Workshop chair/Program Committee""|""TACAS 2016: Program Committee""|""SSS 2015: Program Committee""|""Tiny Transactions on Computer Science vol. 3.: Program Committee""","""Verification of parameterized concurrent programs by modular reasoning about data and control""^""Verification of parameterized concurrent programs by modular reasoning about data and control with Azadeh Farzan. POPL 2012.""","""Jason Breck""|""Ashkan Boroujeni""|""Tom Reps""",NA
fac_39,"""Phillip Hilliard""|""Soonbo Han""|""Yi Zhang""|""Nan Zheng""","""Data-Trace Types for Distributed Stream Processing Systems""^""Data-Trace Types for Distributed Stream Processing Systems. With Konstantinos Mamouras, Caleb Stanford, Rajeev Alur, Val Tannen. PLDI 2019.""|""Modular Specification and Efficient Evaluation of Quantitative Queries over Streaming Data""^""Modular Specification and Efficient Evaluation of Quantitative Queries over Streaming Data. With Kostas Mamouras, Mukund Raghothaman, Rajeev Alur, Sanjeev Khanna. PLDI 2017""","""Spring 2020: CIS 545, Big Data Analytics""|""Fall 2017: CIS 455/555, Internet and Web Systems""|""Spring 2017: CIS 700-003, Big Data Analytics.""|""Fall 2016: CIS 455/555, Internet and Web Systems""|""Spring 2016: CIS 450/550, Database and Information Systems""|""Fall 2015: CIS 455/555, Internet and Web Systems""|""Spring 2015: CIS 455/555, Internet and Web Systems""|""Fall 2014: NETS 212, Scalable and Cloud Computing""|""Spring 2014: CIS 650, Implementing Data Management Systems""|""Fall 2013: CIS 450/550, Database and Information Systems.""|""Spring 2012: MKSE 150, Market and Social Systems on the Internet""|""Fall 2011: CIS 550, Database and Information Systems""|""Spring 2011: MKSE 150, Market and Social Systems on the Internet, with Sampath Kannan""|""Fall 2010: CIS 399/002 (MKSE 212 pilot offering), Scalable and Cloud Computing, with Andreas Haeberlen""|""Spring 2010: CIS 555, Internet and Web Systems""|""Fall 2008: CIS 650, Implementing Data Management Systems.""","""Active Learning in Keyword Search-Based Data Integration""^""Active Learning in Keyword Search-Based Data Integration. With Zhepeng Yan, Nan Zheng, Partha Pratim Talukdar, and Cong Yu. VLDB Journal Special Issue on Best Papers of VLDB 2013.""|""Recomputing Materialized Instances after Changes to Mappings and Data, with Todd J Green""^""Recomputing Materialized Instances after Changes to Mappings and Data, with Todd J Green. ICDE 2012. Runner-up, Best paper award. Invited to TKDE Special Issue on Best Papers of ICDE 2012.""|""Maintaining Recursive Views of Regions and Connectivity in Networks""^""Maintaining Recursive Views of Regions and Connectivity in Networks, with Mengmeng Liu, Nicholas Taylor, Wenchao Zhou, and Boon Thau Loo. IEEE TKDE Special Issue, \""Best Papers of ICDE 2008\""""",NA,"""REX: Recursive, Delta-Based Data-Centric Computation""^""REX: Recursive, Delta-Based Data-Centric Computation, with Svilen Mihaylov and Sudipto Guha. Proc. VLDB 5(11): 1280-1291. VLDB 2012.""|""Querying Provenance for Ranking and Recommending""^""Querying Provenance for Ranking and Recommending, with Andreas Haeberlen, Tao Feng, Wolfgang Gatterbauer. TaPP 2012.""|""Recomputing Materialized Instances after Changes to Mappings and Data""^""Recomputing Materialized Instances after Changes to Mappings and Data, with Todd J Green. ICDE 2012. Runner-up, Best paper award. Invited to TKDE Special Issue on Best Papers of ICDE 2012.""","""Caleb Stanford""|""Konstantinos Mamouras""|""Mukund Raghothaman""|""Rajeev Alur""|""Sanjeev Khanna""|""Val Tannen""","""Marie Jacob Rajan""|""Dr. Allen Zhepeng Yan""|""Dr. Mengmeng Liu""|""Dr. Svilen Mihaylov""|""Dr. Nicholas Taylor""|""Dr. Partha Pratim Talukdar""|""Dr. Todd J. Green""|""Dr. Grigoris Karvounarakis"""
fac_40,"""George Kastrinis""|""Anastasis Antoniadis""","""""Ethainter: A Smart Contract Security Analyzer for Composite Vulnerabilities"" (PLDI 2020)""|""""Static Analysis of Java Enterprise Applications: Frameworks and Caches, the Elephants in the Room"" (PLDI 2020)""|""""Symbolic Reasoning for Automatic Signal Placement"" (PLDI 2018)""|""""Introspective Analysis: Context-Sensitivity, Across the Board"" (PLDI 2014)""|""""Hybrid Context Sensitivity for Points-To Analysis"" (PLDI 2013)""|""""Resolving and Exploiting the k-CFA Paradox: Illuminating Functional vs. Object-Oriented Program Analysis"" (PLDI 2010)""|""""Expressive and Safe Static Reflection with MorphJ"" (PLDI 2008)""|""""Taming the Wildcards: Combining Definition- and Use-Site Variance"" (PLDI 2011)""|""""A New Java Runtime for a Parallel World"" (PLDI 2010 FIT)""","""Advanced Compilers and Static Analysis (Spring 2019, Spring 2020)""|""Compilers (Spring 2011,Spring 2012,Spring 2013,Spring 2014,Spring 2015,Spring 2016,Fall 2017,Spring 2019,Spring 2020)""|""OO Languages and Systems/Advanced Programming Techniques (Fall 2010, Fall 2011, Fall 2012, Fall 2013, Fall 2014, Fall 2015, Fall 2017, Fall 2018, Fall 2019)""|""Operating Systems (Fall 2017)""|""Systems Programming (Spring 2014,Spring 2015,Spring 2016)""|""SE (Spring 2011,Spring 2012,Spring 2013)""|""SE (Spring 2009)""|""OO Languages and Systems (Fall 2009, Spring 2009, Spring 2008, Spring 2007, Fall 2005, Fall 2004, Fall 2003, Fall 2002, Fall 2001)""|""Graduate Seminar (Spring 2007, Fall 2008)""|""Distributed Systems (Fall 2006, Fall 2007)""|""Intro OO (Fall 2005, Spring 2005)""|""Advanced OS (Spring 2004, Spring 2003, Spring 2002, Spring 2001, Spring 2000)""|""Memory Management (Fall 2000)""",NA,"""HOPL IV (2021)""","""""Java Wildcards Meet Definition-Site Variance"" (ECOOP 2012)""|""""PQL: A Purely-Declarative Java Extension for Parallel Programming"" (ECOOP 2012)""|""""Declarative Datalog Debugging for Mere Mortals"" (Datalog 2.0 2012)""|""""Residual Investigation: Predictive and Precise Bug Detection"" (ACM TOSEM)""|""""Sound Predictive Race Detection in Polynomial Time"" (POPL 2012)""",NA,"""Brian McNamara""|""Eli Tilevich""|""Christoph Csallner""|""Shan Shan Huang""|""John Altidor""|""Kaituo Li""|""Aggelos Biboudis""|""George Balatsouras"""
fac_41,"""Forrest Briggs""|""Yuanli Pei""","""Taming compiler fuzzers""^""Yang Chen, Alex Groce, Chaoqiang Zhang, Weng-Keen Wong, Xiaoli Fern, Eric Eide, John Regehr: Taming compiler fuzzers. ACM SIGPLAN Programming Language Design and Implementation (PLDI) 2013""","""CS434: Introduction to Machine Learning and Data Mining Fall 2012""|""CS519 IGERT Ecosystem Informatics""|""CS534 Machine Learning Spring 2012""|""CS325 Analysis of Algorithms Winter 2012""",NA,"""ICML""|""ECML""|""AAAI""|""KDD""|""ICDM""|""SIAM""|""SDM""","""Visual appearance of display ads and its effect on click through rate.""^""Javad Azimi, Ruofei Zhang, Yang Zhou, Vidhya Navalpakkam, Jianchang Mao, Xiaoli Fern, Visual appearance of display ads and its effect on click through rate. CIKM 2012: 495-504""|""Batch Active Learning via Coordinating Matching""^""Javad Azimi, Alan Fern, Xiaoli Fern. Glencora  Borradaile,Brent Heeringa, Batch Active Learning via Coordinating  Matching, ICML 2012. pdf""|""Hybrid Batch Bayesian Optimization""^""Javad Azimi, Ali Jalali, Xiaoli Fern, Hybrid Batch Bayesian Optimization, ICML 2012.  pdf""|""Rank Loss Support Instance Machines for MIML Instance Annotation""^""Forrest Briggs, Xiaoli Fern and Raviv Raich, Rank Loss Support Instance Machines for MIML Instance Annotation, KDD 2012. pdf""|""The Impact of Visual Appearance on User Response in Online Display Advertising""^""Javad Azimi, Bruce Zhang, Yang  Zhou, Vidhya Navalpakkam, Jianchang Mao, Xiaoli Fern, The Impact of Visual Appearance on User Response in Online Display Advertising, WWW 2012 (poster).  pdf""|""Constructing Training for Outlier Detection""^""Li-ping Liu and Xiaoli Z Fern, Constructing Training Set for Outlier Detection, SDM 2012, pdf""|""Regularized Joint Density Estimation for Multi-Instance Learning""^""Behrouz Behmardi, Forrest Briggs, Xiaoli Z. Fern, and Raviv Raich, Regularized Joint Density Estimation for Multi-Instance Learning, IEEE Statistical Signal Processing Workshop 2012""","""Yang Chen""|""Alex Groce""|""Chaoqiang Zhang""|""Weng-Keen Wong""|""Eric Eide""|""John Regehr""","""Sicheng Xiong""|""Javad Azimi""|""Wei Lin""|""Akshat Suave""|""Anshul Dube""|""Arunkumar Puppala""|""Chaitanya Komireddy"""
fac_42,"""Hugo Illous""","""A Static Analyzer for Large Safety-Critical Software""^""A Static Analyzer for Large Safety-Critical Software. Bruno Blanchet, Patrick Cousot, Radhia Cousot, Jérôme Feret, Laurent Mauborgne, Antoine Miné, David Monniaux & Xavier Rival. In ACM Programming Language Design and Implementation (PLDI 2003).""","""Semantics and application to verification Course""|""Abstract Interpretation course""|""Protocol Safety and Verification""|""Program Verification, Experimental Course""|""\""Programmation Avancée\"" (Advanced Programming)""",NA,"""APLAS 2015, Pohang, South Korea, December 2015""|""SAS 2014, Münich, Germany, September 2014""|""VMCAI 2014, San Diego, USA, January 2014""|""POPL 2014, San Diego, USA, January 2014""","""Hierarchical Abstraction of Dynamic Structures.""^""Hierarchical Abstraction of Dynamic Structures. Pascal Sotin and Xavier Rival. In Asian Conference on Programming Languages And Software 2012.""|""An Abstract Domain to Infer Types over Zones in Spreadsheets.""^""An Abstract Domain to Infer Types over Zones in Spreadsheets. Tie Cheng and Xavier Rival. In Static Analysis Symposium (SAS 2012).""","""Antoine Miné""|""Bruno Blanchet""|""David Monniaux""|""Jérôme Feret""|""Laurent Mauborgne""|""Patrick Cousot""|""Radhia Cousot""","""Tie Cheng""|""Arlen Cox""|""Huisong Li""|""Jiangchao Liu"""
fac_43,"""Hoang Nguyen""|""NGUYEN Duc Than""|""Dongge Liu""|""Renlord Yang""|""Robert Sison""",NA,"""SWEN90010 - High Integrity Systems Engineering (Semester 1)""|""SWEN90006 - Software Security & Testing (Semester 2)""|""COMP90038 - Algorithms and Complexity (Semester 2)""|""COMP4161 - Advanced Topics in Software Verification (2010, 2011, 2012, 2013, 2014 as Lecturer in Charge, 2015)""|""COMP9241 - Advanced Operating Systems (Guest lecturer in Operating Systems Security, 2011, 2012, 2013, 2014, 2015)""|""Separation Logic""|""Software Model Checking for C code using CBMC""",NA,"""CSF 2021""|""SecDev 2020""|""PLDI 2020 (ERC)""|""CSF 2020""|""POST 2020""|""ESOP 2020""|""ICISS 2020""|""FTfJP 2019 (Co-Chair)""|""SecDev 2019""|""ENTROPY 2019""|""FCT 2019""|""CPP 2019""|""ICFEM 2018 Doctoral Symposium""|""OCAP 2018""|""IEEE SecDev 2018""|""iFM 2018""|""IEEE SecDev 2017""|""OCAP 2017""|""CSF 2017""|""FCS 2017""|""TMPA 2017""|""EuroS&P 2017""|""CRTS 2016""|""PLAS 2016 (Co-Chair)""|""CRTS 2015""|""SSV 2015 (Co-Chair)""|""PLAS 2015""|""POPL 2015 (External Review Committee)""|""SSV 2014""|""CPP 2013""|""SSV 2012""|""DCDP 2010""",NA,NA,"""Daniel Matichuk""|""David (Knobby) Clarke""|""Yude Lin""|""Sidney Amani""|""Japheth Lim""|""Sudeep Kanav"""
fac_44,"""Steven Holtzen""|""Siva Kesava""|""Reddy Kakarla""|""Lun Liu""|""Saswat Padhi""|""Aishwarya Sivaraman""|""Alan Tang""","""Accelerating Sequential Consistency for Java with Speculative Compilation""^""Accelerating Sequential Consistency for Java with Speculative Compilation (PLDI 2019)   Lun Liu, Todd Millstein, Madanlal Musuvathi""|""Network Configuration Synthesis with Abstract Topologies""^""Network Configuration Synthesis with Abstract Topologies (PLDI 2017)   Ryan Beckett, Ratul Mahajan, Todd Millstein, Jitendra Padhye, David Walker""|""Network Configuration Synthesis with Abstract Topologies""^""Network Configuration Synthesis with Abstract Topologies (PLDI 2017)   Ryan Beckett, Ratul Mahajan, Todd Millstein, Jitendra Padhye, David Walker""|""Data-Driven Precondition Inference with Learned Features""^""Data-Driven Precondition Inference with Learned Features (PLDI 2016, Winner of the Invariant Synthesis track in both the 2017 and 2018 Syntax Guided Synthesis Competition)   Saswat Padhi, Rahul Sharma, Todd Millstein""|""A Case for an SC-Preserving Compiler""^""A Case for an SC-Preserving Compiler (PLDI 2011)   Daniel Marino, Abhayendra Singh, Todd Millstein, Madanlal Musuvathi, Satish Narayanasamy""|""A Simple and Efficient Memory Model for Concurrent Programming Languages""^""A Simple and Efficient Memory Model for Concurrent Programming Languages (PLDI 2010)   Daniel Marino, Abhayendra Singh, Todd Millstein, Madanlal Musuvathi, Satish Narayanasamy""|""Reliable and Efficient Programming Abstractions for Wireless Sensor Networks""^""Reliable and Efficient Programming Abstractions for Wireless Sensor Networks (PLDI 2007)   Nupur Kothari, Ramakrishna Gummadi, Todd Millstein, Ramesh Govindan""|""Semantic Type Qualifiers""^""Semantic Type Qualifiers (PLDI 2005)   Brian Chin, Shane Markstrum, Todd Millstein""|""Automatically Proving the Correctness of Compiler Optimizations""^""Automatically Proving the Correctness of Compiler Optimizations (PLDI 2003, Best Paper Award)   Sorin Lerner, Todd Millstein, Craig Chambers""|""Automatic Predicate Abstraction of C Programs ""^""Automatic Predicate Abstraction of C Programs (PLDI 2001, 2011 Most Influential PLDI Paper Award)   Thomas Ball, Rupak Majumdar, Todd Millstein, Sriram Rajamani""","""CS30: Principles and Practices of Computing""|""CS131: Programming Languages""|""CS231: Types and Programming Languages""|""CS239: Current Topics in Programming Languages and Systems""","""Don't Mind the Gap: Bridging Network-wide Objectives and Device-level Configurations""^""Don't Mind the Gap: Bridging Network-wide Objectives and Device-level Configurations (SIGCOMM 2016, Best Paper Award)   Ryan Beckett, Ratul Mahajan, Todd Millstein, Jitendra Padhye, David Walker""|""Data Provenance Support in Spark""^""Data Provenance Support in Spark (PVLDB, Selected for The VLDB Journal's special issue on best papers of VLDB 2016)   Matteo Interlandi, Kshitij Shah, Sai Deep Tetali, Muhammad Ali Gulzar, Seunghyun Yoo, Miryung Kim, Todd Millstein, Tyson Condie""|""Deriving State Machines from TinyOS Programs using Symbolic Execution""^""Deriving State Machines from TinyOS Programs using Symbolic Execution (IPSN 2008, Best Paper Award)   Nupur Kothari, Todd Millstein, Ramesh Govindan""|""Automatically Proving the Correctness of Compiler Optimizations""^""Automatically Proving the Correctness of Compiler Optimizations (PLDI 2003, Best Paper Award)   Sorin Lerner, Todd Millstein, Craig Chambers""|""Adding data provenance support to Apache Spark""^""Adding data provenance support to Apache Spark (VLDB Journal, Special issue on best papers of VLDB 2016)   Matteo Interlandi, Ari Ekmekji, Kshitij Shah, Muhammad Ali Gulzar, Sai Deep Tetali, Miryung Kim, Todd Millstein, Tyson Condie""",NA,"""Dr. Android and Mr. Hide: Fine-grained Permissions in Android Applications""^""Dr. Android and Mr. Hide: Fine-grained Permissions in Android Applications  (SPSM 2012) Jinseong Jeon, Kristopher K. Micinski, Jeffrey A. Vaughan, Ari Fogel, Nikhilesh Reddy, Jeffrey S. Foster, Todd Millstein""|""Secure Information Flow for Concurrent Programs under Total Store Order""^""Secure Information Flow for Concurrent Programs under Total Store Order  (CSF 2012) Jeffrey A. Vaughan, Todd Millstein""|""End-to-End Sequential Consistency""^""End-to-End Sequential Consistency  (ISCA 2012, IEEE Micro Top Pick) Abhayendra Singh, Satish Narayanasamy, Daniel Marino, Todd Millstein, Madanlal Musuvathi""|""Automated Repair of HTML Generation Errors in PHP Applications Using String Constraint Solving""^""Automated Repair of HTML Generation Errors in PHP Applications Using String Constraint Solving  (ICSE 2012) Hesam Samimi, Max Schäfer, Shay Artzi, Todd Millstein, Frank Tip, Laurie Hendren""","""Abhayendra Singh""|""Brian Chin""|""Craig Chambers""|""Daniel Marino""|""David Walker""|""Jitendra Padhye""|""Lun Liu""|""Madanlal Musuvathi""|""Nupur Kothari""|""Rahul Sharma""|""Ramakrishna Gummadi""|""Ramesh Govindan""|""Ratul Mahajan""|""Rupak Majumdar""|""Ryan Beckett""|""Saswat Padhi""|""Satish Narayanasamy""|""Shane Markstrum""|""Sorin Lerner""|""Sriram Rajamani""|""Thomas Ball""",NA
fac_45,"""Vasileios Gavrielatos ""|""Antonis Katsarakis""|""Nicolai Oswald""|""Mahesh Dananjaya""|""Adarsh Patil""|""Theo Olausson""",NA,"""Parallel Architectures 2013-present""|""Computer Architecture 2012-present""",NA,"""ISCA 20""|""MICRO 19""|""HPCA 19/17""|""CC 18""|""SC 16""|""RTCSA 14/15/16""|""NAS 14/15""|""NVMSA 15/16/17""|""ICCD 14/15""|""WODA 14""",NA,NA,"""Bharghava Rajaram""|""Andrew J. McPherson""|""Marco Elver""|""Cheng-Chieh Huang""|""Arpit Joshi""|""Saumay Dublish"""
