{
    "id": 0,
    "content": "Yannis Smaragdakis",
    "children": [
        {
            "id": 1,
            "content": "Yannis Smaragdakis (also Ioannis Smaragdakis, Γιάννης Σμαραγδάκης)",
            "isList": true,
            "key": 1,
            "children": [
                {
                    "id": 2,
                    "content": "Professor   Mailing address (shortened but valid): Dept. of Informatics, University of Athens, Ilisia, 15784, Greece   Phone: +30 210 7275311   Email: yannis@smaragd.org (or smaragd@di.uoa.gr)",
                    "key": 1
                },
                {
                    "id": 3,
                    "content": "Events:",
                    "isList": true,
                    "key": 2,
                    "children": [
                        {
                            "id": 4,
                            "content": "Current Service:",
                            "key": 1,
                            "children": [
                                {
                                    "id": 5,
                                    "content": "HOPL IV (2021)",
                                    "key": 1
                                }
                            ]
                        },
                        {
                            "id": 6,
                            "content": "Videos of selected talks:",
                            "key": 2,
                            "children": [
                                {
                                    "id": 7,
                                    "content": "Static Analysis and Zombies, Declarative Static Program Analysis with the Doop Framework.",
                                    "key": 1
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 8,
                    "content": "Teaching:",
                    "isList": true,
                    "key": 3,
                    "children": [
                        {
                            "id": 9,
                            "content": "Greece:",
                            "key": 1,
                            "children": [
                                {
                                    "id": 10,
                                    "content": "Advanced Compilers and Static Analysis (Spring 2019, Spring 2020); Compilers (Spring 2011,Spring 2012,Spring 2013,Spring 2014,Spring 2015,Spring 2016,Fall 2017,Spring 2019,Spring 2020); OO Languages and Systems/Advanced Programming Techniques (Fall 2010, Fall 2011, Fall 2012, Fall 2013, Fall 2014, Fall 2015, Fall 2017, Fall 2018, Fall 2019); Operating Systems (Fall 2017); Systems Programming (Spring 2014,Spring 2015,Spring 2016); SE (Spring 2011,Spring 2012,Spring 2013).",
                                    "key": 1
                                }
                            ]
                        },
                        {
                            "id": 11,
                            "content": "US:",
                            "key": 2,
                            "children": [
                                {
                                    "id": 12,
                                    "content": "SE (Spring 2009); OO Languages and Systems (Fall 2009, Spring 2009, Spring 2008, Spring 2007, Fall 2005, Fall 2004, Fall 2003, Fall 2002, Fall 2001); Graduate Seminar (Spring 2007, Fall 2008); Distributed Systems (Fall 2006, Fall 2007); Intro OO (Fall 2005, Spring 2005); Advanced OS (Spring 2004, Spring 2003, Spring 2002, Spring 2001, Spring 2000); Memory Management (Fall 2000).",
                                    "key": 1
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "id": 13,
            "content": "Research",
            "key": 2
        },
        {
            "id": 14,
            "content": "",
            "isList": true,
            "key": 3,
            "children": [
                {
                    "id": 15,
                    "content": "Programming languages and software engineering:",
                    "key": 1
                },
                {
                    "id": 16,
                    "content": "",
                    "isList": true,
                    "key": 2,
                    "children": [
                        {
                            "id": 17,
                            "content": "Program analysis (static analysis, test generation, invariant inference, symbolic execution)",
                            "key": 1
                        },
                        {
                            "id": 18,
                            "content": "Language mechanisms for abstraction (declarative languages, program generation, DSLs, modules and components, generics, extensible languages, multi-paradigm programming)",
                            "key": 2
                        },
                        {
                            "id": 19,
                            "content": "Languages and tools for systems (programming models for concurrency, language support for distributed computing, memory management and program locality)",
                            "key": 3
                        }
                    ]
                },
                {
                    "id": 20,
                    "content": "",
                    "isList": true,
                    "key": 3,
                    "children": [
                        {
                            "id": 21,
                            "content": "Gratefully acknowledging funding by the ERC and the HFRI.",
                            "key": 1
                        },
                        {
                            "id": 22,
                            "content": "(Perpetually outdated) CV",
                            "key": 2
                        }
                    ]
                },
                {
                    "id": 23,
                    "content": "My PhD students:",
                    "key": 4,
                    "children": [
                        {
                            "id": 24,
                            "content": "George Kastrinis, Anastasis Antoniadis.",
                            "key": 1
                        }
                    ]
                },
                {
                    "id": 25,
                    "content": "PhD alumni:",
                    "key": 5,
                    "children": [
                        {
                            "id": 26,
                            "content": "Brian McNamara, Eli Tilevich, Christoph Csallner, Shan Shan Huang, John Altidor, Kaituo Li, Aggelos Biboudis, George Balatsouras.",
                            "key": 1
                        }
                    ]
                },
                {
                    "id": 27,
                    "content": "Research Associates:",
                    "key": 6,
                    "children": [
                        {
                            "id": 28,
                            "content": "George Fourtounis, Neville Grech.",
                            "key": 1
                        }
                    ]
                },
                {
                    "id": 29,
                    "content": "Sample older B.Sc. and M.Sc. theses",
                    "key": 7
                }
            ]
        },
        {
            "id": 30,
            "content": "",
            "isList": true,
            "key": 4,
            "children": [
                {
                    "id": 31,
                    "content": "Latest work:",
                    "key": 1
                },
                {
                    "id": 32,
                    "content": "",
                    "isList": true,
                    "key": 2,
                    "children": [
                        {
                            "id": 33,
                            "content": "\"Ethainter: A Smart Contract Security Analyzer for Composite Vulnerabilities\" (PLDI 2020)",
                            "key": 1
                        },
                        {
                            "id": 34,
                            "content": "\"Static Analysis of Java Enterprise Applications: Frameworks and Caches, the Elephants in the Room\" (PLDI 2020)",
                            "key": 2
                        },
                        {
                            "id": 35,
                            "content": "",
                            "key": 3,
                            "children": [
                                {
                                    "id": 36,
                                    "content": "\"A Principled Approach to Selective Context Sensitivity for Pointer Analysis\" (ACM TOPLAS, to appear)",
                                    "key": 1
                                },
                                {
                                    "id": 37,
                                    "content": "extends \"Precision-Guided Context Sensitivity for Pointer Analysis\" (OOPSLA 2018)",
                                    "isList": true,
                                    "key": 2
                                }
                            ]
                        },
                        {
                            "id": 38,
                            "content": "\"Next-Paradigm Programming Languages: What Will They Look Like and What Changes Will They Bring?\" (Onward! Essays 2019)",
                            "key": 4
                        },
                        {
                            "id": 39,
                            "content": "\"Deep Static Modeling of Invokedynamic\" (ECOOP 2019)",
                            "key": 5
                        },
                        {
                            "id": 40,
                            "content": "\"Gigahorse: Thorough, Declarative Decompilation of Smart Contracts\" (ICSE 2019)",
                            "key": 6
                        },
                        {
                            "id": 41,
                            "content": "\"MadMax: Surviving Out-of-Gas Conditions in Ethereum Smart Contracts\" (OOPSLA 2018)",
                            "key": 7
                        },
                        {
                            "id": 42,
                            "content": "\"Scalability-First Pointer Analysis with Self-Tuning Context-Sensitivity\" (ESEC/FSE 2018)",
                            "key": 8
                        },
                        {
                            "id": 43,
                            "content": "\"Defensive Points-To Analysis: Effective Soundness via Laziness\" (ECOOP 2018)",
                            "key": 9
                        },
                        {
                            "id": 44,
                            "content": "\"Efficient Reflection String Analysis via Graph Coloring\" (ECOOP 2018)",
                            "key": 10
                        },
                        {
                            "id": 45,
                            "content": "\"Shooting from the Heap: Ultra-Scalable Static Analysis with Heap Snapshots\" (ISSTA 2018)",
                            "key": 11
                        },
                        {
                            "id": 46,
                            "content": "\"Static Analysis of Java Dynamic Proxies\" (ISSTA 2018)",
                            "key": 12
                        },
                        {
                            "id": 47,
                            "content": "\"Symbolic Reasoning for Automatic Signal Placement\" (PLDI 2018)",
                            "key": 13
                        },
                        {
                            "id": 48,
                            "content": "\"An Efficient Data Structure for Must-Alias Analysis\" (CC 2018)",
                            "key": 14
                        },
                        {
                            "id": 49,
                            "content": "\"Effectiveness of Anonymization in Double-Blind Review\" (CACM, Jun 2018)",
                            "key": 15
                        }
                    ]
                },
                {
                    "id": 50,
                    "content": "Project areas, each with representative publications and links:",
                    "key": 3
                },
                {
                    "id": 51,
                    "content": "",
                    "isList": true,
                    "key": 4,
                    "children": [
                        {
                            "id": 52,
                            "content": "Static Program Analysis :",
                            "key": 1,
                            "children": [
                                {
                                    "id": 53,
                                    "content": "we express a rich set of static analyses completely declaratively (in the Datalog language).",
                                    "key": 1
                                }
                            ]
                        },
                        {
                            "id": 54,
                            "content": "",
                            "isList": true,
                            "key": 2,
                            "children": [
                                {
                                    "id": 55,
                                    "content": "Reference/overview material:",
                                    "isList": true,
                                    "key": 1,
                                    "children": [
                                        {
                                            "id": 56,
                                            "content": "The Doop framework",
                                            "key": 1
                                        },
                                        {
                                            "id": 57,
                                            "content": "\"Pointer Analysis\" tutorial survey (Foundations and Trends in PL, official link)",
                                            "key": 2
                                        },
                                        {
                                            "id": 58,
                                            "content": "Notes, slides, etc. from a 2016 seminar. Videos of lectures.",
                                            "key": 3
                                        }
                                    ]
                                },
                                {
                                    "id": 59,
                                    "content": "\"Heaps Don’t Lie: Countering Unsoundness with Heap Snapshots\" (OOPSLA 2017)",
                                    "key": 2
                                },
                                {
                                    "id": 60,
                                    "content": "\"P/Taint: Unified Points-to and Taint Analysis\" (OOPSLA 2017)",
                                    "key": 3
                                },
                                {
                                    "id": 61,
                                    "content": "\"Porting Doop to Souffle: A Tale of Inter-Engine Portability for Datalog-Based Analyses\" (SOAP 2017)",
                                    "key": 4
                                },
                                {
                                    "id": 62,
                                    "content": "\"A Datalog Model of Must-Alias Analysis\" (SOAP 2017)",
                                    "key": 5
                                },
                                {
                                    "id": 63,
                                    "content": "\"Structure-Sensitive Points-To Analysis for C and C++\" (SAS 2016)",
                                    "key": 6
                                },
                                {
                                    "id": 64,
                                    "content": "\"More Sound Static Handling of Java Reflection\" (APLAS 2015)",
                                    "key": 7
                                },
                                {
                                    "id": 65,
                                    "content": "\"In Defense of Soundiness: A Manifesto\" (CACM, Feb 2015), see also soundiness.org",
                                    "key": 8
                                },
                                {
                                    "id": 66,
                                    "content": "\"Introspective Analysis: Context-Sensitivity, Across the Board\" (PLDI 2014), code",
                                    "key": 9
                                },
                                {
                                    "id": 67,
                                    "content": "\"Set-Based Pre-Processing for Points-To Analysis\" (OOPSLA 2013)",
                                    "key": 10
                                },
                                {
                                    "id": 68,
                                    "content": "\"Class Hierarchy Complementation: Soundly Completing a Partial Type Graph\" (OOPSLA 2013)",
                                    "key": 11
                                },
                                {
                                    "id": 69,
                                    "content": "\"Hybrid Context Sensitivity for Points-To Analysis\" (PLDI 2013)",
                                    "key": 12
                                },
                                {
                                    "id": 70,
                                    "content": "\"Efficient and Effective Handling of Exceptions in Java Points-To Analysis\" (CC 2013)",
                                    "key": 13
                                },
                                {
                                    "id": 71,
                                    "content": "\"Pick Your Contexts Well: Understanding Object-Sensitivity (The Making of a Precise and Scalable Pointer Analysis)\" (POPL 2011)",
                                    "key": 14
                                },
                                {
                                    "id": 72,
                                    "content": "\"Using Datalog for Fast and Easy Program Analysis\" (Datalog 2.0)",
                                    "key": 15
                                },
                                {
                                    "id": 73,
                                    "content": "\"Resolving and Exploiting the k-CFA Paradox: Illuminating Functional vs. Object-Oriented Program Analysis\" (PLDI 2010)",
                                    "key": 16
                                },
                                {
                                    "id": 74,
                                    "content": "\"Strictly Declarative Specification of Sophisticated Points-to Analyses\" (OOPSLA 2009)",
                                    "key": 17
                                },
                                {
                                    "id": 75,
                                    "content": "\"Exception Analysis and Points-To Analysis: Better Together\" (ISSTA 2009)",
                                    "key": 18
                                }
                            ]
                        },
                        {
                            "id": 76,
                            "content": "Program generators, generics in PL, extensibility : MorphJ is a language for safe \"morphing\", i.e., creating classes by iterating over members of other classes. Recent work also includes a generalization of the concept of \"variance\" in generics/templates: a way to marry parametric and subtype polymorphism. In the 90s, I also worked (as an intern and a funded PhD student) on the Intentional Programming (IP) project at Microsoft.",
                            "key": 3
                        },
                        {
                            "id": 77,
                            "content": "",
                            "isList": true,
                            "key": 4,
                            "children": [
                                {
                                    "id": 78,
                                    "content": "\"Stream Fusion, to Completeness\" (POPL 2017)",
                                    "key": 1
                                },
                                {
                                    "id": 79,
                                    "content": "\"Structured Program Generation Techniques\" (GTTSE--Grand Timely Topics in SE)",
                                    "key": 2
                                },
                                {
                                    "id": 80,
                                    "content": "\"Automating Ad hoc Data Representation Transformations\" (OOPSLA 2015)",
                                    "key": 3
                                },
                                {
                                    "id": 81,
                                    "content": "\"Foo: A Minimal Modern OO Calculus\" (FTfJP 2015)",
                                    "key": 4
                                },
                                {
                                    "id": 82,
                                    "content": "\"jUCM: Universal Class Morphing\" (MASPEGHI 2015)",
                                    "key": 5
                                },
                                {
                                    "id": 83,
                                    "content": "\"Streams a la carte: Extensible Pipelines with Object Algebras\" (ECOOP 2015). Closely related to earlier performance analysis study: \"Clash of the Lambdas\" (ICOOOLPS 2014)",
                                    "key": 6
                                },
                                {
                                    "id": 84,
                                    "content": "\"Refactoring Java Generics by Inferring Wildcards, In Practice\" (OOPSLA 2014)",
                                    "key": 7
                                },
                                {
                                    "id": 85,
                                    "content": "\"Forsaking Inheritance: Supercharged Delegation in DelphJ\" (OOPSLA 2013)",
                                    "key": 8
                                },
                                {
                                    "id": 86,
                                    "content": "\"Reified Type Parameters Using Java Annotations\" (GPCE 2013)",
                                    "key": 9
                                },
                                {
                                    "id": 87,
                                    "content": "\"Java Wildcards Meet Definition-Site Variance\" (ECOOP 2012)",
                                    "key": 10
                                },
                                {
                                    "id": 88,
                                    "content": "",
                                    "key": 11,
                                    "children": [
                                        {
                                            "id": 89,
                                            "content": "\"Morphing: Structurally Shaping a Class by Reflecting on Others\": a comprehensive article (ACM TOPLAS, sans appendix)",
                                            "key": 1
                                        },
                                        {
                                            "id": 90,
                                            "content": "",
                                            "isList": true,
                                            "key": 2,
                                            "children": [
                                                {
                                                    "id": 91,
                                                    "content": "\"Expressive and Safe Static Reflection with MorphJ\" (PLDI 2008)",
                                                    "key": 1
                                                },
                                                {
                                                    "id": 92,
                                                    "content": "\"Morphing: Safely Shaping a Class in the Image of Others\" (ECOOP 2007)",
                                                    "key": 2
                                                },
                                                {
                                                    "id": 93,
                                                    "content": "\"Morphing Software for Easier Evolution\" (RAM-SE 2007)",
                                                    "key": 3
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "id": 94,
                                    "content": "",
                                    "key": 12,
                                    "children": [
                                        {
                                            "id": 95,
                                            "content": "\"Statically Safe Program Generation with SafeGen\" (SCP) shows a language that can certify a generator under all possible inputs to assert that it will only produce well-formed programs.",
                                            "key": 1
                                        },
                                        {
                                            "id": 96,
                                            "content": "conference version at GPCE 2005",
                                            "isList": true,
                                            "key": 2
                                        }
                                    ]
                                },
                                {
                                    "id": 97,
                                    "content": "\"Taming the Wildcards: Combining Definition- and Use-Site Variance\" (PLDI 2011)",
                                    "key": 13
                                },
                                {
                                    "id": 98,
                                    "content": "",
                                    "key": 14,
                                    "children": [
                                        {
                                            "id": 99,
                                            "content": "Meta-AspectJ (MAJ) is a state-of-the-art meta-programming tool for Java and AspectJ",
                                            "key": 1
                                        },
                                        {
                                            "id": 100,
                                            "content": "\"Domain-Specific Languages and Program Generation with Meta-AspectJ\" (ACM TOSEM). Expands \"Generating AspectJ Programs with Meta-AspectJ\" (GPCE 2004) and \"Easy Language Extension with Meta-AspectJ\" (ICSE 2006 Emerging Results)",
                                            "isList": true,
                                            "key": 2
                                        }
                                    ]
                                },
                                {
                                    "id": 101,
                                    "content": "\"cJ: Enhancing Java with Safe Type Conditions\" (AOSD 2007)",
                                    "key": 15
                                },
                                {
                                    "id": 102,
                                    "content": "\"Program Generators and the Tools to Make Them\" (PEPM 2004)",
                                    "key": 16
                                },
                                {
                                    "id": 103,
                                    "content": "\"A Personal Outlook on Generator Research\" (Domain-Specific Program Generation)",
                                    "key": 17
                                },
                                {
                                    "id": 104,
                                    "content": "\"Application Generators\": survey article in the Encyclopedia of Electrical and Electronics Engineering, (John Wiley and Sons)",
                                    "key": 18
                                },
                                {
                                    "id": 105,
                                    "content": "\"JTS: Tools for Implementing Domain-Specific Languages\" (ICSR 1998)",
                                    "key": 19
                                },
                                {
                                    "id": 106,
                                    "content": "\"Scoping Constructs for Program Generators\" (GCSE 1999)",
                                    "key": 20
                                },
                                {
                                    "id": 107,
                                    "content": "\"DiSTiL: a Transformation Library for Data Structures\" in the Domain-Specific Languages conference (DSL) 1997.",
                                    "key": 21
                                }
                            ]
                        },
                        {
                            "id": 108,
                            "content": "Declarative languages : Lately I have explored small, declarative languages for various tasks (e.g., parallelism, but also GC-time computation).",
                            "key": 5
                        },
                        {
                            "id": 109,
                            "content": "",
                            "isList": true,
                            "key": 6,
                            "children": [
                                {
                                    "id": 110,
                                    "content": "\"A Backend Extension Mechanism for PQL/Java with Free Run-Time Optimisation\" (CC 2015)",
                                    "key": 1
                                },
                                {
                                    "id": 111,
                                    "content": "\"PQL: A Purely-Declarative Java Extension for Parallel Programming\" (ECOOP 2012)",
                                    "key": 2
                                },
                                {
                                    "id": 112,
                                    "content": "\"Declarative Datalog Debugging for Mere Mortals\" (Datalog 2.0 2012)",
                                    "key": 3
                                },
                                {
                                    "id": 113,
                                    "content": "\"What Can the GC Compute Efficiently? A Language for Heap Assertions at GC Time\" (OOPSLA 2010)",
                                    "key": 4
                                },
                                {
                                    "id": 114,
                                    "content": "\"A New Java Runtime for a Parallel World\" (PLDI 2010 FIT)",
                                    "key": 5
                                }
                            ]
                        },
                        {
                            "id": 115,
                            "content": "Program analysis and test generation for bug detection : recent work includes Residual Investigation: an approach that enhances static bug warnings with predictive dynamic analyses. My original work includes JCrasher and its followups, CnC and DSD-Crasher. JCrasher is a system for random testing of Java programs. CnC combines static checking (the ESC/Java system) with automatic test case generation. DSD-Crasher adds a dynamic invariant detection step to CnC. Finally, the ORM- modeling formalism allows efficient satisfiability checking and test data generation.",
                            "key": 7
                        },
                        {
                            "id": 116,
                            "content": "",
                            "isList": true,
                            "key": 8,
                            "children": [
                                {
                                    "id": 117,
                                    "content": "",
                                    "key": 1,
                                    "children": [
                                        {
                                            "id": 118,
                                            "content": "\"Residual Investigation: Predictive and Precise Bug Detection\" (ACM TOSEM)",
                                            "key": 1
                                        },
                                        {
                                            "id": 119,
                                            "content": "conference version at ISSTA 2012",
                                            "isList": true,
                                            "key": 2
                                        }
                                    ]
                                },
                                {
                                    "id": 120,
                                    "content": "\"SEDGE: Symbolic Example Data Generation for Dataflow Programs\" (ASE 2013)",
                                    "key": 2
                                },
                                {
                                    "id": 121,
                                    "content": "\"Second-Order Constraints in Dynamic Invariant Inference\" (ESEC/FSE 2013)",
                                    "key": 3
                                },
                                {
                                    "id": 122,
                                    "content": "",
                                    "key": 4,
                                    "children": [
                                        {
                                            "id": 123,
                                            "content": "\"Scalable Satisfiability Checking and Test Data Generation from Modeling Diagrams\" (JASE): the ORM- paper",
                                            "key": 1
                                        },
                                        {
                                            "id": 124,
                                            "content": "conference version at ASE 2007",
                                            "isList": true,
                                            "key": 2
                                        }
                                    ]
                                },
                                {
                                    "id": 125,
                                    "content": "\"DySy: Dynamic Symbolic Execution for Invariant Inference\" (ICSE 2008)",
                                    "key": 5
                                },
                                {
                                    "id": 126,
                                    "content": "\"DSD-Crasher: A Hybrid Analysis Tool for Bug Finding\" (ACM TOSEM), conference version at ISSTA 2006",
                                    "key": 6
                                },
                                {
                                    "id": 127,
                                    "content": "\"Combining Static and Dynamic Reasoning for Bug Detection\" (TAP, 2007)",
                                    "key": 7
                                },
                                {
                                    "id": 128,
                                    "content": "\"Dynamically Discovering Likely Interface Invariants\" (ICSE 2006 Emerging Results)",
                                    "key": 8
                                },
                                {
                                    "id": 129,
                                    "content": "\"CnC: Combining Static Checking and Testing\" (ICSE 2005)",
                                    "key": 9
                                },
                                {
                                    "id": 130,
                                    "content": "\"JCrasher: an Automatic Robustness Tester for Java\" (Software: Practice and Experience)",
                                    "key": 10
                                }
                            ]
                        },
                        {
                            "id": 131,
                            "content": "Languages and language-inspired tools for distributed and concurrent computing : Some recent work includes the causally-precedes relation for sound, predictive race detection, and adaptive locks: a model for switching between mutex locks and transactions dynamically (either for performance or for correctness). See also the TIC model for transactional memory.   Past work includes J-Orchestra: an automatic partitioning system for Java programs. It manages to enable distributed execution over a network, as if the program was running on a single VM, using only rewrite techniques over standard runtimes. See also NRMI: Java middleware offering a programming model for distributed computing that resembles single-machine programming.",
                            "key": 9
                        },
                        {
                            "id": 132,
                            "content": "",
                            "isList": true,
                            "key": 10,
                            "children": [
                                {
                                    "id": 133,
                                    "content": "\"Sound Predictive Race Detection in Polynomial Time\" (POPL 2012)",
                                    "key": 1
                                },
                                {
                                    "id": 134,
                                    "content": "",
                                    "key": 2,
                                    "children": [
                                        {
                                            "id": 135,
                                            "content": "\"Adaptive Locks: Combining Transactions and Locks for Efficient Concurrency\" (JPDC)",
                                            "key": 1
                                        },
                                        {
                                            "id": 136,
                                            "content": "conference version at PACT 2009, earlier version at TRANSACT 2009, position paper at MSPC 2008.",
                                            "isList": true,
                                            "key": 2
                                        }
                                    ]
                                },
                                {
                                    "id": 137,
                                    "content": "\"Transactions with Isolation and Cooperation\" (OOPSLA 2007)",
                                    "key": 3
                                },
                                {
                                    "id": 138,
                                    "content": "",
                                    "key": 4,
                                    "children": [
                                        {
                                            "id": 139,
                                            "content": "\"NRMI: Natural and Efficient Middleware\" (IEEE TPDS)",
                                            "key": 1
                                        },
                                        {
                                            "id": 140,
                                            "content": "conference version at ICDCS 2003",
                                            "isList": true,
                                            "key": 2
                                        }
                                    ]
                                },
                                {
                                    "id": 141,
                                    "content": "",
                                    "key": 5,
                                    "children": [
                                        {
                                            "id": 142,
                                            "content": "\"J-Orchestra: Enhancing Java Programs with Distribution Capabilities\": a comprehensive article (ACM TOSEM)",
                                            "key": 1
                                        },
                                        {
                                            "id": 143,
                                            "content": "",
                                            "isList": true,
                                            "key": 2,
                                            "children": [
                                                {
                                                    "id": 144,
                                                    "content": "\"J-Orchestra: Automatic Java Application Partitioning\": the original J-Orchestra paper from ECOOP 2002. Extended version in CoC Tech Report 02-17.",
                                                    "key": 1
                                                },
                                                {
                                                    "id": 145,
                                                    "content": "\"Appletizing: Running Legacy Java Code Remotely From a Web Browser\" (ICSM 2005) uses J-Orchestra to convert a regular Java application into an applet-server combination.",
                                                    "key": 2
                                                },
                                                {
                                                    "id": 146,
                                                    "content": "\"Portable and Efficient Distributed Threads for Java\" (ACM Middleware 2004) explains the distributed synchronization in J-Orchestra.",
                                                    "key": 3
                                                },
                                                {
                                                    "id": 147,
                                                    "content": "\"Automatic Partitioning: A Promising Approach to Prototyping Ubiquitous Computing Applications\" (IEEE Pervasive Computing)",
                                                    "key": 4
                                                },
                                                {
                                                    "id": 148,
                                                    "content": "\"Automatic Application Partitioning: The J-Orchestra approach\" (position paper from the 8th ECOOP workshop on Mobile Object systems)",
                                                    "key": 5
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "id": 149,
                                    "content": "\"Transparent Program Transformations in the Presence of Opaque Code\" (GPCE 2006)",
                                    "key": 6
                                },
                                {
                                    "id": 150,
                                    "content": "\"Binary Refactoring: Improving Code Behind the Scenes\" (ICSE 2005): a refactoring-for-optimization technique that does not pollute the source code",
                                    "key": 7
                                },
                                {
                                    "id": 151,
                                    "content": "\"Aspectizing Server-Side Distribution\": a description of GOTECH, (ASE 2003)",
                                    "key": 8
                                }
                            ]
                        },
                        {
                            "id": 152,
                            "content": "Memory management :",
                            "key": 11,
                            "children": [
                                {
                                    "id": 153,
                                    "content": "I have worked on adaptive memory management algorithms, i.e., ways to combine two policies and get the best of both, with theoretical guarantees. In the past, I proposed the EELRU replacement algorithm for virtual memory systems, which consistently outperforms LRU. Additionally, I have worked on techniques for compressed virtual memory and for the reduction (i.e., simulation-specific compression) of program reference traces.",
                                    "key": 1
                                }
                            ]
                        },
                        {
                            "id": 154,
                            "content": "",
                            "isList": true,
                            "key": 12,
                            "children": [
                                {
                                    "id": 155,
                                    "content": "\"Adaptive Caching: Effective Shaping of Cache Behavior to Workloads\" (MICRO 2006)",
                                    "key": 1
                                },
                                {
                                    "id": 156,
                                    "content": "\"General Adaptive Replacement Policies\" (ISMM 2004)",
                                    "key": 2
                                },
                                {
                                    "id": 157,
                                    "content": "\"The EELRU adaptive replacement algorithm\" (Performance Evaluation--Elsevier)",
                                    "key": 3
                                },
                                {
                                    "id": 158,
                                    "content": "\"EELRU: Simple and Effective Adaptive Page Replacement\" (SIGMETRICS 1999): the original EELRU paper",
                                    "isList": true,
                                    "key": 4
                                },
                                {
                                    "id": 159,
                                    "content": "\"Flexible Reference Trace Reduction for VM Simulations\" (ACM TOMACS)",
                                    "key": 5
                                },
                                {
                                    "id": 160,
                                    "content": "\"Trace Reduction for Virtual Memory Simulations\" (SIGMETRICS 1999): the original trace reduction paper",
                                    "isList": true,
                                    "key": 6
                                },
                                {
                                    "id": 161,
                                    "content": "\"The Case for Compressed Caching in Virtual Memory Systems\", at the 1999 USENIX Annual Technical Conference",
                                    "key": 7
                                },
                                {
                                    "id": 162,
                                    "content": "\"Performing Replacement in Modem Pools\" (USENIX 2000): an algorithm for managing modem pools efficiently. Directly related to replacement algorithms in virtual memory!",
                                    "key": 8
                                },
                                {
                                    "id": 163,
                                    "content": "Some pointers to supplementary material.",
                                    "isList": true,
                                    "key": 9
                                }
                            ]
                        },
                        {
                            "id": 164,
                            "content": "Multiparadigm Programming :",
                            "key": 13,
                            "children": [
                                {
                                    "id": 165,
                                    "content": "FC++ is a really cool library for programming functionally in C++. It is the first library to fully combine higher-order and polymorphic functions, by neatly exploiting C++ type inference. LC++ is its small sibling.",
                                    "key": 1
                                }
                            ]
                        },
                        {
                            "id": 166,
                            "content": "",
                            "isList": true,
                            "key": 14,
                            "children": [
                                {
                                    "id": 167,
                                    "content": "\"Functional Programming with the FC++ library\" (Journal of Functional Programming)",
                                    "key": 1
                                },
                                {
                                    "id": 168,
                                    "content": "\"Functional Programming in C++\" (ICFP 2000): the original FC++ paper",
                                    "isList": true,
                                    "key": 2
                                },
                                {
                                    "id": 169,
                                    "content": "\"FC++: Functional Tools for OO Tasks\" (Software Practice & Experience) shows how common OO programming tasks benefit from FC++",
                                    "key": 3
                                },
                                {
                                    "id": 170,
                                    "content": "The FC++ Web page contains pointers to more FC++ publications and information",
                                    "key": 4
                                },
                                {
                                    "id": 171,
                                    "content": "Also related:",
                                    "key": 5,
                                    "children": [
                                        {
                                            "id": 172,
                                            "content": "\"Static Interfaces in C++\" (2000 C++ Template Programming Workshop): How can we enforce interface requirements in C++?",
                                            "key": 1
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "id": 173,
                            "content": "Object-Oriented components :",
                            "key": 15,
                            "children": [
                                {
                                    "id": 174,
                                    "content": "My PhD proposed the concept of \"mixin layers\". A mixin layer is a static component encapsulating fragments of several different classes (mixins) so that all fragments are composed consistently. Mixin layers are an elegant implementation technique for layered designs.",
                                    "key": 1
                                }
                            ]
                        },
                        {
                            "id": 175,
                            "content": "",
                            "isList": true,
                            "key": 16,
                            "children": [
                                {
                                    "id": 176,
                                    "content": "\"Implementing Layered Designs with Mixin Layers\": the original mixin layers paper from ECOOP 1998",
                                    "key": 1
                                },
                                {
                                    "id": 177,
                                    "content": "\"Implementing Large-Scale Object-Oriented Components\" (PhD Dissertation)",
                                    "key": 2
                                },
                                {
                                    "id": 178,
                                    "content": "\"Mixin Layers: An Object-Oriented Implementation Technique for Refinements and Collaboration-Based Designs\" (ACM TOSEM)",
                                    "key": 3
                                },
                                {
                                    "id": 179,
                                    "content": "\"Mixin-Based Programming in C++\" (GCSE 2000)",
                                    "key": 4
                                },
                                {
                                    "id": 180,
                                    "content": "\"Layered Development with (Unix) Dynamic Libraries\" (ICSR 2002): Unix dynamic libraries (shared objects) offer great support for layered programming",
                                    "key": 5
                                },
                                {
                                    "id": 181,
                                    "content": "source code",
                                    "isList": true,
                                    "key": 6
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "id": 182,
            "content": "Non-Technical:",
            "key": 5
        },
        {
            "id": 183,
            "content": "",
            "isList": true,
            "key": 6,
            "children": [
                {
                    "id": 184,
                    "content": "Why do a PhD and how to pick an area (update of older \"PhD Rants and Raves\")",
                    "key": 1
                },
                {
                    "id": 185,
                    "content": "Yannis's law:",
                    "key": 2,
                    "children": [
                        {
                            "id": 186,
                            "content": "Programmer Productivity Doubles Every 6 Years. (Yes, I'm only half serious, but half is enough.)",
                            "key": 1
                        }
                    ]
                },
                {
                    "id": 187,
                    "content": "My (favorite) academic humor",
                    "key": 3
                }
            ]
        }
    ]
}