<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta content="HTML Tidy for Linux (vers 1 September 2005), see www.w3.org" name="generator"/>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
<meta content="Mozilla/4.61 [en] (X11; U; SunOS 5.8 sun4u) [Netscape]" name="GENERATOR"/>
<title>Yannis Smaragdakis</title>
<!-- ============================================================= -->
<style type="text/css">
 :link { color: #99FFCC }
 :visited { color: #33CCFF }
 :active { color: #FFFFFF }
 img.c12 {border: 0px solid ; }
 body.c11 {color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);}
 body.c11 {font-size: calc(12px + 0.25vw)}
 div.c10 {margin-left: 2em}
 img.c9 {width: 16px; height: 18px;}
 img.c8 {width: 16px; height: 16px;}
 img.c10 {width: 20px; height: 20px;}
 span.c7 {font-style: italic;}
 img.c6 {width: 16px; height: 17px;}
 img.c5 {width: 46px; height: 19px;}
 li.c4 {list-style: none}
 p.c3 {font-size: 120%}
 span.c2 {font-size: 120%}
 img.c1 {border: 0px solid ; height: 300px;}
</style>
</head>
<body class="c11">
<table border="0" width="100%">
<tbody>
<tr>
<td align="left" width="80%">
<h2>Yannis Smaragdakis
<font size="1">(also Ioannis Smaragdakis, Γιάννης Σμαραγδάκης)</font>
</h2>
Professor<br/>
Mailing address (shortened but valid): Dept. of Informatics, University of Athens, Ilisia, 15784, Greece<br/>
Phone: +30 210 7275311<br/>
<!--
University of Athens <br>
Dept. of Informatics and Telecommunications,<br>
Panepistimiopolis, Ilisia, 15784, Greece <br>
-->

Email: yannis@smaragd.org   (or smaragd@di.uoa.gr)<br/>
<br/>
<span class="c2">Events:</span><br/>
<ul>
<!--
 <a 
 href="http://www.cs.purdue.edu/transact11/transact11.html">TRANSACT 2011</a>. <a
 href="http://www.infosun.fim.uni-passau.de/spl/SC2011/">SC 2011</a>. <a
 href="http://2011.esec-fse.org/">FSE 2011</a>. <a
 href="http://splashcon.org/2011/cfp/100">OOPSLA 2011</a>. <a
 href="http://www.continuinged.ku.edu/programs/ase/">ASE 2011</a>. <a
 href="http://www.cse.psu.edu/popl/12/">POPL 2012</a>. <a
 href="http://ecoop12.cs.purdue.edu/">ECOOP 2012</a>.
 <a href="http://popl.mpi-sws.org/2013/">POPL 2013</a>.
 <a href="http://www.etaps.org/2013/">ESOP 2013</a>.
 <a href="http://pldi2013.ucombinator.org/">PLDI 2013</a>.
 <a href="http://issta2013.inf.usi.ch/">ISSTA 2013</a>. 
 <a href="http://splashcon.org/2013">OOPSLA 2013</a>.
 <a href="http://ase2013.org/">ASE 2013</a>.
 <a href="http://program-transformation.org/GPCE13">GPCE 2013</a>.
 <a href="http://aosd.net/2014/conference">Modularity 2014</a>.
 <a href="http://conferences.inf.ed.ac.uk/pldi2014/">PLDI 2014</a>.
 <a href="http://fse22.gatech.edu/cfp/research">FSE 2014</a>.
 <a href="http://ecoop14.it.uu.se/">ECOOP 2014</a>.
 <a href="http://2014.splashcon.org/track/oopsla2014">OOPSLA 2014</a>.
 <a href="http://2015.icse-conferences.org/">ICSE 2015</a>.
 <a href="http://conf.researchr.org/home/pldi2015">PLDI 2015</a>.
 <a href="http://2015.splashcon.org/">OOPSLA 2015</a>.
 <a href="http://2015.gpce.org/">GPCE 2015</a>.
 <a href="http://conf.researchr.org/home/POPL-2016">POPL 2016</a>.
 <a href="http://2016.modularity.info/">Modularity 2016</a>.
 <a href="http://conf.researchr.org/home/pldi-2016">PLDI 2016</a>.
 <a href="http://2016.splashcon.org/">OOPSLA 2016</a>.
 <a href="http://tosem.acm.org">ACM TOSEM</a>.
 <a href="http://www.jot.fm/">JOT</a>.
 <a href="http://conf.researchr.org/track/POPL-2018/POPL-2018-papers">POPL 2018</a>.
 <a href="http://conf.researchr.org/home/pldi-2018">PLDI 2018</a>.
 <a href="http://conf.researchr.org/home/issta-2018">ISSTA 2018</a>.
 <a href="https://conf.researchr.org/track/splash-2018/splash-2018-OOPSLA">OOPSLA 2018</a>.
 <a href="https://conf.researchr.org/home/splash-2019">SPLASH 2019 (GC)</a>.
-->
<li>Current Service: 
 <a href="https://hopl4.sigplan.org/">HOPL IV (2021)</a><br/>
</li>
<li>Videos of selected talks:
	<a href="https://www.youtube.com/watch?v=RHqQUWhjpsI">Static Analysis and Zombies</a>,
	<a href="https://www.youtube.com/watch?v=28yTR9kEQDA">Declarative Static Program Analysis with the Doop Framework</a>.
  </li>
<!-- 
  <li>Past edited proceedings: 
  <a href="http://portal.acm.org/toc.cfm?id=1449913&coll=ACM&dl=ACM&type=proceeding&idx=SERIES11410&part=series&WantType=Proceedings&title=GPCE&CFID=82454085&CFTOKEN=83285812">GPCE 2008</a>,
  <a
 href="http://www.Springerlink.com/openurl.asp?genre=issue&amp;issn=0302-9743&amp;volume=2830&amp;issue=preprint">GPCE 2003</a>,
 <a href="http://gpce03.gpce.org/">GPCE 2003</a> proceedings 
 (also <a href="http://portal.acm.org/toc.cfm?id=954186&amp;type=proceeding&amp;coll=portal&amp;dl=ACM&amp;CFID=15729238&amp;CFTOKEN=52977304"> in the ACM DL</a>)
  <a
 href="http://www.kfa-juelich.de/nic-series/Volume7/Volume7.html">MPOOL 2001</a>,
  <a
 href="http://www.kfa-juelich.de/nic-series/volume13/volume13.html">MPOOL 2002</a>,
  <a href="http://www.oonumerics.org/tmpw01/">TMPW 2001</a><br>
  </li>
-->
</ul>
<span class="c2">Teaching:</span>
<ul>
<li> Greece:
Advanced Compilers and Static Analysis
	(<a href="https://piazza.com/class/jsonwvjoepo2f4">Spring 2019</a>,
	 <a href="M221/">Spring 2020</a>); 
Compilers (<a href="http://cgi.di.uoa.gr/~thp06/">Spring 2011,Spring 2012,Spring 2013,Spring 2014,Spring 2015,Spring 2016,Fall 2017,Spring 2019,Spring 2020</a>);
OO Languages and Systems/Advanced Programming Techniques
(<a href="521-10/">Fall 2010</a>,
 <a href="521-11/">Fall 2011</a>,
 <a href="521-12/">Fall 2012</a>,
 <a href="521-13/">Fall 2013</a>,
 <a href="521-14/">Fall 2014</a>,
 <a href="117-15/">Fall 2015</a>,
 <a href="117-17/">Fall 2017</a>,
 <a href="M135-18/">Fall 2018</a>,
 <a href="M135-19/">Fall 2019</a>);
Operating Systems (<a href="k22">Fall 2017</a>);
Systems Programming (<a href="k24">Spring 2014,Spring 2015,Spring 2016</a>);
SE (<a href="http://eclass.di.uoa.gr/courses/D55/">Spring 2011,Spring 2012,Spring 2013</a>).
  </li>
<li> US:
SE
(<a href="https://twiki-edlab.cs.umass.edu/bin/viewauth/_S2009Yannis320/WebHome">Spring 2009</a>);
OO Languages and Systems
(<a href="https://twiki-edlab.cs.umass.edu/bin/viewauth/_F2009Yannis691oo/WebHome">Fall 2009</a>,
 <a href="https://twiki-edlab.cs.umass.edu/bin/viewauth/_S2009Yannis591oo/WebHome">Spring 2009</a>,
 <a href="http://www.cs.uoregon.edu/classes/08S/cis410ool/">Spring 2008</a>,
 <a href="http://www.cs.uoregon.edu/classes/07S/cis410ool/">Spring 2007</a>,
 <a href="http://www.cc.gatech.edu/classes/AY2006/cs6246_Fall/">Fall 2005</a>,
 <a href="http://www.cc.gatech.edu/classes/AY2005/cs6246_Fall/">Fall 2004</a>,
 <a href="http://www.cc.gatech.edu/classes/AY2004/cs6246_Fall/">Fall 2003</a>,
 <a href="http://www.cc.gatech.edu/classes/AY2003/cs8803g_Fall/">Fall 2002</a>,
 <a href="http://www.cc.gatech.edu/classes/AY2002/cs8803f_Fall/">Fall 2001</a>);
Graduate Seminar
(<a href="http://www.cs.uoregon.edu/classes/07S/cis607pa/">Spring 2007</a>,
 <a href="http://www.cs.uoregon.edu/classes/07F/cis607atomicity/">Fall 2008</a>);
Distributed Systems
(<a href="http://www.cs.uoregon.edu/classes/06F/cis630/">Fall 2006</a>,
 <a href="http://www.cs.uoregon.edu/classes/07F/cis630/">Fall 2007</a>); 
Intro OO
(<a href="http://www.cc.gatech.edu/classes/AY2006/cs1322_Fall/">Fall 2005</a>, 
 <a href="http://www.cc.gatech.edu/classes/AY2005/cs1322_Spring">Spring 2005</a>);
Advanced OS
(<a href="http://www.cc.gatech.edu/classes/AY2004/cs4210_Spring/">Spring 2004</a>,
 <a href="http://www.cc.gatech.edu/classes/AY2003/cs4210_Spring/">Spring 2003</a>,
 <a href="http://www.cc.gatech.edu/classes/AY2002/cs4210_Spring/">Spring 2002</a>,
 <a href="http://www.cc.gatech.edu/classes/AY2001/cs4210_Spring/">Spring 2001</a>,
 <a href="http://www.cc.gatech.edu/classes/AY2000/cs4210_Spring/">Spring 2000</a>);
Memory Management (<a href="http://www.cc.gatech.edu/%7Eyannis/Fall00">Fall 2000</a>).</li>
</ul>
<!-- 
<span class="c2">Announcements:</span><br>
<ul>
  <li><a href="postdoc.html">Hiring for a postoc position (Morphing project)</a>. Also hiring a postdoc for program analysis work (contact me).</li> 
</ul>
-->
</td>
<td><a href="yannis-large.jpg"><img alt="yannis-pic" class="c1" src="me.jpg"/></a></td>
</tr>
</tbody>
</table>
<hr width="100%"/>
<span class="c2">Research</span>
<ul>
<li> Programming languages and 
software engineering:</li>
<li class="c4">
<ul>
<li>Program analysis (static analysis, test generation, invariant inference, symbolic execution)</li>
<li>Language mechanisms for abstraction (declarative languages, program
generation, DSLs, modules and components, generics, extensible languages, multi-paradigm programming)</li>
<li>Languages and tools for systems
(programming models for concurrency, language support for distributed
computing, memory management and program locality)</li>
</ul>
</li>
</ul>
<table border="0" width="100%">
<tbody>
<tr>
<td align="left" width="85%">
<ul>
<li> 
  Gratefully acknowledging funding by the <a href="http://erc.europa.eu">ERC</a> and the <a href="http://www.elidek.gr/en/homepage/">HFRI</a>.
  </li>
<li>(Perpetually outdated) <a href="cv.pdf">CV</a></li>
</ul>
</td>
<td>
<a href="http://erc.europa.eu"><img alt="ERC logo" class="c12" src="LOGO-ERC-small.jpg"/></a>
</td>
</tr>
</tbody>
</table>
<ul>
<li>My PhD students: 
   <a href="http://gkastrinis.info/">George Kastrinis</a>,
   Anastasis Antoniadis. 
  </li>
<li>PhD alumni: 
   <a href="http://lorgonblog.spaces.live.com/">Brian McNamara</a>, 
   <a href="http://www.cs.vt.edu/%7Etilevich/">Eli Tilevich</a>,
   <a href="http://ranger.uta.edu/~csallner/">Christoph Csallner</a>,
   <a href="http://www.freeflygeek.com/">Shan Shan Huang</a>,
   <a href="http://jgaltidor.github.io/">John Altidor</a>,
   <a href="http://www.cs.umass.edu/~kaituo/">Kaituo Li</a>,
   <a href="http://biboudis.github.io/">Aggelos Biboudis</a>,
   <a href="http://gbalats.github.io/">George Balatsouras</a>.
  </li>
<li>Research Associates: 
       <a href="http://www.softlab.ntua.gr/~gfour/">George Fourtounis</a>,
       <a href="https://www.linkedin.com/in/nevillegrech">Neville Grech</a>.
<!--
       <a href="http://www-plan.cs.colorado.edu/creichen/">Christoph Reichenbach</a>, 
       <a href="http://martin.bravenboer.name/">Martin Bravenboer</a>, and the 
       <a href="http://www.logicblox.com">LogicBlox</a> developers.<br>
-->
</li>
<li>Sample older <a href="theses/index.html">B.Sc. and M.Sc. theses</a>
</li>
<li class="c4"><br/></li>
<li><img alt="New!" class="c5" src="new.gif" title=""/>Latest work:</li>
<li class="c4">
<ul>
<li>"<a href="ethainter-pldi20-draft.pdf">Ethainter: A Smart Contract Security Analyzer for Composite Vulnerabilities</a>" (<a href="https://conf.researchr.org/home/pldi-2020">PLDI 2020</a>)</li>
<li>"<a href="enterprise-pldi20-draft.pdf">Static Analysis of Java Enterprise Applications: Frameworks and Caches, the Elephants in the Room</a>" (<a href="https://conf.researchr.org/home/pldi-2020">PLDI 2020</a>)</li>
<li>"<a href="toplas20-zipper.pdf">A Principled Approach to Selective Context Sensitivity for Pointer Analysis</a>" (<a href="https://dl.acm.org/journal/toplas">ACM TOPLAS</a>, to appear)
	  <ul>
<li> extends "<a href="zipper-oopsla18.pdf">Precision-Guided Context Sensitivity for Pointer Analysis</a>" (<a href="https://conf.researchr.org/track/splash-2018/splash-2018-OOPSLA">OOPSLA 2018</a>)</li>
</ul>
</li>
<li>"<a href="next-paradigm-onward19.pdf">Next-Paradigm Programming Languages: What Will They Look Like and What Changes Will They Bring?</a>" (<a href="https://2019.splashcon.org/track/splash-2019-Onward-Essays">Onward! Essays 2019</a>)</li>
<li>"<a href="invokedynamic-ecoop19-preprint.pdf">Deep Static Modeling of Invokedynamic</a>" (<a href="https://conf.researchr.org/home/ecoop-2019">ECOOP 2019</a>)</li>
<li>"<a href="gigahorse-icse19.pdf">Gigahorse: Thorough, Declarative Decompilation of Smart Contracts</a>" (<a href="https://conf.researchr.org/home/icse-2019">ICSE 2019</a>)</li>
<li>"<a href="eth-oopsla18.pdf">MadMax: Surviving Out-of-Gas Conditions in Ethereum Smart Contracts</a>" (<a href="https://conf.researchr.org/track/splash-2018/splash-2018-OOPSLA">OOPSLA 2018</a>) <img alt="distinguished paper award" class="c6" src="award.gif" title="distinguished paper award"/> <img alt="2019 SIGPLAN Research Highlight" class="c6" src="award.gif" title="2019 SIGPLAN Research Highlight"/></li>
<li>"<a href="FSE18-camera-ready.pdf">Scalability-First Pointer Analysis with
Self-Tuning Context-Sensitivity</a>" (<a href="https://conf.researchr.org/home/fse-2018">ESEC/FSE 2018</a>)</li>
<li>"<a href="ecoop18-sound-may-preprint.pdf">Defensive Points-To Analysis: Effective Soundness via Laziness</a>" (<a href="https://conf.researchr.org/home/ecoop-2018">ECOOP 2018</a>) <img alt="distinguished paper award" class="c6" src="award.gif" title="distinguished paper award"/></li>
<li>"<a href="ecoop18-string-coloring-preprint.pdf">Efficient Reflection String Analysis via Graph Coloring</a>" (<a href="https://conf.researchr.org/home/ecoop-2018">ECOOP 2018</a>)</li>
<li>"<a href="issta18-featherweight-preprint.pdf">Shooting from the Heap: Ultra-Scalable Static Analysis with Heap Snapshots</a>" (<a href="http://conf.researchr.org/home/issta-2018">ISSTA 2018</a>)</li>
<li>"<a href="issta18-dynamic-proxies-preprint.pdf">Static Analysis of Java Dynamic Proxies</a>" (<a href="http://conf.researchr.org/home/issta-2018">ISSTA 2018</a>)</li>
<li>"<a href="PLDI-18.pdf">Symbolic Reasoning for Automatic Signal Placement</a>" (<a href="http://conf.researchr.org/home/pldi-2018">PLDI 2018</a>)</li>
<li>"<a href="must-datastruct-cc18.pdf">An Efficient Data Structure for Must-Alias Analysis</a>" (<a href="https://cc-conference.github.io/18/">CC 2018</a>)</li>
<li>"<a href="doubleBlind-CACM.pdf">Effectiveness of Anonymization in Double-Blind Review</a>" (<a href="http://cacm.acm.org/">CACM</a>, Jun 2018)</li>
</ul>
<br/></li>
<li> Project areas, each with representative publications and links:<br/>
</li>
<li class="c4">
<ul>
<li><span class="c7">Static Program Analysis</span>: we express a rich set of static analyses completely declaratively (in the Datalog language).</li>
<li class="c4">
<ul>
<li>Reference/overview material:
		<ul>
<li>The <a href="https://bitbucket.org/yanniss/doop/">Doop framework</a></li>
<li>"<a href="points-to-tutorial15.pdf">Pointer Analysis</a>" tutorial survey (<a href="http://www.nowpublishers.com/PGL">Foundations and Trends in PL</a>, <a href="http://dx.doi.org/10.1561/2500000014">official link</a>)</li>
<li><a href="http://plast-lab.github.io/feb16-seminar/">Notes, slides, etc.</a> from a 2016 seminar. <a href="https://www.youtube.com/channel/UCoeyDLLCB4AGlLRrI_cdDHw">Videos of lectures</a>.</li>
</ul>
</li>
<li>"<a href="heapdl-oopsla17.pdf">Heaps Don’t Lie: Countering Unsoundness with Heap
Snapshots</a>" (<a href="http://2017.splashcon.org/track/splash-2017-OOPSLA">OOPSLA 2017</a>)</li>
<li>"<a href="ptaint-oopsla17.pdf">P/Taint: Unified Points-to and Taint Analysis</a>" (<a href="http://2017.splashcon.org/track/splash-2017-OOPSLA">OOPSLA 2017</a>)</li>
<li>"<a href="doop2souffle-soap17.pdf">Porting Doop to Souffle: A Tale of Inter-Engine Portability for Datalog-Based Analyses</a>" (<a href="http://conf.researchr.org/track/pldi-ecoop-2017/SOAP-2017-papers">SOAP 2017</a>)</li>
<li>"<a href="must-alias-soap17.pdf">A Datalog Model of Must-Alias Analysis</a>" (<a href="http://conf.researchr.org/track/pldi-ecoop-2017/SOAP-2017-papers">SOAP 2017</a>)</li>
<li>"<a href="cclyzer-sas16.pdf">Structure-Sensitive Points-To Analysis for C and C++</a>" (<a href="http://staticanalysis.org/sas2016/">SAS 2016</a>)</li>
<li>"<a href="reflection-aplas15.pdf">More Sound Static Handling of Java Reflection</a>" (<a href="http://pl.postech.ac.kr/aplas2015/">APLAS 2015</a>)</li>
<li>"<a href="Soundiness-CACM.pdf">In Defense of Soundiness: A Manifesto</a>" (<a href="http://cacm.acm.org/">CACM</a>, Feb 2015), see also <a href="http://soundiness.org/">soundiness.org</a></li>
<li>"<a href="introspective-pldi14.pdf">Introspective Analysis: Context-Sensitivity, Across the Board</a>" (<a href="http://conferences.inf.ed.ac.uk/pldi2014/">PLDI 2014</a>), <a href="http://cgi.di.uoa.gr/~smaragd/pldi14ae/pldi14-ae.tgz">code</a> </li>
<li>"<a href="set-based-oopsla13.pdf">Set-Based Pre-Processing for Points-To Analysis</a>" (<a href="http://splashcon.org/2013/">OOPSLA 2013</a>)</li>
<li>"<a href="jphantom-oopsla13.pdf">Class Hierarchy Complementation: Soundly Completing a Partial Type Graph</a>" (<a href="http://splashcon.org/2013/">OOPSLA 2013</a>)</li>
<li>"<a href="hybrid-context-pldi13.pdf">Hybrid Context Sensitivity for Points-To Analysis</a>" (<a href="http://pldi2013.ucombinator.org/">PLDI 2013</a>)</li>
<li>"<a href="cc13-exceptions.pdf">Efficient and Effective Handling of Exceptions in Java Points-To Analysis</a>" (<a href="http://www.etaps.org/2013/cc13">CC 2013</a>)</li>
<li>"<a href="typesens-popl11.pdf">Pick Your Contexts Well: Understanding Object-Sensitivity (The Making of a Precise and Scalable Pointer Analysis)</a>" (<a href="http://www.cse.psu.edu/popl/11/">POPL 2011</a>)</li>
<li>"<a href="doop-datalog2.0.pdf">Using Datalog for Fast and Easy Program Analysis</a>" (<a href="http://datalog20.org/">Datalog 2.0</a>)</li>
<li>"<a href="kcfa-pldi10.pdf">Resolving and Exploiting the k-CFA Paradox: Illuminating Functional vs. Object-Oriented Program Analysis</a>" (<a href="http://www.cs.stanford.edu/pldi10/">PLDI 2010</a>)</li>
<li>"<a href="doop-oopsla09prelim.pdf">Strictly Declarative Specification of Sophisticated Points-to Analyses</a>" (<a href="http://www.oopsla.org/oopsla2009/">OOPSLA 2009</a>)</li>
<li>"<a href="doop-issta09prelim.pdf">Exception Analysis and Points-To Analysis: Better Together</a>" (<a href="http://www.cse.msu.edu/issta09/">ISSTA 2009</a>)</li>
</ul><br/>
</li>
<li><span class="c7">Program generators, generics in PL, extensibility</span>: <a href="http://code.google.com/p/morphing/">MorphJ</a>
<!--
 and <a href="http://www.cc.gatech.edu/%7Essh/cj/">cJ</a>

 cJ
enhances
Java generics with a safe static-if construct.
-->
is a language for safe "morphing", i.e.,
creating classes by iterating over members of other classes. Recent work also includes a generalization of
the concept of "variance" in generics/templates: a way to marry parametric and subtype polymorphism. In
the 90s, I also worked (as an intern and a funded PhD student) on the <a href="http://en.wikipedia.org/wiki/Intentional_programming">Intentional
Programming (IP)</a> project at Microsoft.</li>
<li class="c4">
<ul>
<li>"<a href="streams-popl17.pdf">Stream Fusion, to Completeness</a>" (<a href="http://conf.researchr.org/home/POPL-2017">POPL 2017</a>)</li>
<li>"<a href="gttse-generation17.pdf">Structured Program Generation Techniques</a>" (<a href="http://gttse.wikidot.com/">GTTSE--Grand Timely Topics in SE</a>)</li>
<li>"<a href="adrt-oopsla15.pdf">Automating Ad hoc Data Representation Transformations</a>" (<a href="http://2015.splashcon.org/">OOPSLA 2015</a>) <img alt="distinguished artifact award" class="c8" src="award.gif" title="distinguished artifact award"/></li>
<li>"<a href="foo-ftfjp15.pdf">Foo: A Minimal Modern OO Calculus</a>" (<a href="http://2015.ecoop.org/track/FTfJP-2015-papers">FTfJP 2015</a>)</li>
<li>"<a href="jucm-maspeghi15.pdf">jUCM: Universal Class Morphing</a>" (<a href="http://2015.ecoop.org/track/MASPEGHI-2015-papers">MASPEGHI 2015</a>)</li>
<li>"<a href="algebras-ecoop15.pdf">Streams a la carte: Extensible Pipelines with Object Algebras</a>" (<a href="http://2015.ecoop.org/">ECOOP 2015</a>). Closely related to earlier performance analysis study: "<a href="lambdas-icooolps14.pdf">Clash of the Lambdas</a>" (<a href="http://soft-dev.org/events/icooolps14/">ICOOOLPS 2014</a>)</li>
<li>"<a href="variance-oopsla14.pdf">Refactoring Java Generics by Inferring Wildcards, In Practice</a>" (<a href="http://2014.splashcon.org/track/oopsla2014">OOPSLA 2014</a>)</li>
<li>"<a href="delphj-oopsla13.pdf">Forsaking Inheritance: Supercharged Delegation in DelphJ</a>" (<a href="http://splashcon.org/2013/">OOPSLA 2013</a>)</li>
<li>"<a href="reified-gpce13.pdf">Reified Type Parameters Using Java Annotations</a>" (<a href="http://program-transformation.org/GPCE13">GPCE 2013</a>)</li>
<li>"<a href="varj-ecoop12.pdf">Java Wildcards Meet Definition-Site Variance</a>" (<a href="http://ecoop12.cs.purdue.edu/">ECOOP 2012</a>)</li>
<li>"<a href="morphj-toplas.pdf">Morphing: Structurally Shaping a Class by
            Reflecting on Others</a>": a comprehensive article (<a href="http://userweb.cs.utexas.edu/~toplas/">ACM TOPLAS</a>, sans appendix)
      <ul>
<li>"<a href="morphj-pldi08.pdf">Expressive and Safe Static Reflection with MorphJ</a>" (<a href="http://pldi2008.cs.ucr.edu/">PLDI 2008</a>)</li>
<li>"<a href="mj.pdf">Morphing: Safely Shaping a Class in the Image
of Others</a>" (<a href="http://ecoop07.swt.cs.tu-berlin.de/">ECOOP 2007</a>)</li>
<li>"<a href="ramse07.pdf">Morphing Software for Easier Evolution</a>" (<a href="http://homes.dico.unimi.it/~cazzola/RAM-SE07.html">RAM-SE 2007</a>)<br/></li>
</ul>
</li>
<li>"<a href="safegen-scp.pdf">Statically Safe Program Generation with SafeGen</a>" (<a href="http://www.elsevier.com/locate/scico">SCP</a>) shows a language that can certify a generator under all possible inputs
to assert that it will only produce well-formed programs.
      <ul>
<li><a href="safegen.pdf">conference version</a> at <a href="http://www.gpce.org/05">GPCE 2005</a></li>
</ul>
</li>
<li>"<a href="variance-pldi11.pdf">Taming the Wildcards: Combining Definition- and Use-Site Variance</a>" (<a href="http://pldi11.cs.utah.edu/">PLDI 2011</a>)</li>
<li> <a href="maj">Meta-AspectJ</a> (MAJ)
		is a state-of-the-art meta-programming tool for Java and AspectJ
	  <ul>
<li>"<a href="maj-tosem.pdf">Domain-Specific Languages and Program
			Generation with Meta-AspectJ</a>" (<a href="http://tosem.acm.org">ACM TOSEM</a>).
          Expands "<a href="maj.pdf">Generating AspectJ Programs with Meta-AspectJ</a>" (<a href="http://gpce04.gpce.org">GPCE 2004</a>) <img alt="best paper award" class="c8" src="award.gif" title="best paper award"/> and
          "<a href="maj-icse06-er.pdf">Easy Language Extension with
Meta-AspectJ</a>" (<a href="http://www.isr.uci.edu/icse-06/">ICSE 2006</a>
Emerging Results)
        </li>
</ul>
</li>
<li>"<a href="cj.pdf">cJ: Enhancing Java with Safe Type Conditions</a>"
(<a href="http://www.aosd.net/2007/">AOSD 2007</a>)<br/></li>
<li>"<a href="pepm04.pdf">Program
Generators and the Tools to Make Them</a>" (<a href="http://www.sci.univr.it/%7Epepm04">PEPM 2004</a>)<br/>
</li>
<li>"<a href="gen-outlook.pdf">A
Personal Outlook on Generator Research</a>" (<a href="http://infosun.fmi.uni-passau.de/cl/papers/DSPG2004.html">Domain-Specific
Program Generation</a>)<br/>
</li>
<li>"<a href="generators.pdf">Application
Generators</a>": survey article in the <a href="http://www.wiley.com/ee/engineering">Encyclopedia of Electrical
and Electronics Engineering, (John Wiley and Sons)</a></li>
<li>"<a href="ftp://ftp.cs.utexas.edu/pub/predator/jts.pdf">JTS:
Tools for Implementing Domain-Specific Languages</a>" (ICSR 1998)</li>
<li>"<a href="gscope99.pdf">Scoping
Constructs for Program Generators</a>" (GCSE 1999)</li>
<li>"<a href="distil.pdf">DiSTiL: a
Transformation Library for Data Structures</a>" in the Domain-Specific
Languages conference (DSL) 1997.
      </li>
</ul>
<br/>
</li>
<li><span class="c7">Declarative languages</span>: Lately I have explored small, declarative languages for various tasks (e.g., <a href="pql-ecoop12.pdf">parallelism</a>, but also <a href="gcassert.pdf">GC-time computation</a>). 
    </li>
<li class="c4">
<ul>
<li>"<a href="pql-cc15.pdf">A Backend Extension Mechanism for PQL/Java with Free Run-Time Optimisation</a>" (<a href="http://www.etaps.org/index.php/2015/cc">CC 2015</a>)</li>
<li>"<a href="pql-ecoop12.pdf">PQL: A Purely-Declarative Java Extension for Parallel Programming</a>" (<a href="http://ecoop12.cs.purdue.edu/">ECOOP 2012</a>)</li>
<li>"<a href="DeclarativeDebugging.pdf">Declarative Datalog Debugging for Mere Mortals</a>" (<a href="http://www.dbai.tuwien.ac.at/datalog2.0/">Datalog 2.0 2012</a>)</li>
<li>"<a href="gcassert.pdf">What Can the GC Compute Efficiently? A Language for Heap Assertions at GC Time</a>" (<a href="http://splashcon.org/2010/">OOPSLA 2010</a>)</li>
<li>"<a href="pldi-fit-2010.pdf">A New Java Runtime for a Parallel World</a>" (<a href="http://www.cs.stanford.edu/pldi10/fit.html">PLDI 2010 FIT</a>)</li>
</ul>
<br/>
</li>
<li><span class="c7">Program analysis and test generation for bug detection</span>: recent work
includes <a href="residual-tosem14.pdf">Residual Investigation</a>: an approach that enhances static
bug warnings with predictive dynamic analyses. My original work includes 
<a href="http://ranger.uta.edu/~csallner/jcrasher/">JCrasher</a>
and its
followups, <a href="http://ranger.uta.edu/~csallner/cnc/">CnC</a>
and <a href="http://ranger.uta.edu/~csallner/dsd-crasher/">DSD-Crasher</a>.
JCrasher
is a system for random testing of Java programs. CnC combines
static checking (the ESC/Java system) with automatic test case
generation. DSD-Crasher adds a dynamic invariant detection step
to CnC. Finally, the ORM- modeling formalism allows efficient satisfiability
checking and test data generation.</li>
<li class="c4">
<ul>
<li>"<a href="residual-tosem14.pdf">Residual Investigation: Predictive and Precise Bug Detection</a>" (<a href="http://tosem.acm.org">ACM TOSEM</a>)
      <ul>
<li><a href="residual-issta12.pdf">conference version</a> at <a href="http://crisys.cs.umn.edu/issta2012/">ISSTA 2012</a> <img alt="distinguished paper award" class="c6" src="award.gif" title="distinguished paper award"/>
</li>
</ul>
</li>
<li>"<a href="sedge-ase13.pdf">SEDGE: Symbolic Example Data Generation for Dataflow Programs</a>" (<a href="http://ase2013.org/">ASE 2013</a>)</li>
<li>"<a href="meta-invariantsFSE13.pdf">Second-Order Constraints in Dynamic Invariant Inference</a>" (<a href="http://esec-fse.inf.ethz.ch/">ESEC/FSE 2013</a>)</li>
<li>"<a href="orm-jase.pdf">Scalable Satisfiability Checking and Test Data Generation from Modeling Diagrams</a>" (<a href="http://www.Springer.com/computer/artificial/journal/10515">JASE</a>): the ORM- paper
      <ul>
<li><a href="dbsat-ase07.pdf">conference version</a> at <a href="http://www.cse.msu.edu/ase2007/">ASE 2007</a> <img alt="best paper award" class="c6" src="award.gif" title="best paper award"/>
</li>
</ul>
</li>
<li>"<a href="dysy-icse08.pdf">DySy: Dynamic Symbolic Execution for Invariant Inference</a>" (<a href="http://icse08.upb.de/">ICSE 2008</a>)</li>
<li>"<a href="dsd-tosem.pdf">DSD-Crasher: A Hybrid Analysis Tool for Bug
Finding</a>" (<a href="http://tosem.acm.org">ACM TOSEM</a>), 
        <a href="issta06.pdf">conference version</a> at <a href="http://www.cis.udel.edu/issta06/">ISSTA 2006</a>
<img alt="distinguished paper award" src="award.gif" style="width: 16px; height: 17px;" title="distinguished paper award"/><br/>
</li>
<li>"<a href="tap07.pdf">Combining Static and Dynamic Reasoning for
Bug Detection</a>" (<a href="http://tap.ethz.ch/">TAP</a>, 2007)<br/>
</li>
<li>"<a href="er23-csallner.pdf">Dynamically Discovering Likely
Interface Invariants</a>" (<a href="http://www.isr.uci.edu/icse-06/">ICSE 2006</a> Emerging Results)<br/>
</li>
<li>"<a href="cnc-final.pdf">CnC: Combining Static
Checking and Testing</a>" (<a href="http://www.cs.wustl.edu/icse05/Home/index.shtml">ICSE 2005</a>)<br/>
</li>
<li>"<a href="jcrasher.pdf">JCrasher:
an
Automatic Robustness Tester for Java</a>" (<a href="http://www.interscience.wiley.com/jpages/0038-0644/">Software:
Practice and Experience</a>)<br/>
</li>
</ul>
<br/>
</li>
<li><span class="c7">Languages and language-inspired tools for distributed and concurrent computing</span>: Some recent work includes the <a href="cp-popl12.pdf">causally-precedes</a> relation for sound, predictive race detection, and <a href="adaptive-pact09.pdf">adaptive locks</a>: a model for switching between mutex locks and transactions dynamically (either for performance or for correctness). See also the <a href="tic-oopsla07.pdf">TIC</a> model for transactional memory. 
<br/>
Past work includes <a href="j-orchestra/">J-Orchestra</a>:
an automatic partitioning system for Java programs. It manages to
enable distributed execution over a network, as if the program was
running on a single VM, using only rewrite techniques over standard
runtimes. See also NRMI: Java middleware offering a programming model
for distributed computing that resembles single-machine programming.
    </li>
<li class="c4">
<ul>
<li>"<a href="cp-popl12.pdf">Sound Predictive Race Detection in Polynomial Time</a>" (<a href="http://www.cse.psu.edu/popl/12/">POPL 2012</a>)</li>
<li>"<a href="adaptive-jpdc.pdf">Adaptive Locks: Combining Transactions
and Locks for Efficient Concurrency</a>" (<a href="http://www.elsevier.com/wps/find/journaldescription.cws_home/622895/description#description">JPDC</a>)
      <ul>
<li><a href="adaptive-pact09.pdf">conference version</a> at <a href="http://www.pactconf.org/">PACT 2009</a>, <a href="al-transact09.pdf">earlier version</a> at <a href="http://transact09.cs.washington.edu/">TRANSACT 2009</a>, <a href="mspc08.pdf">position paper</a> at <a href="http://www.cs.umass.edu/~emery/MSPC08/">MSPC 2008</a>.
        </li>
</ul>
</li>
<li>"<a href="tic-oopsla07.pdf">Transactions with Isolation and Cooperation</a>" (<a href="http://www.oopsla.org/oopsla2007/">OOPSLA 2007</a>)</li>
<li>"<a href="nrmi_journal_final.pdf">NRMI: Natural and Efficient Middleware</a>" (<a href="http://www.computer.org/tpds">IEEE TPDS</a>)<br/>
<ul>
<li><a href="nrmi03.pdf">conference version</a> at <a href="http://www.cse.msu.edu/icdcs/">ICDCS 2003</a>
</li>
</ul>
</li>
<li>"<a href="jorch-tosem.pdf">J-Orchestra: Enhancing Java Programs with Distribution Capabilities</a>": a comprehensive article (<a href="http://tosem.acm.org">ACM TOSEM</a>)
      <ul>
<li>"<a href="j-orchestra/ecoop2002.pdf">J-Orchestra: Automatic Java Application Partitioning</a>": the original J-Orchestra paper from <a href="http://www.ecoop2002.lcc.uma.es/">ECOOP 2002</a>. Extended version in <a href="j-orchestra/git-cc-02-17.pdf">CoC Tech Report 02-17</a>. </li>
<li>"<a href="appletizing.pdf">Appletizing: Running Legacy Java Code Remotely From a Web Browser</a>" (<a href="http://www.inf.u-szeged.hu/icsm2005/">ICSM 2005</a>) uses J-Orchestra to convert a regular Java application into an applet-server combination.<br/>
</li>
<li> "<a href="j-orchestra/dist-synch-final.pdf">Portable and Efficient Distributed Threads for Java</a>" (ACM <a href="http://www.eecg.toronto.edu/middleware2004/">Middleware 2004</a>) explains the distributed synchronization in J-Orchestra.<br/>
</li>
<li> "<a href="jorch-kim.pdf">Automatic Partitioning: A Promising Approach to Prototyping Ubiquitous Computing Applications</a>" (IEEE Pervasive Computing)</li>
<li>"<a href="j-orchestra/jorch-position.pdf">Automatic Application Partitioning: The J-Orchestra approach</a>" (position paper from the <a href="http://cui.unige.ch/%7Eecoopws/ws02/">8th ECOOP workshop on Mobile Object systems</a>)</li>
</ul>
</li>
<li>"<a href="userind-GPCE06.pdf">Transparent Program
Transformations in the Presence of Opaque Code</a>" (<a href="http://www.gpce.org/06">GPCE 2006</a>)<br/></li>
<li>"<a href="binary-refactoring04.pdf">Binary Refactoring:
Improving Code Behind the Scenes</a>" (<a href="http://www.cs.wustl.edu/icse05/Home/index.shtml">ICSE 2005</a>):
a refactoring-for-optimization
technique that does not pollute the source code<br/>
</li>
<li>"<a href="aspect-ase03.pdf">Aspectizing Server-Side
Distribution</a>": a description of <a href="j-orchestra/GOTech/index.htm">GOTECH</a>, (ASE 2003)<br/>
<br/>
</li>
</ul>
</li>
<li><span class="c7">Memory management</span>: I
have worked on adaptive memory management algorithms, i.e.,
ways to combine two policies and get the best of both, with theoretical
guarantees. In the past, I proposed the
EELRU replacement algorithm for virtual memory systems, which
consistently outperforms LRU.
Additionally, I have worked on techniques for compressed virtual memory
and for the reduction (i.e., simulation-specific compression) of
program
reference traces.</li>
<li class="c4">
<ul>
<li>"<a href="adapt-TR2006.pdf">Adaptive Caching: Effective Shaping
of Cache Behavior to Workloads</a>" (<a href="http://www.microarch.org/micro39/">MICRO 2006</a>)<br/>
</li>
<li>"<a href="adaptive2.pdf">General Adaptive
Replacement Policies</a>"
(<a href="http://www.research.ibm.com/ismm04/">ISMM 2004</a>)<br/>
</li>
<li>"<a href="eelrufinal2.pdf">The
EELRU adaptive replacement algorithm</a>" (<a href="http://www.elsevier.com/locate/peva">Performance
Evaluation--Elsevier</a>)</li>
<li class="c4">
<ul>
<li>"<a href="eelru.ps">EELRU:
Simple and
Effective Adaptive Page Replacement</a>" (<a href="http://www.cs.usask.ca/faculty/carey/sigmetrics99/">SIGMETRICS 1999</a>):
the original EELRU paper<br/>
</li>
</ul>
</li>
<li>"<a href="tracered-tomacs.pdf">Flexible
Reference Trace Reduction for VM Simulations</a>" (<a href="http://www.acm.org/tomacs/">ACM TOMACS</a>)</li>
<li class="c4">
<ul>
<li>"<a href="reduction2.pdf">Trace
Reduction for Virtual Memory Simulations</a>" (<a href="http://www.cs.usask.ca/faculty/carey/sigmetrics99/">SIGMETRICS 1999</a>):
the original trace reduction paper</li>
</ul>
</li>
<li>"<a href="compression.pdf">The
Case for Compressed Caching in Virtual Memory Systems</a>", at the <a href="http://www.usenix.org/events/usenix99/">1999 USENIX Annual
Technical Conference</a> <img alt="outstanding paper award" src="award.gif" style="width: 16px; height: 18px;" title="outstanding paper award"/>
</li>
<li>"<a href="modem-2000.pdf">Performing
Replacement in Modem Pools</a>" (<a href="http://www.usenix.org/publications/library/proceedings/usenix2000/">USENIX 2000</a>): an algorithm for managing modem pools efficiently. Directly related to replacement algorithms in virtual memory!</li>
<li class="c4">
<ul>
<li> Some <a href="modemptrs.html">pointers</a>
to supplementary material.</li>
</ul>
</li>
</ul><br/>
</li>
<li><span class="c7">Multiparadigm Programming</span>:
      <a href="fc++/">FC++</a> is a
      really cool library for programming functionally in C++. It is
      the first library to fully combine higher-order and polymorphic
      functions, by neatly exploiting C++ type
      inference. <a href="lc++/">LC++</a>
      is its small sibling.<br/>
</li>
<li class="c4">
<ul>
<li>"<a href="fc++/fcpp-jfp.pdf">Functional
Programming with the  FC++ library</a>" (Journal of Functional
Programming)</li>
<li class="c4">
<ul>
<li>"<a href="fc++/fc++.main.pdf">Functional
Programming
in C++</a>" (<a href="http://diwww.epfl.ch/%7Eodersky/icfp2000/">ICFP 2000</a>):
the original FC++ paper<br/>
</li>
</ul>
</li>
<li>"<a href="fc++/funoo.pdf">FC++:
Functional Tools for OO Tasks</a>" (Software Practice &amp; Experience)
shows how
common
OO programming tasks benefit from FC++ </li>
<li> <a href="fc++/">The FC++
Web page</a> contains pointers to more FC++ publications and
information
      </li>
<li> Also related: "<a href="mcnamara.pdf">Static
Interfaces in C++</a>" (<a href="http://www.oonumerics.org/tmpw00/">2000
C++ Template Programming
Workshop</a>): How can we enforce interface requirements in C++?</li>
</ul>
<br/>
</li>
<li><span class="c7">Object-Oriented components</span>:
My PhD proposed the concept of 
"mixin layers". A mixin layer is a static component encapsulating
fragments of several different classes (mixins) so that all fragments
are composed consistently. Mixin layers are an elegant implementation
technique for layered designs.</li>
<li class="c4">
<ul>
<li>"<a href="templates.pdf">Implementing
Layered Designs with Mixin Layers</a>": the original mixin layers
paper from <a href="http://ecoop98.vub.ac.be/">ECOOP 1998</a></li>
<li>"<a href="yannis-thesis.pdf">Implementing
Large-Scale Object-Oriented Components</a>" (PhD Dissertation)</li>
<li>"<a href="tosem01.pdf">Mixin
Layers: An
Object-Oriented Implementation Technique for Refinements and
Collaboration-Based Designs</a>" (<a href="http://www.acm.org/tosem/">ACM
TOSEM</a>)</li>
<li>"<a href="practical-fmtd.pdf">Mixin-Based Programming in C++</a>"
(GCSE 2000)</li>
<li>"<a href="dynamic.pdf">Layered
Development with (Unix) Dynamic Libraries</a>" (<a href="http://asercweb.ee.ualberta.ca/Conferences/ICSR7/">ICSR 2002</a>):
Unix dynamic libraries (shared objects) offer great support
for layered programming</li>
<li class="c4">
<ul>
<li><a href="icsrcode.tar.gz">source code</a></li>
</ul>
</li></ul>
<br/></li>
</ul>
</li>
</ul>
<hr width="100%"/>
<span class="c2">Non-Technical:</span>
<ul>
<li><a href="phd-slides.pdf">Why do a PhD and how to pick an area</a> (update of older "PhD Rants and Raves")</li>
<li><a href="law.html">Yannis's law</a>: Programmer Productivity Doubles Every 6 Years. (Yes, I'm only half serious, but half is enough.)</li>
<li><a href="humor.html">My (favorite) academic humor</a></li>
</ul>
</body>
</html>
